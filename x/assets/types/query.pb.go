// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: assets/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetTimedOutAssetRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetTimedOutAssetRequest) Reset()         { *m = QueryGetTimedOutAssetRequest{} }
func (m *QueryGetTimedOutAssetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTimedOutAssetRequest) ProtoMessage()    {}
func (*QueryGetTimedOutAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a673fc2391b35d4, []int{0}
}
func (m *QueryGetTimedOutAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTimedOutAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTimedOutAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTimedOutAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTimedOutAssetRequest.Merge(m, src)
}
func (m *QueryGetTimedOutAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTimedOutAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTimedOutAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTimedOutAssetRequest proto.InternalMessageInfo

func (m *QueryGetTimedOutAssetRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetTimedOutAssetResponse struct {
	TimedOutAsset *TimedOutAsset `protobuf:"bytes,1,opt,name=TimedOutAsset,proto3" json:"TimedOutAsset,omitempty"`
}

func (m *QueryGetTimedOutAssetResponse) Reset()         { *m = QueryGetTimedOutAssetResponse{} }
func (m *QueryGetTimedOutAssetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTimedOutAssetResponse) ProtoMessage()    {}
func (*QueryGetTimedOutAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a673fc2391b35d4, []int{1}
}
func (m *QueryGetTimedOutAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTimedOutAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTimedOutAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTimedOutAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTimedOutAssetResponse.Merge(m, src)
}
func (m *QueryGetTimedOutAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTimedOutAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTimedOutAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTimedOutAssetResponse proto.InternalMessageInfo

func (m *QueryGetTimedOutAssetResponse) GetTimedOutAsset() *TimedOutAsset {
	if m != nil {
		return m.TimedOutAsset
	}
	return nil
}

type QueryAllTimedOutAssetRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTimedOutAssetRequest) Reset()         { *m = QueryAllTimedOutAssetRequest{} }
func (m *QueryAllTimedOutAssetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTimedOutAssetRequest) ProtoMessage()    {}
func (*QueryAllTimedOutAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a673fc2391b35d4, []int{2}
}
func (m *QueryAllTimedOutAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTimedOutAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTimedOutAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTimedOutAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTimedOutAssetRequest.Merge(m, src)
}
func (m *QueryAllTimedOutAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTimedOutAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTimedOutAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTimedOutAssetRequest proto.InternalMessageInfo

func (m *QueryAllTimedOutAssetRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTimedOutAssetResponse struct {
	TimedOutAsset []*TimedOutAsset    `protobuf:"bytes,1,rep,name=TimedOutAsset,proto3" json:"TimedOutAsset,omitempty"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTimedOutAssetResponse) Reset()         { *m = QueryAllTimedOutAssetResponse{} }
func (m *QueryAllTimedOutAssetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTimedOutAssetResponse) ProtoMessage()    {}
func (*QueryAllTimedOutAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a673fc2391b35d4, []int{3}
}
func (m *QueryAllTimedOutAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTimedOutAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTimedOutAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTimedOutAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTimedOutAssetResponse.Merge(m, src)
}
func (m *QueryAllTimedOutAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTimedOutAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTimedOutAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTimedOutAssetResponse proto.InternalMessageInfo

func (m *QueryAllTimedOutAssetResponse) GetTimedOutAsset() []*TimedOutAsset {
	if m != nil {
		return m.TimedOutAsset
	}
	return nil
}

func (m *QueryAllTimedOutAssetResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSentAssetRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetSentAssetRequest) Reset()         { *m = QueryGetSentAssetRequest{} }
func (m *QueryGetSentAssetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSentAssetRequest) ProtoMessage()    {}
func (*QueryGetSentAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a673fc2391b35d4, []int{4}
}
func (m *QueryGetSentAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSentAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSentAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSentAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSentAssetRequest.Merge(m, src)
}
func (m *QueryGetSentAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSentAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSentAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSentAssetRequest proto.InternalMessageInfo

func (m *QueryGetSentAssetRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetSentAssetResponse struct {
	SentAsset *SentAsset `protobuf:"bytes,1,opt,name=SentAsset,proto3" json:"SentAsset,omitempty"`
}

func (m *QueryGetSentAssetResponse) Reset()         { *m = QueryGetSentAssetResponse{} }
func (m *QueryGetSentAssetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSentAssetResponse) ProtoMessage()    {}
func (*QueryGetSentAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a673fc2391b35d4, []int{5}
}
func (m *QueryGetSentAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSentAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSentAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSentAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSentAssetResponse.Merge(m, src)
}
func (m *QueryGetSentAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSentAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSentAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSentAssetResponse proto.InternalMessageInfo

func (m *QueryGetSentAssetResponse) GetSentAsset() *SentAsset {
	if m != nil {
		return m.SentAsset
	}
	return nil
}

type QueryAllSentAssetRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSentAssetRequest) Reset()         { *m = QueryAllSentAssetRequest{} }
func (m *QueryAllSentAssetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSentAssetRequest) ProtoMessage()    {}
func (*QueryAllSentAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a673fc2391b35d4, []int{6}
}
func (m *QueryAllSentAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSentAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSentAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSentAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSentAssetRequest.Merge(m, src)
}
func (m *QueryAllSentAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSentAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSentAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSentAssetRequest proto.InternalMessageInfo

func (m *QueryAllSentAssetRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSentAssetResponse struct {
	SentAsset  []*SentAsset        `protobuf:"bytes,1,rep,name=SentAsset,proto3" json:"SentAsset,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSentAssetResponse) Reset()         { *m = QueryAllSentAssetResponse{} }
func (m *QueryAllSentAssetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSentAssetResponse) ProtoMessage()    {}
func (*QueryAllSentAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a673fc2391b35d4, []int{7}
}
func (m *QueryAllSentAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSentAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSentAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSentAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSentAssetResponse.Merge(m, src)
}
func (m *QueryAllSentAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSentAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSentAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSentAssetResponse proto.InternalMessageInfo

func (m *QueryAllSentAssetResponse) GetSentAsset() []*SentAsset {
	if m != nil {
		return m.SentAsset
	}
	return nil
}

func (m *QueryAllSentAssetResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTransferAssetRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetTransferAssetRequest) Reset()         { *m = QueryGetTransferAssetRequest{} }
func (m *QueryGetTransferAssetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTransferAssetRequest) ProtoMessage()    {}
func (*QueryGetTransferAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a673fc2391b35d4, []int{8}
}
func (m *QueryGetTransferAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTransferAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTransferAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTransferAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTransferAssetRequest.Merge(m, src)
}
func (m *QueryGetTransferAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTransferAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTransferAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTransferAssetRequest proto.InternalMessageInfo

func (m *QueryGetTransferAssetRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetTransferAssetResponse struct {
	TransferAsset *TransferAsset `protobuf:"bytes,1,opt,name=TransferAsset,proto3" json:"TransferAsset,omitempty"`
}

func (m *QueryGetTransferAssetResponse) Reset()         { *m = QueryGetTransferAssetResponse{} }
func (m *QueryGetTransferAssetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTransferAssetResponse) ProtoMessage()    {}
func (*QueryGetTransferAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a673fc2391b35d4, []int{9}
}
func (m *QueryGetTransferAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTransferAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTransferAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTransferAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTransferAssetResponse.Merge(m, src)
}
func (m *QueryGetTransferAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTransferAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTransferAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTransferAssetResponse proto.InternalMessageInfo

func (m *QueryGetTransferAssetResponse) GetTransferAsset() *TransferAsset {
	if m != nil {
		return m.TransferAsset
	}
	return nil
}

type QueryAllTransferAssetRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTransferAssetRequest) Reset()         { *m = QueryAllTransferAssetRequest{} }
func (m *QueryAllTransferAssetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTransferAssetRequest) ProtoMessage()    {}
func (*QueryAllTransferAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a673fc2391b35d4, []int{10}
}
func (m *QueryAllTransferAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTransferAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTransferAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTransferAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTransferAssetRequest.Merge(m, src)
}
func (m *QueryAllTransferAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTransferAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTransferAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTransferAssetRequest proto.InternalMessageInfo

func (m *QueryAllTransferAssetRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTransferAssetResponse struct {
	TransferAsset []*TransferAsset    `protobuf:"bytes,1,rep,name=TransferAsset,proto3" json:"TransferAsset,omitempty"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTransferAssetResponse) Reset()         { *m = QueryAllTransferAssetResponse{} }
func (m *QueryAllTransferAssetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTransferAssetResponse) ProtoMessage()    {}
func (*QueryAllTransferAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a673fc2391b35d4, []int{11}
}
func (m *QueryAllTransferAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTransferAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTransferAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTransferAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTransferAssetResponse.Merge(m, src)
}
func (m *QueryAllTransferAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTransferAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTransferAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTransferAssetResponse proto.InternalMessageInfo

func (m *QueryAllTransferAssetResponse) GetTransferAsset() []*TransferAsset {
	if m != nil {
		return m.TransferAsset
	}
	return nil
}

func (m *QueryAllTransferAssetResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAssetRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetAssetRequest) Reset()         { *m = QueryGetAssetRequest{} }
func (m *QueryGetAssetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAssetRequest) ProtoMessage()    {}
func (*QueryGetAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a673fc2391b35d4, []int{12}
}
func (m *QueryGetAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAssetRequest.Merge(m, src)
}
func (m *QueryGetAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAssetRequest proto.InternalMessageInfo

func (m *QueryGetAssetRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetAssetResponse struct {
	Asset *Asset `protobuf:"bytes,1,opt,name=Asset,proto3" json:"Asset,omitempty"`
}

func (m *QueryGetAssetResponse) Reset()         { *m = QueryGetAssetResponse{} }
func (m *QueryGetAssetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAssetResponse) ProtoMessage()    {}
func (*QueryGetAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a673fc2391b35d4, []int{13}
}
func (m *QueryGetAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAssetResponse.Merge(m, src)
}
func (m *QueryGetAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAssetResponse proto.InternalMessageInfo

func (m *QueryGetAssetResponse) GetAsset() *Asset {
	if m != nil {
		return m.Asset
	}
	return nil
}

type QueryAllAssetRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAssetRequest) Reset()         { *m = QueryAllAssetRequest{} }
func (m *QueryAllAssetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAssetRequest) ProtoMessage()    {}
func (*QueryAllAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a673fc2391b35d4, []int{14}
}
func (m *QueryAllAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAssetRequest.Merge(m, src)
}
func (m *QueryAllAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAssetRequest proto.InternalMessageInfo

func (m *QueryAllAssetRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAssetResponse struct {
	Asset      []*Asset            `protobuf:"bytes,1,rep,name=Asset,proto3" json:"Asset,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAssetResponse) Reset()         { *m = QueryAllAssetResponse{} }
func (m *QueryAllAssetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAssetResponse) ProtoMessage()    {}
func (*QueryAllAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a673fc2391b35d4, []int{15}
}
func (m *QueryAllAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAssetResponse.Merge(m, src)
}
func (m *QueryAllAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAssetResponse proto.InternalMessageInfo

func (m *QueryAllAssetResponse) GetAsset() []*Asset {
	if m != nil {
		return m.Asset
	}
	return nil
}

func (m *QueryAllAssetResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetTimedOutAssetRequest)(nil), "sap200.shiaa3.assets.QueryGetTimedOutAssetRequest")
	proto.RegisterType((*QueryGetTimedOutAssetResponse)(nil), "sap200.shiaa3.assets.QueryGetTimedOutAssetResponse")
	proto.RegisterType((*QueryAllTimedOutAssetRequest)(nil), "sap200.shiaa3.assets.QueryAllTimedOutAssetRequest")
	proto.RegisterType((*QueryAllTimedOutAssetResponse)(nil), "sap200.shiaa3.assets.QueryAllTimedOutAssetResponse")
	proto.RegisterType((*QueryGetSentAssetRequest)(nil), "sap200.shiaa3.assets.QueryGetSentAssetRequest")
	proto.RegisterType((*QueryGetSentAssetResponse)(nil), "sap200.shiaa3.assets.QueryGetSentAssetResponse")
	proto.RegisterType((*QueryAllSentAssetRequest)(nil), "sap200.shiaa3.assets.QueryAllSentAssetRequest")
	proto.RegisterType((*QueryAllSentAssetResponse)(nil), "sap200.shiaa3.assets.QueryAllSentAssetResponse")
	proto.RegisterType((*QueryGetTransferAssetRequest)(nil), "sap200.shiaa3.assets.QueryGetTransferAssetRequest")
	proto.RegisterType((*QueryGetTransferAssetResponse)(nil), "sap200.shiaa3.assets.QueryGetTransferAssetResponse")
	proto.RegisterType((*QueryAllTransferAssetRequest)(nil), "sap200.shiaa3.assets.QueryAllTransferAssetRequest")
	proto.RegisterType((*QueryAllTransferAssetResponse)(nil), "sap200.shiaa3.assets.QueryAllTransferAssetResponse")
	proto.RegisterType((*QueryGetAssetRequest)(nil), "sap200.shiaa3.assets.QueryGetAssetRequest")
	proto.RegisterType((*QueryGetAssetResponse)(nil), "sap200.shiaa3.assets.QueryGetAssetResponse")
	proto.RegisterType((*QueryAllAssetRequest)(nil), "sap200.shiaa3.assets.QueryAllAssetRequest")
	proto.RegisterType((*QueryAllAssetResponse)(nil), "sap200.shiaa3.assets.QueryAllAssetResponse")
}

func init() { proto.RegisterFile("assets/query.proto", fileDescriptor_4a673fc2391b35d4) }

var fileDescriptor_4a673fc2391b35d4 = []byte{
	// 717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0x3f, 0x6f, 0x13, 0x3f,
	0x18, 0xc7, 0xeb, 0xe4, 0xd7, 0x9f, 0xc0, 0xfc, 0x11, 0xb2, 0x0a, 0x2a, 0x69, 0x7b, 0x2d, 0x57,
	0x68, 0xab, 0x14, 0xf9, 0x9a, 0x64, 0x66, 0x38, 0x06, 0x2a, 0x58, 0x80, 0xc0, 0xd4, 0x01, 0xc9,
	0x69, 0xdc, 0xf4, 0xd0, 0xe5, 0xee, 0x1a, 0x5f, 0x10, 0x15, 0x62, 0x61, 0x01, 0x31, 0x21, 0x75,
	0x41, 0xac, 0x2c, 0x88, 0x95, 0x37, 0xc1, 0x58, 0x89, 0x85, 0x11, 0x25, 0xbc, 0x10, 0x94, 0xb3,
	0x73, 0xb1, 0x13, 0xdf, 0x9f, 0x54, 0xe9, 0x18, 0xdf, 0xf3, 0xb5, 0x3f, 0xcf, 0xf7, 0x79, 0xfc,
	0x38, 0x10, 0x11, 0xc6, 0x68, 0xc8, 0xac, 0xa3, 0x2e, 0xed, 0x1c, 0xe3, 0xa0, 0xe3, 0x87, 0x3e,
	0x5a, 0x60, 0x24, 0xa8, 0xee, 0xec, 0x60, 0x76, 0xe8, 0x10, 0x52, 0xc3, 0x3c, 0xa2, 0xb4, 0xdc,
	0xf2, 0xfd, 0x96, 0x4b, 0x2d, 0x12, 0x38, 0x16, 0xf1, 0x3c, 0x3f, 0x24, 0xa1, 0xe3, 0x7b, 0x8c,
	0x6b, 0x4a, 0xe5, 0x7d, 0x9f, 0xb5, 0x7d, 0x66, 0x35, 0x08, 0xa3, 0x7c, 0x33, 0xeb, 0x55, 0xa5,
	0x41, 0x43, 0x52, 0xb1, 0x02, 0xd2, 0x72, 0xbc, 0x28, 0x58, 0xc4, 0x96, 0xc4, 0x99, 0xcf, 0x9d,
	0x36, 0x6d, 0x3e, 0xee, 0x86, 0xf6, 0xe0, 0xa7, 0xf8, 0x76, 0x43, 0x7c, 0x7b, 0x46, 0x3d, 0x65,
	0x3d, 0xd6, 0x74, 0x88, 0xc7, 0x0e, 0x68, 0x47, 0xfe, 0x36, 0xcc, 0x41, 0x5a, 0x33, 0x31, 0x5c,
	0x7e, 0x3a, 0xa0, 0xd8, 0xa5, 0xa1, 0x72, 0x4c, 0x9d, 0x1e, 0x75, 0x29, 0x0b, 0xd1, 0x55, 0x58,
	0x70, 0x9a, 0x8b, 0x60, 0x0d, 0x6c, 0xfd, 0x57, 0x2f, 0x38, 0x4d, 0xf3, 0x25, 0x5c, 0x49, 0x88,
	0x67, 0x81, 0xef, 0x31, 0x8a, 0x1e, 0xc2, 0x2b, 0xca, 0x87, 0x48, 0x7b, 0xa9, 0xba, 0x8e, 0x75,
	0x66, 0x61, 0x75, 0x0f, 0x55, 0x69, 0x1e, 0x08, 0x36, 0xdb, 0x75, 0xb5, 0x6c, 0x0f, 0x20, 0x1c,
	0x79, 0x26, 0xce, 0xd9, 0xc0, 0xdc, 0x60, 0x3c, 0x30, 0x18, 0xf3, 0x6a, 0x09, 0x83, 0xf1, 0x13,
	0xd2, 0xa2, 0x42, 0x5b, 0x97, 0x94, 0xe6, 0x0f, 0x20, 0x92, 0x9a, 0x3c, 0x28, 0x39, 0xa9, 0xe2,
	0xd9, 0x92, 0x42, 0xbb, 0x0a, 0x74, 0x21, 0x82, 0xde, 0xcc, 0x84, 0xe6, 0x1c, 0x0a, 0x75, 0x19,
	0x2e, 0x0e, 0x2b, 0x11, 0x37, 0x41, 0x52, 0xd5, 0xf6, 0xe0, 0x4d, 0x4d, 0xac, 0x48, 0xee, 0x1e,
	0xbc, 0x18, 0x2f, 0x0a, 0x17, 0x57, 0xf5, 0x89, 0x8d, 0xb4, 0x23, 0x85, 0xd9, 0x10, 0x1c, 0xb6,
	0xeb, 0x4e, 0x70, 0xcc, 0xaa, 0x42, 0x5f, 0x81, 0x48, 0x40, 0x3d, 0x44, 0x9f, 0x40, 0x71, 0xba,
	0x04, 0x66, 0x57, 0x11, 0xf9, 0x2e, 0xc9, 0xd7, 0x2f, 0xcf, 0x5d, 0x52, 0xe3, 0xa5, 0xb6, 0x93,
	0x3f, 0x64, 0xdc, 0x25, 0x65, 0x0f, 0x55, 0xa9, 0xdc, 0x25, 0x1d, 0xdb, 0xb9, 0xdc, 0xa5, 0xbc,
	0x49, 0x15, 0xcf, 0x96, 0xd4, 0xec, 0x2a, 0xb7, 0x01, 0x17, 0x86, 0x95, 0x48, 0xad, 0xd8, 0x23,
	0x78, 0x7d, 0x2c, 0x4e, 0x24, 0x55, 0x81, 0xf3, 0x72, 0x85, 0x96, 0xf4, 0xc9, 0x70, 0x0d, 0x8f,
	0x34, 0x5f, 0x88, 0x33, 0x6d, 0xd7, 0x3d, 0x97, 0x4a, 0x9c, 0x00, 0x01, 0x3b, 0x3a, 0x60, 0x12,
	0xb6, 0x98, 0x0f, 0x76, 0x66, 0x4e, 0x57, 0xdf, 0x43, 0x38, 0x1f, 0x51, 0xa1, 0xef, 0x60, 0x6c,
	0xa8, 0xa2, 0xaa, 0x1e, 0x24, 0xed, 0x7d, 0x2a, 0xd5, 0xa6, 0xd2, 0x70, 0x20, 0x73, 0xe7, 0xdd,
	0xaf, 0xbf, 0x27, 0x85, 0x32, 0xda, 0xb2, 0xb8, 0xd8, 0xe2, 0x62, 0x4b, 0xf7, 0xde, 0x5a, 0x6f,
	0x9c, 0xe6, 0x5b, 0xf4, 0x0d, 0xc0, 0x6b, 0xca, 0xb2, 0xed, 0xba, 0xa9, 0xbc, 0x09, 0x6f, 0x56,
	0x2a, 0x6f, 0xd2, 0xf3, 0x63, 0x6e, 0x47, 0xbc, 0x77, 0xd0, 0x7a, 0x0e, 0x5e, 0xf4, 0x05, 0x48,
	0xe3, 0x10, 0xe1, 0x74, 0x7f, 0xc6, 0x27, 0x76, 0xc9, 0xca, 0x1d, 0x2f, 0xd8, 0xee, 0x46, 0x6c,
	0x1b, 0xe8, 0xb6, 0x9e, 0x2d, 0x16, 0x70, 0x1f, 0x3f, 0x03, 0x78, 0x39, 0x5e, 0x1a, 0x78, 0x88,
	0xd3, 0xfd, 0x98, 0x8a, 0x4f, 0xf7, 0x38, 0x98, 0x9b, 0x11, 0xdf, 0x2d, 0xb4, 0x9a, 0xc1, 0xc7,
	0xfb, 0x51, 0x19, 0x2f, 0x59, 0xfd, 0xa8, 0x99, 0xa3, 0x99, 0xfd, 0xa8, 0x1b, 0x89, 0x99, 0xfd,
	0x28, 0x8b, 0xa4, 0x7e, 0x94, 0x97, 0xf3, 0xf4, 0xe3, 0xb4, 0xbc, 0x49, 0x23, 0x3c, 0xb3, 0x1f,
	0x15, 0x17, 0x3f, 0x02, 0x31, 0x6e, 0x50, 0x39, 0xdd, 0x1b, 0x85, 0x6b, 0x3b, 0x57, 0xac, 0xe0,
	0xd9, 0x8a, 0x78, 0x4c, 0xb4, 0xa6, 0xe7, 0x91, 0x7c, 0xfb, 0x00, 0xe0, 0x85, 0xd8, 0xaf, 0x72,
	0x7a, 0xee, 0xb9, 0x79, 0xc6, 0x07, 0xac, 0xb9, 0x1e, 0xf1, 0xac, 0xa0, 0xa5, 0x14, 0x9e, 0xfb,
	0xf6, 0xcf, 0x9e, 0x01, 0x4e, 0x7b, 0x06, 0xf8, 0xd3, 0x33, 0xc0, 0xa7, 0xbe, 0x31, 0x77, 0xda,
	0x37, 0xe6, 0x7e, 0xf7, 0x8d, 0xb9, 0xbd, 0xcd, 0x96, 0x13, 0x1e, 0x76, 0x1b, 0x78, 0xdf, 0x6f,
	0x8f, 0x6d, 0xf0, 0x7a, 0xb8, 0x45, 0x78, 0x1c, 0x50, 0xd6, 0xf8, 0x3f, 0xfa, 0x0f, 0x5f, 0xfb,
	0x17, 0x00, 0x00, 0xff, 0xff, 0x15, 0x45, 0xa0, 0x15, 0x9d, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// this line is used by starport scaffolding # 2
	TimedOutAsset(ctx context.Context, in *QueryGetTimedOutAssetRequest, opts ...grpc.CallOption) (*QueryGetTimedOutAssetResponse, error)
	TimedOutAssetAll(ctx context.Context, in *QueryAllTimedOutAssetRequest, opts ...grpc.CallOption) (*QueryAllTimedOutAssetResponse, error)
	SentAsset(ctx context.Context, in *QueryGetSentAssetRequest, opts ...grpc.CallOption) (*QueryGetSentAssetResponse, error)
	SentAssetAll(ctx context.Context, in *QueryAllSentAssetRequest, opts ...grpc.CallOption) (*QueryAllSentAssetResponse, error)
	TransferAsset(ctx context.Context, in *QueryGetTransferAssetRequest, opts ...grpc.CallOption) (*QueryGetTransferAssetResponse, error)
	TransferAssetAll(ctx context.Context, in *QueryAllTransferAssetRequest, opts ...grpc.CallOption) (*QueryAllTransferAssetResponse, error)
	Asset(ctx context.Context, in *QueryGetAssetRequest, opts ...grpc.CallOption) (*QueryGetAssetResponse, error)
	AssetAll(ctx context.Context, in *QueryAllAssetRequest, opts ...grpc.CallOption) (*QueryAllAssetResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) TimedOutAsset(ctx context.Context, in *QueryGetTimedOutAssetRequest, opts ...grpc.CallOption) (*QueryGetTimedOutAssetResponse, error) {
	out := new(QueryGetTimedOutAssetResponse)
	err := c.cc.Invoke(ctx, "/sap200.shiaa3.assets.Query/TimedOutAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimedOutAssetAll(ctx context.Context, in *QueryAllTimedOutAssetRequest, opts ...grpc.CallOption) (*QueryAllTimedOutAssetResponse, error) {
	out := new(QueryAllTimedOutAssetResponse)
	err := c.cc.Invoke(ctx, "/sap200.shiaa3.assets.Query/TimedOutAssetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SentAsset(ctx context.Context, in *QueryGetSentAssetRequest, opts ...grpc.CallOption) (*QueryGetSentAssetResponse, error) {
	out := new(QueryGetSentAssetResponse)
	err := c.cc.Invoke(ctx, "/sap200.shiaa3.assets.Query/SentAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SentAssetAll(ctx context.Context, in *QueryAllSentAssetRequest, opts ...grpc.CallOption) (*QueryAllSentAssetResponse, error) {
	out := new(QueryAllSentAssetResponse)
	err := c.cc.Invoke(ctx, "/sap200.shiaa3.assets.Query/SentAssetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TransferAsset(ctx context.Context, in *QueryGetTransferAssetRequest, opts ...grpc.CallOption) (*QueryGetTransferAssetResponse, error) {
	out := new(QueryGetTransferAssetResponse)
	err := c.cc.Invoke(ctx, "/sap200.shiaa3.assets.Query/TransferAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TransferAssetAll(ctx context.Context, in *QueryAllTransferAssetRequest, opts ...grpc.CallOption) (*QueryAllTransferAssetResponse, error) {
	out := new(QueryAllTransferAssetResponse)
	err := c.cc.Invoke(ctx, "/sap200.shiaa3.assets.Query/TransferAssetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Asset(ctx context.Context, in *QueryGetAssetRequest, opts ...grpc.CallOption) (*QueryGetAssetResponse, error) {
	out := new(QueryGetAssetResponse)
	err := c.cc.Invoke(ctx, "/sap200.shiaa3.assets.Query/Asset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AssetAll(ctx context.Context, in *QueryAllAssetRequest, opts ...grpc.CallOption) (*QueryAllAssetResponse, error) {
	out := new(QueryAllAssetResponse)
	err := c.cc.Invoke(ctx, "/sap200.shiaa3.assets.Query/AssetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// this line is used by starport scaffolding # 2
	TimedOutAsset(context.Context, *QueryGetTimedOutAssetRequest) (*QueryGetTimedOutAssetResponse, error)
	TimedOutAssetAll(context.Context, *QueryAllTimedOutAssetRequest) (*QueryAllTimedOutAssetResponse, error)
	SentAsset(context.Context, *QueryGetSentAssetRequest) (*QueryGetSentAssetResponse, error)
	SentAssetAll(context.Context, *QueryAllSentAssetRequest) (*QueryAllSentAssetResponse, error)
	TransferAsset(context.Context, *QueryGetTransferAssetRequest) (*QueryGetTransferAssetResponse, error)
	TransferAssetAll(context.Context, *QueryAllTransferAssetRequest) (*QueryAllTransferAssetResponse, error)
	Asset(context.Context, *QueryGetAssetRequest) (*QueryGetAssetResponse, error)
	AssetAll(context.Context, *QueryAllAssetRequest) (*QueryAllAssetResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) TimedOutAsset(ctx context.Context, req *QueryGetTimedOutAssetRequest) (*QueryGetTimedOutAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimedOutAsset not implemented")
}
func (*UnimplementedQueryServer) TimedOutAssetAll(ctx context.Context, req *QueryAllTimedOutAssetRequest) (*QueryAllTimedOutAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimedOutAssetAll not implemented")
}
func (*UnimplementedQueryServer) SentAsset(ctx context.Context, req *QueryGetSentAssetRequest) (*QueryGetSentAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SentAsset not implemented")
}
func (*UnimplementedQueryServer) SentAssetAll(ctx context.Context, req *QueryAllSentAssetRequest) (*QueryAllSentAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SentAssetAll not implemented")
}
func (*UnimplementedQueryServer) TransferAsset(ctx context.Context, req *QueryGetTransferAssetRequest) (*QueryGetTransferAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferAsset not implemented")
}
func (*UnimplementedQueryServer) TransferAssetAll(ctx context.Context, req *QueryAllTransferAssetRequest) (*QueryAllTransferAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferAssetAll not implemented")
}
func (*UnimplementedQueryServer) Asset(ctx context.Context, req *QueryGetAssetRequest) (*QueryGetAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Asset not implemented")
}
func (*UnimplementedQueryServer) AssetAll(ctx context.Context, req *QueryAllAssetRequest) (*QueryAllAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_TimedOutAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTimedOutAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimedOutAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sap200.shiaa3.assets.Query/TimedOutAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimedOutAsset(ctx, req.(*QueryGetTimedOutAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimedOutAssetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTimedOutAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimedOutAssetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sap200.shiaa3.assets.Query/TimedOutAssetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimedOutAssetAll(ctx, req.(*QueryAllTimedOutAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SentAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSentAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SentAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sap200.shiaa3.assets.Query/SentAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SentAsset(ctx, req.(*QueryGetSentAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SentAssetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSentAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SentAssetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sap200.shiaa3.assets.Query/SentAssetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SentAssetAll(ctx, req.(*QueryAllSentAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TransferAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTransferAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TransferAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sap200.shiaa3.assets.Query/TransferAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TransferAsset(ctx, req.(*QueryGetTransferAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TransferAssetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTransferAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TransferAssetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sap200.shiaa3.assets.Query/TransferAssetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TransferAssetAll(ctx, req.(*QueryAllTransferAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Asset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Asset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sap200.shiaa3.assets.Query/Asset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Asset(ctx, req.(*QueryGetAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AssetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AssetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sap200.shiaa3.assets.Query/AssetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AssetAll(ctx, req.(*QueryAllAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sap200.shiaa3.assets.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TimedOutAsset",
			Handler:    _Query_TimedOutAsset_Handler,
		},
		{
			MethodName: "TimedOutAssetAll",
			Handler:    _Query_TimedOutAssetAll_Handler,
		},
		{
			MethodName: "SentAsset",
			Handler:    _Query_SentAsset_Handler,
		},
		{
			MethodName: "SentAssetAll",
			Handler:    _Query_SentAssetAll_Handler,
		},
		{
			MethodName: "TransferAsset",
			Handler:    _Query_TransferAsset_Handler,
		},
		{
			MethodName: "TransferAssetAll",
			Handler:    _Query_TransferAssetAll_Handler,
		},
		{
			MethodName: "Asset",
			Handler:    _Query_Asset_Handler,
		},
		{
			MethodName: "AssetAll",
			Handler:    _Query_AssetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assets/query.proto",
}

func (m *QueryGetTimedOutAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTimedOutAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTimedOutAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTimedOutAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTimedOutAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTimedOutAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimedOutAsset != nil {
		{
			size, err := m.TimedOutAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTimedOutAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTimedOutAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTimedOutAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTimedOutAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTimedOutAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTimedOutAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TimedOutAsset) > 0 {
		for iNdEx := len(m.TimedOutAsset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimedOutAsset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSentAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSentAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSentAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSentAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSentAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSentAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SentAsset != nil {
		{
			size, err := m.SentAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSentAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSentAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSentAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSentAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSentAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSentAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SentAsset) > 0 {
		for iNdEx := len(m.SentAsset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SentAsset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTransferAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTransferAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTransferAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTransferAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTransferAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTransferAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransferAsset != nil {
		{
			size, err := m.TransferAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTransferAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTransferAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTransferAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTransferAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTransferAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTransferAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TransferAsset) > 0 {
		for iNdEx := len(m.TransferAsset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TransferAsset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Asset != nil {
		{
			size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Asset) > 0 {
		for iNdEx := len(m.Asset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Asset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetTimedOutAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetTimedOutAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimedOutAsset != nil {
		l = m.TimedOutAsset.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTimedOutAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTimedOutAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TimedOutAsset) > 0 {
		for _, e := range m.TimedOutAsset {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSentAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetSentAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SentAsset != nil {
		l = m.SentAsset.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSentAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSentAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SentAsset) > 0 {
		for _, e := range m.SentAsset {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTransferAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetTransferAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransferAsset != nil {
		l = m.TransferAsset.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTransferAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTransferAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TransferAsset) > 0 {
		for _, e := range m.TransferAsset {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asset != nil {
		l = m.Asset.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Asset) > 0 {
		for _, e := range m.Asset {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetTimedOutAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTimedOutAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTimedOutAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTimedOutAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTimedOutAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTimedOutAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedOutAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimedOutAsset == nil {
				m.TimedOutAsset = &TimedOutAsset{}
			}
			if err := m.TimedOutAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTimedOutAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTimedOutAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTimedOutAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTimedOutAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTimedOutAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTimedOutAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedOutAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimedOutAsset = append(m.TimedOutAsset, &TimedOutAsset{})
			if err := m.TimedOutAsset[len(m.TimedOutAsset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSentAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSentAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSentAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSentAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSentAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSentAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SentAsset == nil {
				m.SentAsset = &SentAsset{}
			}
			if err := m.SentAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSentAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSentAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSentAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSentAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSentAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSentAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SentAsset = append(m.SentAsset, &SentAsset{})
			if err := m.SentAsset[len(m.SentAsset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTransferAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTransferAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTransferAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTransferAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTransferAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTransferAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransferAsset == nil {
				m.TransferAsset = &TransferAsset{}
			}
			if err := m.TransferAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTransferAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTransferAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTransferAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTransferAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTransferAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTransferAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferAsset = append(m.TransferAsset, &TransferAsset{})
			if err := m.TransferAsset[len(m.TransferAsset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Asset == nil {
				m.Asset = &Asset{}
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = append(m.Asset, &Asset{})
			if err := m.Asset[len(m.Asset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
