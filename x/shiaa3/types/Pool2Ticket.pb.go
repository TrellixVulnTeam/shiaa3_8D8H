// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shiaa3/Pool2Ticket.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Pool2Ticket struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id            uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	AddressString string `protobuf:"bytes,3,opt,name=AddressString,proto3" json:"AddressString,omitempty"`
	LambdaValue   string `protobuf:"bytes,4,opt,name=LambdaValue,proto3" json:"LambdaValue,omitempty"`
}

func (m *Pool2Ticket) Reset()         { *m = Pool2Ticket{} }
func (m *Pool2Ticket) String() string { return proto.CompactTextString(m) }
func (*Pool2Ticket) ProtoMessage()    {}
func (*Pool2Ticket) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e59a729c9f977d4, []int{0}
}
func (m *Pool2Ticket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool2Ticket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool2Ticket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool2Ticket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool2Ticket.Merge(m, src)
}
func (m *Pool2Ticket) XXX_Size() int {
	return m.Size()
}
func (m *Pool2Ticket) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool2Ticket.DiscardUnknown(m)
}

var xxx_messageInfo_Pool2Ticket proto.InternalMessageInfo

func (m *Pool2Ticket) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Pool2Ticket) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Pool2Ticket) GetAddressString() string {
	if m != nil {
		return m.AddressString
	}
	return ""
}

func (m *Pool2Ticket) GetLambdaValue() string {
	if m != nil {
		return m.LambdaValue
	}
	return ""
}

func init() {
	proto.RegisterType((*Pool2Ticket)(nil), "sap200.shiaa3.shiaa3.Pool2Ticket")
}

func init() { proto.RegisterFile("shiaa3/Pool2Ticket.proto", fileDescriptor_8e59a729c9f977d4) }

var fileDescriptor_8e59a729c9f977d4 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x28, 0xce, 0xc8, 0x4c,
	0x4c, 0x34, 0xd6, 0x0f, 0xc8, 0xcf, 0xcf, 0x31, 0x0a, 0xc9, 0x4c, 0xce, 0x4e, 0x2d, 0xd1, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x29, 0x4e, 0x2c, 0x30, 0x32, 0x30, 0xd0, 0x83, 0x28, 0x80,
	0x52, 0x52, 0x22, 0xe9, 0xf9, 0xe9, 0xf9, 0x60, 0x05, 0xfa, 0x20, 0x16, 0x44, 0xad, 0x52, 0x3d,
	0x17, 0x37, 0x92, 0x01, 0x42, 0x12, 0x5c, 0xec, 0xc9, 0x45, 0xa9, 0x89, 0x25, 0xf9, 0x45, 0x12,
	0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30, 0xae, 0x10, 0x1f, 0x17, 0x53, 0x66, 0x8a, 0x04, 0x93,
	0x02, 0xa3, 0x06, 0x4b, 0x10, 0x53, 0x66, 0x8a, 0x90, 0x0a, 0x17, 0xaf, 0x63, 0x4a, 0x4a, 0x51,
	0x6a, 0x71, 0x71, 0x70, 0x49, 0x51, 0x66, 0x5e, 0xba, 0x04, 0x33, 0x58, 0x3d, 0xaa, 0xa0, 0x90,
	0x02, 0x17, 0xb7, 0x4f, 0x62, 0x6e, 0x52, 0x4a, 0x62, 0x58, 0x62, 0x4e, 0x69, 0xaa, 0x04, 0x0b,
	0x58, 0x0d, 0xb2, 0x90, 0x93, 0xe3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78,
	0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44,
	0xa9, 0xa7, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x43, 0x7c, 0xa4, 0x0f,
	0xf5, 0x72, 0x05, 0x8c, 0x51, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0xf6, 0x8a, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0xe8, 0x51, 0x54, 0xdf, 0x12, 0x01, 0x00, 0x00,
}

func (m *Pool2Ticket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool2Ticket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool2Ticket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LambdaValue) > 0 {
		i -= len(m.LambdaValue)
		copy(dAtA[i:], m.LambdaValue)
		i = encodeVarintPool2Ticket(dAtA, i, uint64(len(m.LambdaValue)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AddressString) > 0 {
		i -= len(m.AddressString)
		copy(dAtA[i:], m.AddressString)
		i = encodeVarintPool2Ticket(dAtA, i, uint64(len(m.AddressString)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintPool2Ticket(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPool2Ticket(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPool2Ticket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPool2Ticket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pool2Ticket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPool2Ticket(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovPool2Ticket(uint64(m.Id))
	}
	l = len(m.AddressString)
	if l > 0 {
		n += 1 + l + sovPool2Ticket(uint64(l))
	}
	l = len(m.LambdaValue)
	if l > 0 {
		n += 1 + l + sovPool2Ticket(uint64(l))
	}
	return n
}

func sovPool2Ticket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPool2Ticket(x uint64) (n int) {
	return sovPool2Ticket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pool2Ticket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool2Ticket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool2Ticket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool2Ticket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool2Ticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool2Ticket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool2Ticket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool2Ticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool2Ticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool2Ticket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool2Ticket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LambdaValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool2Ticket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool2Ticket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool2Ticket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LambdaValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool2Ticket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool2Ticket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPool2Ticket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPool2Ticket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool2Ticket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool2Ticket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPool2Ticket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPool2Ticket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPool2Ticket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPool2Ticket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPool2Ticket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPool2Ticket = fmt.Errorf("proto: unexpected end of group")
)
