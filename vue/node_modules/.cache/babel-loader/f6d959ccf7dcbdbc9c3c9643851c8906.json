{"remainingRequest":"/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/babel-loader/lib/index.js!/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/eslint-loader/index.js??ref--13-0!/home/saptarsi/go/src/hackathon/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.evidence.v1beta1/index.js","dependencies":[{"path":"/home/saptarsi/go/src/hackathon/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.evidence.v1beta1/index.js","mtime":1616422838940},{"path":"/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/saptarsi/go/src/hackathon/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.evidence.v1beta1/index.js"],"names":["txClient","queryClient","SpVuexError","Equivocation","initTxClient","vuexGetters","addr","initQueryClient","getStructure","template","structure","fields","Object","entries","key","value","field","name","type","push","getDefaultState","Evidence","AllEvidence","_Structure","fromPartial","_Subscriptions","Set","state","namespaced","mutations","RESET_STATE","assign","QUERY","query","JSON","stringify","SUBSCRIBE","subscription","add","UNSUBSCRIBE","delete","getters","getEvidence","params","getAllEvidence","getTypeStructure","actions","init","dispatch","rootGetters","console","log","on","resetState","commit","unsubscribe","StoreUpdate","forEach","action","payload","QueryEvidence","options","subscribe","all","queryEvidence","evidence_hash","data","error","QueryAllEvidence","queryAllEvidence","pagination","nextKey","next_values","keys","prop","Array","isArray","sendMsgSubmitEvidence","fee","memo","msgSubmitEvidence","msg","signAndBroadcast","amount","gas","result","toString","MsgSubmitEvidence"],"mappings":"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","sourcesContent":["import { txClient, queryClient } from './module';\n// @ts-ignore\nimport { SpVuexError } from '@starport/vuex';\nimport { Equivocation } from \"./module/types/cosmos/evidence/v1beta1/evidence\";\nasync function initTxClient(vuexGetters) {\n    return await txClient(vuexGetters['common/wallet/signer'], {\n        addr: vuexGetters['common/env/apiTendermint']\n    });\n}\nasync function initQueryClient(vuexGetters) {\n    return await queryClient({\n        addr: vuexGetters['common/env/apiCosmos']\n    });\n}\nfunction getStructure(template) {\n    let structure = { fields: [] };\n    for (const [key, value] of Object.entries(template)) {\n        let field = {};\n        field.name = key;\n        field.type = typeof value;\n        structure.fields.push(field);\n    }\n    return structure;\n}\nconst getDefaultState = () => {\n    return {\n        Evidence: {},\n        AllEvidence: {},\n        _Structure: {\n            Equivocation: getStructure(Equivocation.fromPartial({})),\n        },\n        _Subscriptions: new Set(),\n    };\n};\n// initial state\nconst state = getDefaultState();\nexport default {\n    namespaced: true,\n    state,\n    mutations: {\n        RESET_STATE(state) {\n            Object.assign(state, getDefaultState());\n        },\n        QUERY(state, { query, key, value }) {\n            state[query][JSON.stringify(key)] = value;\n        },\n        SUBSCRIBE(state, subscription) {\n            state._Subscriptions.add(subscription);\n        },\n        UNSUBSCRIBE(state, subscription) {\n            state._Subscriptions.delete(subscription);\n        }\n    },\n    getters: {\n        getEvidence: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Evidence[JSON.stringify(params)] ?? {};\n        },\n        getAllEvidence: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.AllEvidence[JSON.stringify(params)] ?? {};\n        },\n        getTypeStructure: (state) => (type) => {\n            return state._Structure[type].fields;\n        }\n    },\n    actions: {\n        init({ dispatch, rootGetters }) {\n            console.log('init');\n            if (rootGetters['common/env/client']) {\n                rootGetters['common/env/client'].on('newblock', () => {\n                    dispatch('StoreUpdate');\n                });\n            }\n        },\n        resetState({ commit }) {\n            commit('RESET_STATE');\n        },\n        unsubscribe({ commit }, subscription) {\n            commit('UNSUBSCRIBE', subscription);\n        },\n        async StoreUpdate({ state, dispatch }) {\n            state._Subscriptions.forEach((subscription) => {\n                dispatch(subscription.action, subscription.payload);\n            });\n        },\n        async QueryEvidence({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryEvidence(key.evidence_hash, query)).data : (await (await initQueryClient(rootGetters)).queryEvidence(key.evidence_hash)).data;\n                commit('QUERY', { query: 'Evidence', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryEvidence', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getEvidence']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryEvidence', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryAllEvidence({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryAllEvidence(query)).data : (await (await initQueryClient(rootGetters)).queryAllEvidence()).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryAllEvidence({ ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'AllEvidence', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryAllEvidence', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getAllEvidence']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryAllEvidence', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async sendMsgSubmitEvidence({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgSubmitEvidence(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgSubmitEvidence:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgSubmitEvidence:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async MsgSubmitEvidence({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgSubmitEvidence(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgSubmitEvidence:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgSubmitEvidence:Create', 'Could not create message.');\n                }\n            }\n        },\n    }\n};\n"]}]}