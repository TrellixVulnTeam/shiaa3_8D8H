{"remainingRequest":"/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/babel-loader/lib/index.js!/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/eslint-loader/index.js??ref--13-0!/home/saptarsi/go/src/hackathon/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.base.abci.v1beta1/module/types/tendermint/abci/types.js","dependencies":[{"path":"/home/saptarsi/go/src/hackathon/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.base.abci.v1beta1/module/types/tendermint/abci/types.js","mtime":1616424851800},{"path":"/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/saptarsi/go/src/hackathon/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.base.abci.v1beta1/module/types/tendermint/abci/types.js"],"names":["Reader","util","configure","Writer","Timestamp","Long","Header","ProofOps","EvidenceParams","ValidatorParams","VersionParams","PublicKey","protobufPackage","CheckTxType","checkTxTypeFromJSON","object","NEW","RECHECK","UNRECOGNIZED","checkTxTypeToJSON","EvidenceType","evidenceTypeFromJSON","UNKNOWN","DUPLICATE_VOTE","LIGHT_CLIENT_ATTACK","evidenceTypeToJSON","ResponseOfferSnapshot_Result","responseOfferSnapshot_ResultFromJSON","ACCEPT","ABORT","REJECT","REJECT_FORMAT","REJECT_SENDER","responseOfferSnapshot_ResultToJSON","ResponseApplySnapshotChunk_Result","responseApplySnapshotChunk_ResultFromJSON","RETRY","RETRY_SNAPSHOT","REJECT_SNAPSHOT","responseApplySnapshotChunk_ResultToJSON","baseRequest","Request","encode","message","writer","create","echo","undefined","RequestEcho","uint32","fork","ldelim","flush","RequestFlush","info","RequestInfo","setOption","RequestSetOption","initChain","RequestInitChain","query","RequestQuery","beginBlock","RequestBeginBlock","checkTx","RequestCheckTx","deliverTx","RequestDeliverTx","endBlock","RequestEndBlock","commit","RequestCommit","listSnapshots","RequestListSnapshots","offerSnapshot","RequestOfferSnapshot","loadSnapshotChunk","RequestLoadSnapshotChunk","applySnapshotChunk","RequestApplySnapshotChunk","decode","input","length","reader","Uint8Array","end","len","pos","tag","skipType","fromJSON","toJSON","obj","fromPartial","baseRequestEcho","string","String","baseRequestFlush","_","baseRequestInfo","version","blockVersion","p2pVersion","uint64","longToNumber","Number","baseRequestSetOption","key","value","baseRequestInitChain","chainId","initialHeight","time","toTimestamp","consensusParams","ConsensusParams","validators","v","ValidatorUpdate","appStateBytes","bytes","int64","fromTimestamp","push","fromJsonTimestamp","e","bytesFromBase64","toISOString","map","base64FromBytes","baseRequestQuery","path","height","prove","data","bool","Boolean","baseRequestBeginBlock","hash","header","lastCommitInfo","LastCommitInfo","byzantineValidators","Evidence","baseRequestCheckTx","type","tx","int32","baseRequestDeliverTx","baseRequestEndBlock","baseRequestCommit","baseRequestListSnapshots","baseRequestOfferSnapshot","snapshot","Snapshot","appHash","baseRequestLoadSnapshotChunk","format","chunk","baseRequestApplySnapshotChunk","index","sender","baseResponse","Response","exception","ResponseException","ResponseEcho","ResponseFlush","ResponseInfo","ResponseSetOption","ResponseInitChain","ResponseQuery","ResponseBeginBlock","ResponseCheckTx","ResponseDeliverTx","ResponseEndBlock","ResponseCommit","ResponseListSnapshots","ResponseOfferSnapshot","ResponseLoadSnapshotChunk","ResponseApplySnapshotChunk","baseResponseException","error","baseResponseEcho","baseResponseFlush","baseResponseInfo","appVersion","lastBlockHeight","lastBlockAppHash","baseResponseSetOption","code","log","baseResponseInitChain","baseResponseQuery","codespace","proofOps","baseResponseBeginBlock","events","Event","baseResponseCheckTx","gasWanted","gasUsed","baseResponseDeliverTx","baseResponseEndBlock","validatorUpdates","consensusParamUpdates","baseResponseCommit","retainHeight","baseResponseListSnapshots","snapshots","baseResponseOfferSnapshot","result","baseResponseLoadSnapshotChunk","baseResponseApplySnapshotChunk","refetchChunks","rejectSenders","end2","baseConsensusParams","block","BlockParams","evidence","validator","baseBlockParams","maxBytes","maxGas","baseLastCommitInfo","round","votes","VoteInfo","baseEvent","attributes","EventAttribute","baseEventAttribute","baseTxResult","TxResult","baseValidator","power","Validator","address","baseValidatorUpdate","pubKey","baseVoteInfo","signedLastBlock","baseEvidence","totalVotingPower","baseSnapshot","chunks","metadata","ABCIApplicationClientImpl","rpc","request","finish","promise","then","globalThis","self","window","global","atob","b64","Buffer","from","toString","bin","arr","i","charCodeAt","btoa","byteLength","fromCharCode","join","date","seconds","getTime","nanos","t","millis","Date","o","long","gt","MAX_SAFE_INTEGER","Error","toNumber"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport { Reader, util, configure, Writer } from \"protobufjs/minimal\";\nimport { Timestamp } from \"../../google/protobuf/timestamp\";\nimport * as Long from \"long\";\nimport { Header } from \"../../tendermint/types/types\";\nimport { ProofOps } from \"../../tendermint/crypto/proof\";\nimport { EvidenceParams, ValidatorParams, VersionParams, } from \"../../tendermint/types/params\";\nimport { PublicKey } from \"../../tendermint/crypto/keys\";\nexport const protobufPackage = \"tendermint.abci\";\nexport var CheckTxType;\n(function (CheckTxType) {\n    CheckTxType[CheckTxType[\"NEW\"] = 0] = \"NEW\";\n    CheckTxType[CheckTxType[\"RECHECK\"] = 1] = \"RECHECK\";\n    CheckTxType[CheckTxType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(CheckTxType || (CheckTxType = {}));\nexport function checkTxTypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"NEW\":\n            return CheckTxType.NEW;\n        case 1:\n        case \"RECHECK\":\n            return CheckTxType.RECHECK;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return CheckTxType.UNRECOGNIZED;\n    }\n}\nexport function checkTxTypeToJSON(object) {\n    switch (object) {\n        case CheckTxType.NEW:\n            return \"NEW\";\n        case CheckTxType.RECHECK:\n            return \"RECHECK\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nexport var EvidenceType;\n(function (EvidenceType) {\n    EvidenceType[EvidenceType[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    EvidenceType[EvidenceType[\"DUPLICATE_VOTE\"] = 1] = \"DUPLICATE_VOTE\";\n    EvidenceType[EvidenceType[\"LIGHT_CLIENT_ATTACK\"] = 2] = \"LIGHT_CLIENT_ATTACK\";\n    EvidenceType[EvidenceType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(EvidenceType || (EvidenceType = {}));\nexport function evidenceTypeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"UNKNOWN\":\n            return EvidenceType.UNKNOWN;\n        case 1:\n        case \"DUPLICATE_VOTE\":\n            return EvidenceType.DUPLICATE_VOTE;\n        case 2:\n        case \"LIGHT_CLIENT_ATTACK\":\n            return EvidenceType.LIGHT_CLIENT_ATTACK;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return EvidenceType.UNRECOGNIZED;\n    }\n}\nexport function evidenceTypeToJSON(object) {\n    switch (object) {\n        case EvidenceType.UNKNOWN:\n            return \"UNKNOWN\";\n        case EvidenceType.DUPLICATE_VOTE:\n            return \"DUPLICATE_VOTE\";\n        case EvidenceType.LIGHT_CLIENT_ATTACK:\n            return \"LIGHT_CLIENT_ATTACK\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nexport var ResponseOfferSnapshot_Result;\n(function (ResponseOfferSnapshot_Result) {\n    /** UNKNOWN - Unknown result, abort all snapshot restoration */\n    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    /** ACCEPT - Snapshot accepted, apply chunks */\n    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result[\"ACCEPT\"] = 1] = \"ACCEPT\";\n    /** ABORT - Abort all snapshot restoration */\n    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result[\"ABORT\"] = 2] = \"ABORT\";\n    /** REJECT - Reject this specific snapshot, try others */\n    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result[\"REJECT\"] = 3] = \"REJECT\";\n    /** REJECT_FORMAT - Reject all snapshots of this format, try others */\n    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result[\"REJECT_FORMAT\"] = 4] = \"REJECT_FORMAT\";\n    /** REJECT_SENDER - Reject all snapshots from the sender(s), try others */\n    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result[\"REJECT_SENDER\"] = 5] = \"REJECT_SENDER\";\n    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ResponseOfferSnapshot_Result || (ResponseOfferSnapshot_Result = {}));\nexport function responseOfferSnapshot_ResultFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"UNKNOWN\":\n            return ResponseOfferSnapshot_Result.UNKNOWN;\n        case 1:\n        case \"ACCEPT\":\n            return ResponseOfferSnapshot_Result.ACCEPT;\n        case 2:\n        case \"ABORT\":\n            return ResponseOfferSnapshot_Result.ABORT;\n        case 3:\n        case \"REJECT\":\n            return ResponseOfferSnapshot_Result.REJECT;\n        case 4:\n        case \"REJECT_FORMAT\":\n            return ResponseOfferSnapshot_Result.REJECT_FORMAT;\n        case 5:\n        case \"REJECT_SENDER\":\n            return ResponseOfferSnapshot_Result.REJECT_SENDER;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ResponseOfferSnapshot_Result.UNRECOGNIZED;\n    }\n}\nexport function responseOfferSnapshot_ResultToJSON(object) {\n    switch (object) {\n        case ResponseOfferSnapshot_Result.UNKNOWN:\n            return \"UNKNOWN\";\n        case ResponseOfferSnapshot_Result.ACCEPT:\n            return \"ACCEPT\";\n        case ResponseOfferSnapshot_Result.ABORT:\n            return \"ABORT\";\n        case ResponseOfferSnapshot_Result.REJECT:\n            return \"REJECT\";\n        case ResponseOfferSnapshot_Result.REJECT_FORMAT:\n            return \"REJECT_FORMAT\";\n        case ResponseOfferSnapshot_Result.REJECT_SENDER:\n            return \"REJECT_SENDER\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nexport var ResponseApplySnapshotChunk_Result;\n(function (ResponseApplySnapshotChunk_Result) {\n    /** UNKNOWN - Unknown result, abort all snapshot restoration */\n    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    /** ACCEPT - Chunk successfully accepted */\n    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result[\"ACCEPT\"] = 1] = \"ACCEPT\";\n    /** ABORT - Abort all snapshot restoration */\n    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result[\"ABORT\"] = 2] = \"ABORT\";\n    /** RETRY - Retry chunk (combine with refetch and reject) */\n    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result[\"RETRY\"] = 3] = \"RETRY\";\n    /** RETRY_SNAPSHOT - Retry snapshot (combine with refetch and reject) */\n    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result[\"RETRY_SNAPSHOT\"] = 4] = \"RETRY_SNAPSHOT\";\n    /** REJECT_SNAPSHOT - Reject this snapshot, try others */\n    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result[\"REJECT_SNAPSHOT\"] = 5] = \"REJECT_SNAPSHOT\";\n    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ResponseApplySnapshotChunk_Result || (ResponseApplySnapshotChunk_Result = {}));\nexport function responseApplySnapshotChunk_ResultFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"UNKNOWN\":\n            return ResponseApplySnapshotChunk_Result.UNKNOWN;\n        case 1:\n        case \"ACCEPT\":\n            return ResponseApplySnapshotChunk_Result.ACCEPT;\n        case 2:\n        case \"ABORT\":\n            return ResponseApplySnapshotChunk_Result.ABORT;\n        case 3:\n        case \"RETRY\":\n            return ResponseApplySnapshotChunk_Result.RETRY;\n        case 4:\n        case \"RETRY_SNAPSHOT\":\n            return ResponseApplySnapshotChunk_Result.RETRY_SNAPSHOT;\n        case 5:\n        case \"REJECT_SNAPSHOT\":\n            return ResponseApplySnapshotChunk_Result.REJECT_SNAPSHOT;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ResponseApplySnapshotChunk_Result.UNRECOGNIZED;\n    }\n}\nexport function responseApplySnapshotChunk_ResultToJSON(object) {\n    switch (object) {\n        case ResponseApplySnapshotChunk_Result.UNKNOWN:\n            return \"UNKNOWN\";\n        case ResponseApplySnapshotChunk_Result.ACCEPT:\n            return \"ACCEPT\";\n        case ResponseApplySnapshotChunk_Result.ABORT:\n            return \"ABORT\";\n        case ResponseApplySnapshotChunk_Result.RETRY:\n            return \"RETRY\";\n        case ResponseApplySnapshotChunk_Result.RETRY_SNAPSHOT:\n            return \"RETRY_SNAPSHOT\";\n        case ResponseApplySnapshotChunk_Result.REJECT_SNAPSHOT:\n            return \"REJECT_SNAPSHOT\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nconst baseRequest = {};\nexport const Request = {\n    encode(message, writer = Writer.create()) {\n        if (message.echo !== undefined) {\n            RequestEcho.encode(message.echo, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.flush !== undefined) {\n            RequestFlush.encode(message.flush, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.info !== undefined) {\n            RequestInfo.encode(message.info, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.setOption !== undefined) {\n            RequestSetOption.encode(message.setOption, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.initChain !== undefined) {\n            RequestInitChain.encode(message.initChain, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.query !== undefined) {\n            RequestQuery.encode(message.query, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.beginBlock !== undefined) {\n            RequestBeginBlock.encode(message.beginBlock, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.checkTx !== undefined) {\n            RequestCheckTx.encode(message.checkTx, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.deliverTx !== undefined) {\n            RequestDeliverTx.encode(message.deliverTx, writer.uint32(74).fork()).ldelim();\n        }\n        if (message.endBlock !== undefined) {\n            RequestEndBlock.encode(message.endBlock, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.commit !== undefined) {\n            RequestCommit.encode(message.commit, writer.uint32(90).fork()).ldelim();\n        }\n        if (message.listSnapshots !== undefined) {\n            RequestListSnapshots.encode(message.listSnapshots, writer.uint32(98).fork()).ldelim();\n        }\n        if (message.offerSnapshot !== undefined) {\n            RequestOfferSnapshot.encode(message.offerSnapshot, writer.uint32(106).fork()).ldelim();\n        }\n        if (message.loadSnapshotChunk !== undefined) {\n            RequestLoadSnapshotChunk.encode(message.loadSnapshotChunk, writer.uint32(114).fork()).ldelim();\n        }\n        if (message.applySnapshotChunk !== undefined) {\n            RequestApplySnapshotChunk.encode(message.applySnapshotChunk, writer.uint32(122).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseRequest };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.echo = RequestEcho.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.flush = RequestFlush.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.info = RequestInfo.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.setOption = RequestSetOption.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.initChain = RequestInitChain.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.query = RequestQuery.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.beginBlock = RequestBeginBlock.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.checkTx = RequestCheckTx.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.deliverTx = RequestDeliverTx.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.endBlock = RequestEndBlock.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.commit = RequestCommit.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.listSnapshots = RequestListSnapshots.decode(reader, reader.uint32());\n                    break;\n                case 13:\n                    message.offerSnapshot = RequestOfferSnapshot.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    message.loadSnapshotChunk = RequestLoadSnapshotChunk.decode(reader, reader.uint32());\n                    break;\n                case 15:\n                    message.applySnapshotChunk = RequestApplySnapshotChunk.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseRequest };\n        if (object.echo !== undefined && object.echo !== null) {\n            message.echo = RequestEcho.fromJSON(object.echo);\n        }\n        else {\n            message.echo = undefined;\n        }\n        if (object.flush !== undefined && object.flush !== null) {\n            message.flush = RequestFlush.fromJSON(object.flush);\n        }\n        else {\n            message.flush = undefined;\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = RequestInfo.fromJSON(object.info);\n        }\n        else {\n            message.info = undefined;\n        }\n        if (object.setOption !== undefined && object.setOption !== null) {\n            message.setOption = RequestSetOption.fromJSON(object.setOption);\n        }\n        else {\n            message.setOption = undefined;\n        }\n        if (object.initChain !== undefined && object.initChain !== null) {\n            message.initChain = RequestInitChain.fromJSON(object.initChain);\n        }\n        else {\n            message.initChain = undefined;\n        }\n        if (object.query !== undefined && object.query !== null) {\n            message.query = RequestQuery.fromJSON(object.query);\n        }\n        else {\n            message.query = undefined;\n        }\n        if (object.beginBlock !== undefined && object.beginBlock !== null) {\n            message.beginBlock = RequestBeginBlock.fromJSON(object.beginBlock);\n        }\n        else {\n            message.beginBlock = undefined;\n        }\n        if (object.checkTx !== undefined && object.checkTx !== null) {\n            message.checkTx = RequestCheckTx.fromJSON(object.checkTx);\n        }\n        else {\n            message.checkTx = undefined;\n        }\n        if (object.deliverTx !== undefined && object.deliverTx !== null) {\n            message.deliverTx = RequestDeliverTx.fromJSON(object.deliverTx);\n        }\n        else {\n            message.deliverTx = undefined;\n        }\n        if (object.endBlock !== undefined && object.endBlock !== null) {\n            message.endBlock = RequestEndBlock.fromJSON(object.endBlock);\n        }\n        else {\n            message.endBlock = undefined;\n        }\n        if (object.commit !== undefined && object.commit !== null) {\n            message.commit = RequestCommit.fromJSON(object.commit);\n        }\n        else {\n            message.commit = undefined;\n        }\n        if (object.listSnapshots !== undefined && object.listSnapshots !== null) {\n            message.listSnapshots = RequestListSnapshots.fromJSON(object.listSnapshots);\n        }\n        else {\n            message.listSnapshots = undefined;\n        }\n        if (object.offerSnapshot !== undefined && object.offerSnapshot !== null) {\n            message.offerSnapshot = RequestOfferSnapshot.fromJSON(object.offerSnapshot);\n        }\n        else {\n            message.offerSnapshot = undefined;\n        }\n        if (object.loadSnapshotChunk !== undefined &&\n            object.loadSnapshotChunk !== null) {\n            message.loadSnapshotChunk = RequestLoadSnapshotChunk.fromJSON(object.loadSnapshotChunk);\n        }\n        else {\n            message.loadSnapshotChunk = undefined;\n        }\n        if (object.applySnapshotChunk !== undefined &&\n            object.applySnapshotChunk !== null) {\n            message.applySnapshotChunk = RequestApplySnapshotChunk.fromJSON(object.applySnapshotChunk);\n        }\n        else {\n            message.applySnapshotChunk = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.echo !== undefined &&\n            (obj.echo = message.echo ? RequestEcho.toJSON(message.echo) : undefined);\n        message.flush !== undefined &&\n            (obj.flush = message.flush\n                ? RequestFlush.toJSON(message.flush)\n                : undefined);\n        message.info !== undefined &&\n            (obj.info = message.info ? RequestInfo.toJSON(message.info) : undefined);\n        message.setOption !== undefined &&\n            (obj.setOption = message.setOption\n                ? RequestSetOption.toJSON(message.setOption)\n                : undefined);\n        message.initChain !== undefined &&\n            (obj.initChain = message.initChain\n                ? RequestInitChain.toJSON(message.initChain)\n                : undefined);\n        message.query !== undefined &&\n            (obj.query = message.query\n                ? RequestQuery.toJSON(message.query)\n                : undefined);\n        message.beginBlock !== undefined &&\n            (obj.beginBlock = message.beginBlock\n                ? RequestBeginBlock.toJSON(message.beginBlock)\n                : undefined);\n        message.checkTx !== undefined &&\n            (obj.checkTx = message.checkTx\n                ? RequestCheckTx.toJSON(message.checkTx)\n                : undefined);\n        message.deliverTx !== undefined &&\n            (obj.deliverTx = message.deliverTx\n                ? RequestDeliverTx.toJSON(message.deliverTx)\n                : undefined);\n        message.endBlock !== undefined &&\n            (obj.endBlock = message.endBlock\n                ? RequestEndBlock.toJSON(message.endBlock)\n                : undefined);\n        message.commit !== undefined &&\n            (obj.commit = message.commit\n                ? RequestCommit.toJSON(message.commit)\n                : undefined);\n        message.listSnapshots !== undefined &&\n            (obj.listSnapshots = message.listSnapshots\n                ? RequestListSnapshots.toJSON(message.listSnapshots)\n                : undefined);\n        message.offerSnapshot !== undefined &&\n            (obj.offerSnapshot = message.offerSnapshot\n                ? RequestOfferSnapshot.toJSON(message.offerSnapshot)\n                : undefined);\n        message.loadSnapshotChunk !== undefined &&\n            (obj.loadSnapshotChunk = message.loadSnapshotChunk\n                ? RequestLoadSnapshotChunk.toJSON(message.loadSnapshotChunk)\n                : undefined);\n        message.applySnapshotChunk !== undefined &&\n            (obj.applySnapshotChunk = message.applySnapshotChunk\n                ? RequestApplySnapshotChunk.toJSON(message.applySnapshotChunk)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseRequest };\n        if (object.echo !== undefined && object.echo !== null) {\n            message.echo = RequestEcho.fromPartial(object.echo);\n        }\n        else {\n            message.echo = undefined;\n        }\n        if (object.flush !== undefined && object.flush !== null) {\n            message.flush = RequestFlush.fromPartial(object.flush);\n        }\n        else {\n            message.flush = undefined;\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = RequestInfo.fromPartial(object.info);\n        }\n        else {\n            message.info = undefined;\n        }\n        if (object.setOption !== undefined && object.setOption !== null) {\n            message.setOption = RequestSetOption.fromPartial(object.setOption);\n        }\n        else {\n            message.setOption = undefined;\n        }\n        if (object.initChain !== undefined && object.initChain !== null) {\n            message.initChain = RequestInitChain.fromPartial(object.initChain);\n        }\n        else {\n            message.initChain = undefined;\n        }\n        if (object.query !== undefined && object.query !== null) {\n            message.query = RequestQuery.fromPartial(object.query);\n        }\n        else {\n            message.query = undefined;\n        }\n        if (object.beginBlock !== undefined && object.beginBlock !== null) {\n            message.beginBlock = RequestBeginBlock.fromPartial(object.beginBlock);\n        }\n        else {\n            message.beginBlock = undefined;\n        }\n        if (object.checkTx !== undefined && object.checkTx !== null) {\n            message.checkTx = RequestCheckTx.fromPartial(object.checkTx);\n        }\n        else {\n            message.checkTx = undefined;\n        }\n        if (object.deliverTx !== undefined && object.deliverTx !== null) {\n            message.deliverTx = RequestDeliverTx.fromPartial(object.deliverTx);\n        }\n        else {\n            message.deliverTx = undefined;\n        }\n        if (object.endBlock !== undefined && object.endBlock !== null) {\n            message.endBlock = RequestEndBlock.fromPartial(object.endBlock);\n        }\n        else {\n            message.endBlock = undefined;\n        }\n        if (object.commit !== undefined && object.commit !== null) {\n            message.commit = RequestCommit.fromPartial(object.commit);\n        }\n        else {\n            message.commit = undefined;\n        }\n        if (object.listSnapshots !== undefined && object.listSnapshots !== null) {\n            message.listSnapshots = RequestListSnapshots.fromPartial(object.listSnapshots);\n        }\n        else {\n            message.listSnapshots = undefined;\n        }\n        if (object.offerSnapshot !== undefined && object.offerSnapshot !== null) {\n            message.offerSnapshot = RequestOfferSnapshot.fromPartial(object.offerSnapshot);\n        }\n        else {\n            message.offerSnapshot = undefined;\n        }\n        if (object.loadSnapshotChunk !== undefined &&\n            object.loadSnapshotChunk !== null) {\n            message.loadSnapshotChunk = RequestLoadSnapshotChunk.fromPartial(object.loadSnapshotChunk);\n        }\n        else {\n            message.loadSnapshotChunk = undefined;\n        }\n        if (object.applySnapshotChunk !== undefined &&\n            object.applySnapshotChunk !== null) {\n            message.applySnapshotChunk = RequestApplySnapshotChunk.fromPartial(object.applySnapshotChunk);\n        }\n        else {\n            message.applySnapshotChunk = undefined;\n        }\n        return message;\n    },\n};\nconst baseRequestEcho = { message: \"\" };\nexport const RequestEcho = {\n    encode(message, writer = Writer.create()) {\n        if (message.message !== \"\") {\n            writer.uint32(10).string(message.message);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseRequestEcho };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.message = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseRequestEcho };\n        if (object.message !== undefined && object.message !== null) {\n            message.message = String(object.message);\n        }\n        else {\n            message.message = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.message !== undefined && (obj.message = message.message);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseRequestEcho };\n        if (object.message !== undefined && object.message !== null) {\n            message.message = object.message;\n        }\n        else {\n            message.message = \"\";\n        }\n        return message;\n    },\n};\nconst baseRequestFlush = {};\nexport const RequestFlush = {\n    encode(_, writer = Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseRequestFlush };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = { ...baseRequestFlush };\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = { ...baseRequestFlush };\n        return message;\n    },\n};\nconst baseRequestInfo = { version: \"\", blockVersion: 0, p2pVersion: 0 };\nexport const RequestInfo = {\n    encode(message, writer = Writer.create()) {\n        if (message.version !== \"\") {\n            writer.uint32(10).string(message.version);\n        }\n        if (message.blockVersion !== 0) {\n            writer.uint32(16).uint64(message.blockVersion);\n        }\n        if (message.p2pVersion !== 0) {\n            writer.uint32(24).uint64(message.p2pVersion);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseRequestInfo };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.version = reader.string();\n                    break;\n                case 2:\n                    message.blockVersion = longToNumber(reader.uint64());\n                    break;\n                case 3:\n                    message.p2pVersion = longToNumber(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseRequestInfo };\n        if (object.version !== undefined && object.version !== null) {\n            message.version = String(object.version);\n        }\n        else {\n            message.version = \"\";\n        }\n        if (object.blockVersion !== undefined && object.blockVersion !== null) {\n            message.blockVersion = Number(object.blockVersion);\n        }\n        else {\n            message.blockVersion = 0;\n        }\n        if (object.p2pVersion !== undefined && object.p2pVersion !== null) {\n            message.p2pVersion = Number(object.p2pVersion);\n        }\n        else {\n            message.p2pVersion = 0;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.version !== undefined && (obj.version = message.version);\n        message.blockVersion !== undefined &&\n            (obj.blockVersion = message.blockVersion);\n        message.p2pVersion !== undefined && (obj.p2pVersion = message.p2pVersion);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseRequestInfo };\n        if (object.version !== undefined && object.version !== null) {\n            message.version = object.version;\n        }\n        else {\n            message.version = \"\";\n        }\n        if (object.blockVersion !== undefined && object.blockVersion !== null) {\n            message.blockVersion = object.blockVersion;\n        }\n        else {\n            message.blockVersion = 0;\n        }\n        if (object.p2pVersion !== undefined && object.p2pVersion !== null) {\n            message.p2pVersion = object.p2pVersion;\n        }\n        else {\n            message.p2pVersion = 0;\n        }\n        return message;\n    },\n};\nconst baseRequestSetOption = { key: \"\", value: \"\" };\nexport const RequestSetOption = {\n    encode(message, writer = Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== \"\") {\n            writer.uint32(18).string(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseRequestSetOption };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseRequestSetOption };\n        if (object.key !== undefined && object.key !== null) {\n            message.key = String(object.key);\n        }\n        else {\n            message.key = \"\";\n        }\n        if (object.value !== undefined && object.value !== null) {\n            message.value = String(object.value);\n        }\n        else {\n            message.value = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.value !== undefined && (obj.value = message.value);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseRequestSetOption };\n        if (object.key !== undefined && object.key !== null) {\n            message.key = object.key;\n        }\n        else {\n            message.key = \"\";\n        }\n        if (object.value !== undefined && object.value !== null) {\n            message.value = object.value;\n        }\n        else {\n            message.value = \"\";\n        }\n        return message;\n    },\n};\nconst baseRequestInitChain = { chainId: \"\", initialHeight: 0 };\nexport const RequestInitChain = {\n    encode(message, writer = Writer.create()) {\n        if (message.time !== undefined) {\n            Timestamp.encode(toTimestamp(message.time), writer.uint32(10).fork()).ldelim();\n        }\n        if (message.chainId !== \"\") {\n            writer.uint32(18).string(message.chainId);\n        }\n        if (message.consensusParams !== undefined) {\n            ConsensusParams.encode(message.consensusParams, writer.uint32(26).fork()).ldelim();\n        }\n        for (const v of message.validators) {\n            ValidatorUpdate.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.appStateBytes.length !== 0) {\n            writer.uint32(42).bytes(message.appStateBytes);\n        }\n        if (message.initialHeight !== 0) {\n            writer.uint32(48).int64(message.initialHeight);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseRequestInitChain };\n        message.validators = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.chainId = reader.string();\n                    break;\n                case 3:\n                    message.consensusParams = ConsensusParams.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.validators.push(ValidatorUpdate.decode(reader, reader.uint32()));\n                    break;\n                case 5:\n                    message.appStateBytes = reader.bytes();\n                    break;\n                case 6:\n                    message.initialHeight = longToNumber(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseRequestInitChain };\n        message.validators = [];\n        if (object.time !== undefined && object.time !== null) {\n            message.time = fromJsonTimestamp(object.time);\n        }\n        else {\n            message.time = undefined;\n        }\n        if (object.chainId !== undefined && object.chainId !== null) {\n            message.chainId = String(object.chainId);\n        }\n        else {\n            message.chainId = \"\";\n        }\n        if (object.consensusParams !== undefined &&\n            object.consensusParams !== null) {\n            message.consensusParams = ConsensusParams.fromJSON(object.consensusParams);\n        }\n        else {\n            message.consensusParams = undefined;\n        }\n        if (object.validators !== undefined && object.validators !== null) {\n            for (const e of object.validators) {\n                message.validators.push(ValidatorUpdate.fromJSON(e));\n            }\n        }\n        if (object.appStateBytes !== undefined && object.appStateBytes !== null) {\n            message.appStateBytes = bytesFromBase64(object.appStateBytes);\n        }\n        if (object.initialHeight !== undefined && object.initialHeight !== null) {\n            message.initialHeight = Number(object.initialHeight);\n        }\n        else {\n            message.initialHeight = 0;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.time !== undefined &&\n            (obj.time =\n                message.time !== undefined ? message.time.toISOString() : null);\n        message.chainId !== undefined && (obj.chainId = message.chainId);\n        message.consensusParams !== undefined &&\n            (obj.consensusParams = message.consensusParams\n                ? ConsensusParams.toJSON(message.consensusParams)\n                : undefined);\n        if (message.validators) {\n            obj.validators = message.validators.map((e) => e ? ValidatorUpdate.toJSON(e) : undefined);\n        }\n        else {\n            obj.validators = [];\n        }\n        message.appStateBytes !== undefined &&\n            (obj.appStateBytes = base64FromBytes(message.appStateBytes !== undefined\n                ? message.appStateBytes\n                : new Uint8Array()));\n        message.initialHeight !== undefined &&\n            (obj.initialHeight = message.initialHeight);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseRequestInitChain };\n        message.validators = [];\n        if (object.time !== undefined && object.time !== null) {\n            message.time = object.time;\n        }\n        else {\n            message.time = undefined;\n        }\n        if (object.chainId !== undefined && object.chainId !== null) {\n            message.chainId = object.chainId;\n        }\n        else {\n            message.chainId = \"\";\n        }\n        if (object.consensusParams !== undefined &&\n            object.consensusParams !== null) {\n            message.consensusParams = ConsensusParams.fromPartial(object.consensusParams);\n        }\n        else {\n            message.consensusParams = undefined;\n        }\n        if (object.validators !== undefined && object.validators !== null) {\n            for (const e of object.validators) {\n                message.validators.push(ValidatorUpdate.fromPartial(e));\n            }\n        }\n        if (object.appStateBytes !== undefined && object.appStateBytes !== null) {\n            message.appStateBytes = object.appStateBytes;\n        }\n        else {\n            message.appStateBytes = new Uint8Array();\n        }\n        if (object.initialHeight !== undefined && object.initialHeight !== null) {\n            message.initialHeight = object.initialHeight;\n        }\n        else {\n            message.initialHeight = 0;\n        }\n        return message;\n    },\n};\nconst baseRequestQuery = { path: \"\", height: 0, prove: false };\nexport const RequestQuery = {\n    encode(message, writer = Writer.create()) {\n        if (message.data.length !== 0) {\n            writer.uint32(10).bytes(message.data);\n        }\n        if (message.path !== \"\") {\n            writer.uint32(18).string(message.path);\n        }\n        if (message.height !== 0) {\n            writer.uint32(24).int64(message.height);\n        }\n        if (message.prove === true) {\n            writer.uint32(32).bool(message.prove);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseRequestQuery };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.data = reader.bytes();\n                    break;\n                case 2:\n                    message.path = reader.string();\n                    break;\n                case 3:\n                    message.height = longToNumber(reader.int64());\n                    break;\n                case 4:\n                    message.prove = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseRequestQuery };\n        if (object.data !== undefined && object.data !== null) {\n            message.data = bytesFromBase64(object.data);\n        }\n        if (object.path !== undefined && object.path !== null) {\n            message.path = String(object.path);\n        }\n        else {\n            message.path = \"\";\n        }\n        if (object.height !== undefined && object.height !== null) {\n            message.height = Number(object.height);\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.prove !== undefined && object.prove !== null) {\n            message.prove = Boolean(object.prove);\n        }\n        else {\n            message.prove = false;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        message.path !== undefined && (obj.path = message.path);\n        message.height !== undefined && (obj.height = message.height);\n        message.prove !== undefined && (obj.prove = message.prove);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseRequestQuery };\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = new Uint8Array();\n        }\n        if (object.path !== undefined && object.path !== null) {\n            message.path = object.path;\n        }\n        else {\n            message.path = \"\";\n        }\n        if (object.height !== undefined && object.height !== null) {\n            message.height = object.height;\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.prove !== undefined && object.prove !== null) {\n            message.prove = object.prove;\n        }\n        else {\n            message.prove = false;\n        }\n        return message;\n    },\n};\nconst baseRequestBeginBlock = {};\nexport const RequestBeginBlock = {\n    encode(message, writer = Writer.create()) {\n        if (message.hash.length !== 0) {\n            writer.uint32(10).bytes(message.hash);\n        }\n        if (message.header !== undefined) {\n            Header.encode(message.header, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.lastCommitInfo !== undefined) {\n            LastCommitInfo.encode(message.lastCommitInfo, writer.uint32(26).fork()).ldelim();\n        }\n        for (const v of message.byzantineValidators) {\n            Evidence.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseRequestBeginBlock };\n        message.byzantineValidators = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.hash = reader.bytes();\n                    break;\n                case 2:\n                    message.header = Header.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.lastCommitInfo = LastCommitInfo.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.byzantineValidators.push(Evidence.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseRequestBeginBlock };\n        message.byzantineValidators = [];\n        if (object.hash !== undefined && object.hash !== null) {\n            message.hash = bytesFromBase64(object.hash);\n        }\n        if (object.header !== undefined && object.header !== null) {\n            message.header = Header.fromJSON(object.header);\n        }\n        else {\n            message.header = undefined;\n        }\n        if (object.lastCommitInfo !== undefined && object.lastCommitInfo !== null) {\n            message.lastCommitInfo = LastCommitInfo.fromJSON(object.lastCommitInfo);\n        }\n        else {\n            message.lastCommitInfo = undefined;\n        }\n        if (object.byzantineValidators !== undefined &&\n            object.byzantineValidators !== null) {\n            for (const e of object.byzantineValidators) {\n                message.byzantineValidators.push(Evidence.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.hash !== undefined &&\n            (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));\n        message.header !== undefined &&\n            (obj.header = message.header ? Header.toJSON(message.header) : undefined);\n        message.lastCommitInfo !== undefined &&\n            (obj.lastCommitInfo = message.lastCommitInfo\n                ? LastCommitInfo.toJSON(message.lastCommitInfo)\n                : undefined);\n        if (message.byzantineValidators) {\n            obj.byzantineValidators = message.byzantineValidators.map((e) => e ? Evidence.toJSON(e) : undefined);\n        }\n        else {\n            obj.byzantineValidators = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseRequestBeginBlock };\n        message.byzantineValidators = [];\n        if (object.hash !== undefined && object.hash !== null) {\n            message.hash = object.hash;\n        }\n        else {\n            message.hash = new Uint8Array();\n        }\n        if (object.header !== undefined && object.header !== null) {\n            message.header = Header.fromPartial(object.header);\n        }\n        else {\n            message.header = undefined;\n        }\n        if (object.lastCommitInfo !== undefined && object.lastCommitInfo !== null) {\n            message.lastCommitInfo = LastCommitInfo.fromPartial(object.lastCommitInfo);\n        }\n        else {\n            message.lastCommitInfo = undefined;\n        }\n        if (object.byzantineValidators !== undefined &&\n            object.byzantineValidators !== null) {\n            for (const e of object.byzantineValidators) {\n                message.byzantineValidators.push(Evidence.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseRequestCheckTx = { type: 0 };\nexport const RequestCheckTx = {\n    encode(message, writer = Writer.create()) {\n        if (message.tx.length !== 0) {\n            writer.uint32(10).bytes(message.tx);\n        }\n        if (message.type !== 0) {\n            writer.uint32(16).int32(message.type);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseRequestCheckTx };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.tx = reader.bytes();\n                    break;\n                case 2:\n                    message.type = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseRequestCheckTx };\n        if (object.tx !== undefined && object.tx !== null) {\n            message.tx = bytesFromBase64(object.tx);\n        }\n        if (object.type !== undefined && object.type !== null) {\n            message.type = checkTxTypeFromJSON(object.type);\n        }\n        else {\n            message.type = 0;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.tx !== undefined &&\n            (obj.tx = base64FromBytes(message.tx !== undefined ? message.tx : new Uint8Array()));\n        message.type !== undefined && (obj.type = checkTxTypeToJSON(message.type));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseRequestCheckTx };\n        if (object.tx !== undefined && object.tx !== null) {\n            message.tx = object.tx;\n        }\n        else {\n            message.tx = new Uint8Array();\n        }\n        if (object.type !== undefined && object.type !== null) {\n            message.type = object.type;\n        }\n        else {\n            message.type = 0;\n        }\n        return message;\n    },\n};\nconst baseRequestDeliverTx = {};\nexport const RequestDeliverTx = {\n    encode(message, writer = Writer.create()) {\n        if (message.tx.length !== 0) {\n            writer.uint32(10).bytes(message.tx);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseRequestDeliverTx };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.tx = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseRequestDeliverTx };\n        if (object.tx !== undefined && object.tx !== null) {\n            message.tx = bytesFromBase64(object.tx);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.tx !== undefined &&\n            (obj.tx = base64FromBytes(message.tx !== undefined ? message.tx : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseRequestDeliverTx };\n        if (object.tx !== undefined && object.tx !== null) {\n            message.tx = object.tx;\n        }\n        else {\n            message.tx = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseRequestEndBlock = { height: 0 };\nexport const RequestEndBlock = {\n    encode(message, writer = Writer.create()) {\n        if (message.height !== 0) {\n            writer.uint32(8).int64(message.height);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseRequestEndBlock };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.height = longToNumber(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseRequestEndBlock };\n        if (object.height !== undefined && object.height !== null) {\n            message.height = Number(object.height);\n        }\n        else {\n            message.height = 0;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.height !== undefined && (obj.height = message.height);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseRequestEndBlock };\n        if (object.height !== undefined && object.height !== null) {\n            message.height = object.height;\n        }\n        else {\n            message.height = 0;\n        }\n        return message;\n    },\n};\nconst baseRequestCommit = {};\nexport const RequestCommit = {\n    encode(_, writer = Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseRequestCommit };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = { ...baseRequestCommit };\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = { ...baseRequestCommit };\n        return message;\n    },\n};\nconst baseRequestListSnapshots = {};\nexport const RequestListSnapshots = {\n    encode(_, writer = Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseRequestListSnapshots };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = { ...baseRequestListSnapshots };\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = { ...baseRequestListSnapshots };\n        return message;\n    },\n};\nconst baseRequestOfferSnapshot = {};\nexport const RequestOfferSnapshot = {\n    encode(message, writer = Writer.create()) {\n        if (message.snapshot !== undefined) {\n            Snapshot.encode(message.snapshot, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.appHash.length !== 0) {\n            writer.uint32(18).bytes(message.appHash);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseRequestOfferSnapshot };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.snapshot = Snapshot.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.appHash = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseRequestOfferSnapshot };\n        if (object.snapshot !== undefined && object.snapshot !== null) {\n            message.snapshot = Snapshot.fromJSON(object.snapshot);\n        }\n        else {\n            message.snapshot = undefined;\n        }\n        if (object.appHash !== undefined && object.appHash !== null) {\n            message.appHash = bytesFromBase64(object.appHash);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.snapshot !== undefined &&\n            (obj.snapshot = message.snapshot\n                ? Snapshot.toJSON(message.snapshot)\n                : undefined);\n        message.appHash !== undefined &&\n            (obj.appHash = base64FromBytes(message.appHash !== undefined ? message.appHash : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseRequestOfferSnapshot };\n        if (object.snapshot !== undefined && object.snapshot !== null) {\n            message.snapshot = Snapshot.fromPartial(object.snapshot);\n        }\n        else {\n            message.snapshot = undefined;\n        }\n        if (object.appHash !== undefined && object.appHash !== null) {\n            message.appHash = object.appHash;\n        }\n        else {\n            message.appHash = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseRequestLoadSnapshotChunk = { height: 0, format: 0, chunk: 0 };\nexport const RequestLoadSnapshotChunk = {\n    encode(message, writer = Writer.create()) {\n        if (message.height !== 0) {\n            writer.uint32(8).uint64(message.height);\n        }\n        if (message.format !== 0) {\n            writer.uint32(16).uint32(message.format);\n        }\n        if (message.chunk !== 0) {\n            writer.uint32(24).uint32(message.chunk);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = {\n            ...baseRequestLoadSnapshotChunk,\n        };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.height = longToNumber(reader.uint64());\n                    break;\n                case 2:\n                    message.format = reader.uint32();\n                    break;\n                case 3:\n                    message.chunk = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = {\n            ...baseRequestLoadSnapshotChunk,\n        };\n        if (object.height !== undefined && object.height !== null) {\n            message.height = Number(object.height);\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.format !== undefined && object.format !== null) {\n            message.format = Number(object.format);\n        }\n        else {\n            message.format = 0;\n        }\n        if (object.chunk !== undefined && object.chunk !== null) {\n            message.chunk = Number(object.chunk);\n        }\n        else {\n            message.chunk = 0;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.height !== undefined && (obj.height = message.height);\n        message.format !== undefined && (obj.format = message.format);\n        message.chunk !== undefined && (obj.chunk = message.chunk);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = {\n            ...baseRequestLoadSnapshotChunk,\n        };\n        if (object.height !== undefined && object.height !== null) {\n            message.height = object.height;\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.format !== undefined && object.format !== null) {\n            message.format = object.format;\n        }\n        else {\n            message.format = 0;\n        }\n        if (object.chunk !== undefined && object.chunk !== null) {\n            message.chunk = object.chunk;\n        }\n        else {\n            message.chunk = 0;\n        }\n        return message;\n    },\n};\nconst baseRequestApplySnapshotChunk = { index: 0, sender: \"\" };\nexport const RequestApplySnapshotChunk = {\n    encode(message, writer = Writer.create()) {\n        if (message.index !== 0) {\n            writer.uint32(8).uint32(message.index);\n        }\n        if (message.chunk.length !== 0) {\n            writer.uint32(18).bytes(message.chunk);\n        }\n        if (message.sender !== \"\") {\n            writer.uint32(26).string(message.sender);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = {\n            ...baseRequestApplySnapshotChunk,\n        };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.index = reader.uint32();\n                    break;\n                case 2:\n                    message.chunk = reader.bytes();\n                    break;\n                case 3:\n                    message.sender = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = {\n            ...baseRequestApplySnapshotChunk,\n        };\n        if (object.index !== undefined && object.index !== null) {\n            message.index = Number(object.index);\n        }\n        else {\n            message.index = 0;\n        }\n        if (object.chunk !== undefined && object.chunk !== null) {\n            message.chunk = bytesFromBase64(object.chunk);\n        }\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = String(object.sender);\n        }\n        else {\n            message.sender = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.index !== undefined && (obj.index = message.index);\n        message.chunk !== undefined &&\n            (obj.chunk = base64FromBytes(message.chunk !== undefined ? message.chunk : new Uint8Array()));\n        message.sender !== undefined && (obj.sender = message.sender);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = {\n            ...baseRequestApplySnapshotChunk,\n        };\n        if (object.index !== undefined && object.index !== null) {\n            message.index = object.index;\n        }\n        else {\n            message.index = 0;\n        }\n        if (object.chunk !== undefined && object.chunk !== null) {\n            message.chunk = object.chunk;\n        }\n        else {\n            message.chunk = new Uint8Array();\n        }\n        if (object.sender !== undefined && object.sender !== null) {\n            message.sender = object.sender;\n        }\n        else {\n            message.sender = \"\";\n        }\n        return message;\n    },\n};\nconst baseResponse = {};\nexport const Response = {\n    encode(message, writer = Writer.create()) {\n        if (message.exception !== undefined) {\n            ResponseException.encode(message.exception, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.echo !== undefined) {\n            ResponseEcho.encode(message.echo, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.flush !== undefined) {\n            ResponseFlush.encode(message.flush, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.info !== undefined) {\n            ResponseInfo.encode(message.info, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.setOption !== undefined) {\n            ResponseSetOption.encode(message.setOption, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.initChain !== undefined) {\n            ResponseInitChain.encode(message.initChain, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.query !== undefined) {\n            ResponseQuery.encode(message.query, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.beginBlock !== undefined) {\n            ResponseBeginBlock.encode(message.beginBlock, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.checkTx !== undefined) {\n            ResponseCheckTx.encode(message.checkTx, writer.uint32(74).fork()).ldelim();\n        }\n        if (message.deliverTx !== undefined) {\n            ResponseDeliverTx.encode(message.deliverTx, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.endBlock !== undefined) {\n            ResponseEndBlock.encode(message.endBlock, writer.uint32(90).fork()).ldelim();\n        }\n        if (message.commit !== undefined) {\n            ResponseCommit.encode(message.commit, writer.uint32(98).fork()).ldelim();\n        }\n        if (message.listSnapshots !== undefined) {\n            ResponseListSnapshots.encode(message.listSnapshots, writer.uint32(106).fork()).ldelim();\n        }\n        if (message.offerSnapshot !== undefined) {\n            ResponseOfferSnapshot.encode(message.offerSnapshot, writer.uint32(114).fork()).ldelim();\n        }\n        if (message.loadSnapshotChunk !== undefined) {\n            ResponseLoadSnapshotChunk.encode(message.loadSnapshotChunk, writer.uint32(122).fork()).ldelim();\n        }\n        if (message.applySnapshotChunk !== undefined) {\n            ResponseApplySnapshotChunk.encode(message.applySnapshotChunk, writer.uint32(130).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseResponse };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.exception = ResponseException.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.echo = ResponseEcho.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.flush = ResponseFlush.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.info = ResponseInfo.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.setOption = ResponseSetOption.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.initChain = ResponseInitChain.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.query = ResponseQuery.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.beginBlock = ResponseBeginBlock.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.checkTx = ResponseCheckTx.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.deliverTx = ResponseDeliverTx.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.endBlock = ResponseEndBlock.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.commit = ResponseCommit.decode(reader, reader.uint32());\n                    break;\n                case 13:\n                    message.listSnapshots = ResponseListSnapshots.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    message.offerSnapshot = ResponseOfferSnapshot.decode(reader, reader.uint32());\n                    break;\n                case 15:\n                    message.loadSnapshotChunk = ResponseLoadSnapshotChunk.decode(reader, reader.uint32());\n                    break;\n                case 16:\n                    message.applySnapshotChunk = ResponseApplySnapshotChunk.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseResponse };\n        if (object.exception !== undefined && object.exception !== null) {\n            message.exception = ResponseException.fromJSON(object.exception);\n        }\n        else {\n            message.exception = undefined;\n        }\n        if (object.echo !== undefined && object.echo !== null) {\n            message.echo = ResponseEcho.fromJSON(object.echo);\n        }\n        else {\n            message.echo = undefined;\n        }\n        if (object.flush !== undefined && object.flush !== null) {\n            message.flush = ResponseFlush.fromJSON(object.flush);\n        }\n        else {\n            message.flush = undefined;\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = ResponseInfo.fromJSON(object.info);\n        }\n        else {\n            message.info = undefined;\n        }\n        if (object.setOption !== undefined && object.setOption !== null) {\n            message.setOption = ResponseSetOption.fromJSON(object.setOption);\n        }\n        else {\n            message.setOption = undefined;\n        }\n        if (object.initChain !== undefined && object.initChain !== null) {\n            message.initChain = ResponseInitChain.fromJSON(object.initChain);\n        }\n        else {\n            message.initChain = undefined;\n        }\n        if (object.query !== undefined && object.query !== null) {\n            message.query = ResponseQuery.fromJSON(object.query);\n        }\n        else {\n            message.query = undefined;\n        }\n        if (object.beginBlock !== undefined && object.beginBlock !== null) {\n            message.beginBlock = ResponseBeginBlock.fromJSON(object.beginBlock);\n        }\n        else {\n            message.beginBlock = undefined;\n        }\n        if (object.checkTx !== undefined && object.checkTx !== null) {\n            message.checkTx = ResponseCheckTx.fromJSON(object.checkTx);\n        }\n        else {\n            message.checkTx = undefined;\n        }\n        if (object.deliverTx !== undefined && object.deliverTx !== null) {\n            message.deliverTx = ResponseDeliverTx.fromJSON(object.deliverTx);\n        }\n        else {\n            message.deliverTx = undefined;\n        }\n        if (object.endBlock !== undefined && object.endBlock !== null) {\n            message.endBlock = ResponseEndBlock.fromJSON(object.endBlock);\n        }\n        else {\n            message.endBlock = undefined;\n        }\n        if (object.commit !== undefined && object.commit !== null) {\n            message.commit = ResponseCommit.fromJSON(object.commit);\n        }\n        else {\n            message.commit = undefined;\n        }\n        if (object.listSnapshots !== undefined && object.listSnapshots !== null) {\n            message.listSnapshots = ResponseListSnapshots.fromJSON(object.listSnapshots);\n        }\n        else {\n            message.listSnapshots = undefined;\n        }\n        if (object.offerSnapshot !== undefined && object.offerSnapshot !== null) {\n            message.offerSnapshot = ResponseOfferSnapshot.fromJSON(object.offerSnapshot);\n        }\n        else {\n            message.offerSnapshot = undefined;\n        }\n        if (object.loadSnapshotChunk !== undefined &&\n            object.loadSnapshotChunk !== null) {\n            message.loadSnapshotChunk = ResponseLoadSnapshotChunk.fromJSON(object.loadSnapshotChunk);\n        }\n        else {\n            message.loadSnapshotChunk = undefined;\n        }\n        if (object.applySnapshotChunk !== undefined &&\n            object.applySnapshotChunk !== null) {\n            message.applySnapshotChunk = ResponseApplySnapshotChunk.fromJSON(object.applySnapshotChunk);\n        }\n        else {\n            message.applySnapshotChunk = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.exception !== undefined &&\n            (obj.exception = message.exception\n                ? ResponseException.toJSON(message.exception)\n                : undefined);\n        message.echo !== undefined &&\n            (obj.echo = message.echo ? ResponseEcho.toJSON(message.echo) : undefined);\n        message.flush !== undefined &&\n            (obj.flush = message.flush\n                ? ResponseFlush.toJSON(message.flush)\n                : undefined);\n        message.info !== undefined &&\n            (obj.info = message.info ? ResponseInfo.toJSON(message.info) : undefined);\n        message.setOption !== undefined &&\n            (obj.setOption = message.setOption\n                ? ResponseSetOption.toJSON(message.setOption)\n                : undefined);\n        message.initChain !== undefined &&\n            (obj.initChain = message.initChain\n                ? ResponseInitChain.toJSON(message.initChain)\n                : undefined);\n        message.query !== undefined &&\n            (obj.query = message.query\n                ? ResponseQuery.toJSON(message.query)\n                : undefined);\n        message.beginBlock !== undefined &&\n            (obj.beginBlock = message.beginBlock\n                ? ResponseBeginBlock.toJSON(message.beginBlock)\n                : undefined);\n        message.checkTx !== undefined &&\n            (obj.checkTx = message.checkTx\n                ? ResponseCheckTx.toJSON(message.checkTx)\n                : undefined);\n        message.deliverTx !== undefined &&\n            (obj.deliverTx = message.deliverTx\n                ? ResponseDeliverTx.toJSON(message.deliverTx)\n                : undefined);\n        message.endBlock !== undefined &&\n            (obj.endBlock = message.endBlock\n                ? ResponseEndBlock.toJSON(message.endBlock)\n                : undefined);\n        message.commit !== undefined &&\n            (obj.commit = message.commit\n                ? ResponseCommit.toJSON(message.commit)\n                : undefined);\n        message.listSnapshots !== undefined &&\n            (obj.listSnapshots = message.listSnapshots\n                ? ResponseListSnapshots.toJSON(message.listSnapshots)\n                : undefined);\n        message.offerSnapshot !== undefined &&\n            (obj.offerSnapshot = message.offerSnapshot\n                ? ResponseOfferSnapshot.toJSON(message.offerSnapshot)\n                : undefined);\n        message.loadSnapshotChunk !== undefined &&\n            (obj.loadSnapshotChunk = message.loadSnapshotChunk\n                ? ResponseLoadSnapshotChunk.toJSON(message.loadSnapshotChunk)\n                : undefined);\n        message.applySnapshotChunk !== undefined &&\n            (obj.applySnapshotChunk = message.applySnapshotChunk\n                ? ResponseApplySnapshotChunk.toJSON(message.applySnapshotChunk)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseResponse };\n        if (object.exception !== undefined && object.exception !== null) {\n            message.exception = ResponseException.fromPartial(object.exception);\n        }\n        else {\n            message.exception = undefined;\n        }\n        if (object.echo !== undefined && object.echo !== null) {\n            message.echo = ResponseEcho.fromPartial(object.echo);\n        }\n        else {\n            message.echo = undefined;\n        }\n        if (object.flush !== undefined && object.flush !== null) {\n            message.flush = ResponseFlush.fromPartial(object.flush);\n        }\n        else {\n            message.flush = undefined;\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = ResponseInfo.fromPartial(object.info);\n        }\n        else {\n            message.info = undefined;\n        }\n        if (object.setOption !== undefined && object.setOption !== null) {\n            message.setOption = ResponseSetOption.fromPartial(object.setOption);\n        }\n        else {\n            message.setOption = undefined;\n        }\n        if (object.initChain !== undefined && object.initChain !== null) {\n            message.initChain = ResponseInitChain.fromPartial(object.initChain);\n        }\n        else {\n            message.initChain = undefined;\n        }\n        if (object.query !== undefined && object.query !== null) {\n            message.query = ResponseQuery.fromPartial(object.query);\n        }\n        else {\n            message.query = undefined;\n        }\n        if (object.beginBlock !== undefined && object.beginBlock !== null) {\n            message.beginBlock = ResponseBeginBlock.fromPartial(object.beginBlock);\n        }\n        else {\n            message.beginBlock = undefined;\n        }\n        if (object.checkTx !== undefined && object.checkTx !== null) {\n            message.checkTx = ResponseCheckTx.fromPartial(object.checkTx);\n        }\n        else {\n            message.checkTx = undefined;\n        }\n        if (object.deliverTx !== undefined && object.deliverTx !== null) {\n            message.deliverTx = ResponseDeliverTx.fromPartial(object.deliverTx);\n        }\n        else {\n            message.deliverTx = undefined;\n        }\n        if (object.endBlock !== undefined && object.endBlock !== null) {\n            message.endBlock = ResponseEndBlock.fromPartial(object.endBlock);\n        }\n        else {\n            message.endBlock = undefined;\n        }\n        if (object.commit !== undefined && object.commit !== null) {\n            message.commit = ResponseCommit.fromPartial(object.commit);\n        }\n        else {\n            message.commit = undefined;\n        }\n        if (object.listSnapshots !== undefined && object.listSnapshots !== null) {\n            message.listSnapshots = ResponseListSnapshots.fromPartial(object.listSnapshots);\n        }\n        else {\n            message.listSnapshots = undefined;\n        }\n        if (object.offerSnapshot !== undefined && object.offerSnapshot !== null) {\n            message.offerSnapshot = ResponseOfferSnapshot.fromPartial(object.offerSnapshot);\n        }\n        else {\n            message.offerSnapshot = undefined;\n        }\n        if (object.loadSnapshotChunk !== undefined &&\n            object.loadSnapshotChunk !== null) {\n            message.loadSnapshotChunk = ResponseLoadSnapshotChunk.fromPartial(object.loadSnapshotChunk);\n        }\n        else {\n            message.loadSnapshotChunk = undefined;\n        }\n        if (object.applySnapshotChunk !== undefined &&\n            object.applySnapshotChunk !== null) {\n            message.applySnapshotChunk = ResponseApplySnapshotChunk.fromPartial(object.applySnapshotChunk);\n        }\n        else {\n            message.applySnapshotChunk = undefined;\n        }\n        return message;\n    },\n};\nconst baseResponseException = { error: \"\" };\nexport const ResponseException = {\n    encode(message, writer = Writer.create()) {\n        if (message.error !== \"\") {\n            writer.uint32(10).string(message.error);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseResponseException };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.error = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseResponseException };\n        if (object.error !== undefined && object.error !== null) {\n            message.error = String(object.error);\n        }\n        else {\n            message.error = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.error !== undefined && (obj.error = message.error);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseResponseException };\n        if (object.error !== undefined && object.error !== null) {\n            message.error = object.error;\n        }\n        else {\n            message.error = \"\";\n        }\n        return message;\n    },\n};\nconst baseResponseEcho = { message: \"\" };\nexport const ResponseEcho = {\n    encode(message, writer = Writer.create()) {\n        if (message.message !== \"\") {\n            writer.uint32(10).string(message.message);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseResponseEcho };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.message = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseResponseEcho };\n        if (object.message !== undefined && object.message !== null) {\n            message.message = String(object.message);\n        }\n        else {\n            message.message = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.message !== undefined && (obj.message = message.message);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseResponseEcho };\n        if (object.message !== undefined && object.message !== null) {\n            message.message = object.message;\n        }\n        else {\n            message.message = \"\";\n        }\n        return message;\n    },\n};\nconst baseResponseFlush = {};\nexport const ResponseFlush = {\n    encode(_, writer = Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseResponseFlush };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = { ...baseResponseFlush };\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = { ...baseResponseFlush };\n        return message;\n    },\n};\nconst baseResponseInfo = {\n    data: \"\",\n    version: \"\",\n    appVersion: 0,\n    lastBlockHeight: 0,\n};\nexport const ResponseInfo = {\n    encode(message, writer = Writer.create()) {\n        if (message.data !== \"\") {\n            writer.uint32(10).string(message.data);\n        }\n        if (message.version !== \"\") {\n            writer.uint32(18).string(message.version);\n        }\n        if (message.appVersion !== 0) {\n            writer.uint32(24).uint64(message.appVersion);\n        }\n        if (message.lastBlockHeight !== 0) {\n            writer.uint32(32).int64(message.lastBlockHeight);\n        }\n        if (message.lastBlockAppHash.length !== 0) {\n            writer.uint32(42).bytes(message.lastBlockAppHash);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseResponseInfo };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.data = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.string();\n                    break;\n                case 3:\n                    message.appVersion = longToNumber(reader.uint64());\n                    break;\n                case 4:\n                    message.lastBlockHeight = longToNumber(reader.int64());\n                    break;\n                case 5:\n                    message.lastBlockAppHash = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseResponseInfo };\n        if (object.data !== undefined && object.data !== null) {\n            message.data = String(object.data);\n        }\n        else {\n            message.data = \"\";\n        }\n        if (object.version !== undefined && object.version !== null) {\n            message.version = String(object.version);\n        }\n        else {\n            message.version = \"\";\n        }\n        if (object.appVersion !== undefined && object.appVersion !== null) {\n            message.appVersion = Number(object.appVersion);\n        }\n        else {\n            message.appVersion = 0;\n        }\n        if (object.lastBlockHeight !== undefined &&\n            object.lastBlockHeight !== null) {\n            message.lastBlockHeight = Number(object.lastBlockHeight);\n        }\n        else {\n            message.lastBlockHeight = 0;\n        }\n        if (object.lastBlockAppHash !== undefined &&\n            object.lastBlockAppHash !== null) {\n            message.lastBlockAppHash = bytesFromBase64(object.lastBlockAppHash);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.data !== undefined && (obj.data = message.data);\n        message.version !== undefined && (obj.version = message.version);\n        message.appVersion !== undefined && (obj.appVersion = message.appVersion);\n        message.lastBlockHeight !== undefined &&\n            (obj.lastBlockHeight = message.lastBlockHeight);\n        message.lastBlockAppHash !== undefined &&\n            (obj.lastBlockAppHash = base64FromBytes(message.lastBlockAppHash !== undefined\n                ? message.lastBlockAppHash\n                : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseResponseInfo };\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = \"\";\n        }\n        if (object.version !== undefined && object.version !== null) {\n            message.version = object.version;\n        }\n        else {\n            message.version = \"\";\n        }\n        if (object.appVersion !== undefined && object.appVersion !== null) {\n            message.appVersion = object.appVersion;\n        }\n        else {\n            message.appVersion = 0;\n        }\n        if (object.lastBlockHeight !== undefined &&\n            object.lastBlockHeight !== null) {\n            message.lastBlockHeight = object.lastBlockHeight;\n        }\n        else {\n            message.lastBlockHeight = 0;\n        }\n        if (object.lastBlockAppHash !== undefined &&\n            object.lastBlockAppHash !== null) {\n            message.lastBlockAppHash = object.lastBlockAppHash;\n        }\n        else {\n            message.lastBlockAppHash = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseResponseSetOption = { code: 0, log: \"\", info: \"\" };\nexport const ResponseSetOption = {\n    encode(message, writer = Writer.create()) {\n        if (message.code !== 0) {\n            writer.uint32(8).uint32(message.code);\n        }\n        if (message.log !== \"\") {\n            writer.uint32(26).string(message.log);\n        }\n        if (message.info !== \"\") {\n            writer.uint32(34).string(message.info);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseResponseSetOption };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.code = reader.uint32();\n                    break;\n                case 3:\n                    message.log = reader.string();\n                    break;\n                case 4:\n                    message.info = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseResponseSetOption };\n        if (object.code !== undefined && object.code !== null) {\n            message.code = Number(object.code);\n        }\n        else {\n            message.code = 0;\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = String(object.log);\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = String(object.info);\n        }\n        else {\n            message.info = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.code !== undefined && (obj.code = message.code);\n        message.log !== undefined && (obj.log = message.log);\n        message.info !== undefined && (obj.info = message.info);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseResponseSetOption };\n        if (object.code !== undefined && object.code !== null) {\n            message.code = object.code;\n        }\n        else {\n            message.code = 0;\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = object.log;\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = object.info;\n        }\n        else {\n            message.info = \"\";\n        }\n        return message;\n    },\n};\nconst baseResponseInitChain = {};\nexport const ResponseInitChain = {\n    encode(message, writer = Writer.create()) {\n        if (message.consensusParams !== undefined) {\n            ConsensusParams.encode(message.consensusParams, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.validators) {\n            ValidatorUpdate.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.appHash.length !== 0) {\n            writer.uint32(26).bytes(message.appHash);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseResponseInitChain };\n        message.validators = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.consensusParams = ConsensusParams.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.validators.push(ValidatorUpdate.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.appHash = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseResponseInitChain };\n        message.validators = [];\n        if (object.consensusParams !== undefined &&\n            object.consensusParams !== null) {\n            message.consensusParams = ConsensusParams.fromJSON(object.consensusParams);\n        }\n        else {\n            message.consensusParams = undefined;\n        }\n        if (object.validators !== undefined && object.validators !== null) {\n            for (const e of object.validators) {\n                message.validators.push(ValidatorUpdate.fromJSON(e));\n            }\n        }\n        if (object.appHash !== undefined && object.appHash !== null) {\n            message.appHash = bytesFromBase64(object.appHash);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.consensusParams !== undefined &&\n            (obj.consensusParams = message.consensusParams\n                ? ConsensusParams.toJSON(message.consensusParams)\n                : undefined);\n        if (message.validators) {\n            obj.validators = message.validators.map((e) => e ? ValidatorUpdate.toJSON(e) : undefined);\n        }\n        else {\n            obj.validators = [];\n        }\n        message.appHash !== undefined &&\n            (obj.appHash = base64FromBytes(message.appHash !== undefined ? message.appHash : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseResponseInitChain };\n        message.validators = [];\n        if (object.consensusParams !== undefined &&\n            object.consensusParams !== null) {\n            message.consensusParams = ConsensusParams.fromPartial(object.consensusParams);\n        }\n        else {\n            message.consensusParams = undefined;\n        }\n        if (object.validators !== undefined && object.validators !== null) {\n            for (const e of object.validators) {\n                message.validators.push(ValidatorUpdate.fromPartial(e));\n            }\n        }\n        if (object.appHash !== undefined && object.appHash !== null) {\n            message.appHash = object.appHash;\n        }\n        else {\n            message.appHash = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseResponseQuery = {\n    code: 0,\n    log: \"\",\n    info: \"\",\n    index: 0,\n    height: 0,\n    codespace: \"\",\n};\nexport const ResponseQuery = {\n    encode(message, writer = Writer.create()) {\n        if (message.code !== 0) {\n            writer.uint32(8).uint32(message.code);\n        }\n        if (message.log !== \"\") {\n            writer.uint32(26).string(message.log);\n        }\n        if (message.info !== \"\") {\n            writer.uint32(34).string(message.info);\n        }\n        if (message.index !== 0) {\n            writer.uint32(40).int64(message.index);\n        }\n        if (message.key.length !== 0) {\n            writer.uint32(50).bytes(message.key);\n        }\n        if (message.value.length !== 0) {\n            writer.uint32(58).bytes(message.value);\n        }\n        if (message.proofOps !== undefined) {\n            ProofOps.encode(message.proofOps, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.height !== 0) {\n            writer.uint32(72).int64(message.height);\n        }\n        if (message.codespace !== \"\") {\n            writer.uint32(82).string(message.codespace);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseResponseQuery };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.code = reader.uint32();\n                    break;\n                case 3:\n                    message.log = reader.string();\n                    break;\n                case 4:\n                    message.info = reader.string();\n                    break;\n                case 5:\n                    message.index = longToNumber(reader.int64());\n                    break;\n                case 6:\n                    message.key = reader.bytes();\n                    break;\n                case 7:\n                    message.value = reader.bytes();\n                    break;\n                case 8:\n                    message.proofOps = ProofOps.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.height = longToNumber(reader.int64());\n                    break;\n                case 10:\n                    message.codespace = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseResponseQuery };\n        if (object.code !== undefined && object.code !== null) {\n            message.code = Number(object.code);\n        }\n        else {\n            message.code = 0;\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = String(object.log);\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = String(object.info);\n        }\n        else {\n            message.info = \"\";\n        }\n        if (object.index !== undefined && object.index !== null) {\n            message.index = Number(object.index);\n        }\n        else {\n            message.index = 0;\n        }\n        if (object.key !== undefined && object.key !== null) {\n            message.key = bytesFromBase64(object.key);\n        }\n        if (object.value !== undefined && object.value !== null) {\n            message.value = bytesFromBase64(object.value);\n        }\n        if (object.proofOps !== undefined && object.proofOps !== null) {\n            message.proofOps = ProofOps.fromJSON(object.proofOps);\n        }\n        else {\n            message.proofOps = undefined;\n        }\n        if (object.height !== undefined && object.height !== null) {\n            message.height = Number(object.height);\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.codespace !== undefined && object.codespace !== null) {\n            message.codespace = String(object.codespace);\n        }\n        else {\n            message.codespace = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.code !== undefined && (obj.code = message.code);\n        message.log !== undefined && (obj.log = message.log);\n        message.info !== undefined && (obj.info = message.info);\n        message.index !== undefined && (obj.index = message.index);\n        message.key !== undefined &&\n            (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n        message.value !== undefined &&\n            (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));\n        message.proofOps !== undefined &&\n            (obj.proofOps = message.proofOps\n                ? ProofOps.toJSON(message.proofOps)\n                : undefined);\n        message.height !== undefined && (obj.height = message.height);\n        message.codespace !== undefined && (obj.codespace = message.codespace);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseResponseQuery };\n        if (object.code !== undefined && object.code !== null) {\n            message.code = object.code;\n        }\n        else {\n            message.code = 0;\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = object.log;\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = object.info;\n        }\n        else {\n            message.info = \"\";\n        }\n        if (object.index !== undefined && object.index !== null) {\n            message.index = object.index;\n        }\n        else {\n            message.index = 0;\n        }\n        if (object.key !== undefined && object.key !== null) {\n            message.key = object.key;\n        }\n        else {\n            message.key = new Uint8Array();\n        }\n        if (object.value !== undefined && object.value !== null) {\n            message.value = object.value;\n        }\n        else {\n            message.value = new Uint8Array();\n        }\n        if (object.proofOps !== undefined && object.proofOps !== null) {\n            message.proofOps = ProofOps.fromPartial(object.proofOps);\n        }\n        else {\n            message.proofOps = undefined;\n        }\n        if (object.height !== undefined && object.height !== null) {\n            message.height = object.height;\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.codespace !== undefined && object.codespace !== null) {\n            message.codespace = object.codespace;\n        }\n        else {\n            message.codespace = \"\";\n        }\n        return message;\n    },\n};\nconst baseResponseBeginBlock = {};\nexport const ResponseBeginBlock = {\n    encode(message, writer = Writer.create()) {\n        for (const v of message.events) {\n            Event.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseResponseBeginBlock };\n        message.events = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.events.push(Event.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseResponseBeginBlock };\n        message.events = [];\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(Event.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.events) {\n            obj.events = message.events.map((e) => (e ? Event.toJSON(e) : undefined));\n        }\n        else {\n            obj.events = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseResponseBeginBlock };\n        message.events = [];\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(Event.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseResponseCheckTx = {\n    code: 0,\n    log: \"\",\n    info: \"\",\n    gasWanted: 0,\n    gasUsed: 0,\n    codespace: \"\",\n};\nexport const ResponseCheckTx = {\n    encode(message, writer = Writer.create()) {\n        if (message.code !== 0) {\n            writer.uint32(8).uint32(message.code);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        if (message.log !== \"\") {\n            writer.uint32(26).string(message.log);\n        }\n        if (message.info !== \"\") {\n            writer.uint32(34).string(message.info);\n        }\n        if (message.gasWanted !== 0) {\n            writer.uint32(40).int64(message.gasWanted);\n        }\n        if (message.gasUsed !== 0) {\n            writer.uint32(48).int64(message.gasUsed);\n        }\n        for (const v of message.events) {\n            Event.encode(v, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.codespace !== \"\") {\n            writer.uint32(66).string(message.codespace);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseResponseCheckTx };\n        message.events = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.code = reader.uint32();\n                    break;\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                case 3:\n                    message.log = reader.string();\n                    break;\n                case 4:\n                    message.info = reader.string();\n                    break;\n                case 5:\n                    message.gasWanted = longToNumber(reader.int64());\n                    break;\n                case 6:\n                    message.gasUsed = longToNumber(reader.int64());\n                    break;\n                case 7:\n                    message.events.push(Event.decode(reader, reader.uint32()));\n                    break;\n                case 8:\n                    message.codespace = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseResponseCheckTx };\n        message.events = [];\n        if (object.code !== undefined && object.code !== null) {\n            message.code = Number(object.code);\n        }\n        else {\n            message.code = 0;\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = bytesFromBase64(object.data);\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = String(object.log);\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = String(object.info);\n        }\n        else {\n            message.info = \"\";\n        }\n        if (object.gasWanted !== undefined && object.gasWanted !== null) {\n            message.gasWanted = Number(object.gasWanted);\n        }\n        else {\n            message.gasWanted = 0;\n        }\n        if (object.gasUsed !== undefined && object.gasUsed !== null) {\n            message.gasUsed = Number(object.gasUsed);\n        }\n        else {\n            message.gasUsed = 0;\n        }\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(Event.fromJSON(e));\n            }\n        }\n        if (object.codespace !== undefined && object.codespace !== null) {\n            message.codespace = String(object.codespace);\n        }\n        else {\n            message.codespace = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.code !== undefined && (obj.code = message.code);\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        message.log !== undefined && (obj.log = message.log);\n        message.info !== undefined && (obj.info = message.info);\n        message.gasWanted !== undefined && (obj.gasWanted = message.gasWanted);\n        message.gasUsed !== undefined && (obj.gasUsed = message.gasUsed);\n        if (message.events) {\n            obj.events = message.events.map((e) => (e ? Event.toJSON(e) : undefined));\n        }\n        else {\n            obj.events = [];\n        }\n        message.codespace !== undefined && (obj.codespace = message.codespace);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseResponseCheckTx };\n        message.events = [];\n        if (object.code !== undefined && object.code !== null) {\n            message.code = object.code;\n        }\n        else {\n            message.code = 0;\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = new Uint8Array();\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = object.log;\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = object.info;\n        }\n        else {\n            message.info = \"\";\n        }\n        if (object.gasWanted !== undefined && object.gasWanted !== null) {\n            message.gasWanted = object.gasWanted;\n        }\n        else {\n            message.gasWanted = 0;\n        }\n        if (object.gasUsed !== undefined && object.gasUsed !== null) {\n            message.gasUsed = object.gasUsed;\n        }\n        else {\n            message.gasUsed = 0;\n        }\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(Event.fromPartial(e));\n            }\n        }\n        if (object.codespace !== undefined && object.codespace !== null) {\n            message.codespace = object.codespace;\n        }\n        else {\n            message.codespace = \"\";\n        }\n        return message;\n    },\n};\nconst baseResponseDeliverTx = {\n    code: 0,\n    log: \"\",\n    info: \"\",\n    gasWanted: 0,\n    gasUsed: 0,\n    codespace: \"\",\n};\nexport const ResponseDeliverTx = {\n    encode(message, writer = Writer.create()) {\n        if (message.code !== 0) {\n            writer.uint32(8).uint32(message.code);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        if (message.log !== \"\") {\n            writer.uint32(26).string(message.log);\n        }\n        if (message.info !== \"\") {\n            writer.uint32(34).string(message.info);\n        }\n        if (message.gasWanted !== 0) {\n            writer.uint32(40).int64(message.gasWanted);\n        }\n        if (message.gasUsed !== 0) {\n            writer.uint32(48).int64(message.gasUsed);\n        }\n        for (const v of message.events) {\n            Event.encode(v, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.codespace !== \"\") {\n            writer.uint32(66).string(message.codespace);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseResponseDeliverTx };\n        message.events = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.code = reader.uint32();\n                    break;\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                case 3:\n                    message.log = reader.string();\n                    break;\n                case 4:\n                    message.info = reader.string();\n                    break;\n                case 5:\n                    message.gasWanted = longToNumber(reader.int64());\n                    break;\n                case 6:\n                    message.gasUsed = longToNumber(reader.int64());\n                    break;\n                case 7:\n                    message.events.push(Event.decode(reader, reader.uint32()));\n                    break;\n                case 8:\n                    message.codespace = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseResponseDeliverTx };\n        message.events = [];\n        if (object.code !== undefined && object.code !== null) {\n            message.code = Number(object.code);\n        }\n        else {\n            message.code = 0;\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = bytesFromBase64(object.data);\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = String(object.log);\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = String(object.info);\n        }\n        else {\n            message.info = \"\";\n        }\n        if (object.gasWanted !== undefined && object.gasWanted !== null) {\n            message.gasWanted = Number(object.gasWanted);\n        }\n        else {\n            message.gasWanted = 0;\n        }\n        if (object.gasUsed !== undefined && object.gasUsed !== null) {\n            message.gasUsed = Number(object.gasUsed);\n        }\n        else {\n            message.gasUsed = 0;\n        }\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(Event.fromJSON(e));\n            }\n        }\n        if (object.codespace !== undefined && object.codespace !== null) {\n            message.codespace = String(object.codespace);\n        }\n        else {\n            message.codespace = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.code !== undefined && (obj.code = message.code);\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        message.log !== undefined && (obj.log = message.log);\n        message.info !== undefined && (obj.info = message.info);\n        message.gasWanted !== undefined && (obj.gasWanted = message.gasWanted);\n        message.gasUsed !== undefined && (obj.gasUsed = message.gasUsed);\n        if (message.events) {\n            obj.events = message.events.map((e) => (e ? Event.toJSON(e) : undefined));\n        }\n        else {\n            obj.events = [];\n        }\n        message.codespace !== undefined && (obj.codespace = message.codespace);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseResponseDeliverTx };\n        message.events = [];\n        if (object.code !== undefined && object.code !== null) {\n            message.code = object.code;\n        }\n        else {\n            message.code = 0;\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = new Uint8Array();\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = object.log;\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = object.info;\n        }\n        else {\n            message.info = \"\";\n        }\n        if (object.gasWanted !== undefined && object.gasWanted !== null) {\n            message.gasWanted = object.gasWanted;\n        }\n        else {\n            message.gasWanted = 0;\n        }\n        if (object.gasUsed !== undefined && object.gasUsed !== null) {\n            message.gasUsed = object.gasUsed;\n        }\n        else {\n            message.gasUsed = 0;\n        }\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(Event.fromPartial(e));\n            }\n        }\n        if (object.codespace !== undefined && object.codespace !== null) {\n            message.codespace = object.codespace;\n        }\n        else {\n            message.codespace = \"\";\n        }\n        return message;\n    },\n};\nconst baseResponseEndBlock = {};\nexport const ResponseEndBlock = {\n    encode(message, writer = Writer.create()) {\n        for (const v of message.validatorUpdates) {\n            ValidatorUpdate.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.consensusParamUpdates !== undefined) {\n            ConsensusParams.encode(message.consensusParamUpdates, writer.uint32(18).fork()).ldelim();\n        }\n        for (const v of message.events) {\n            Event.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseResponseEndBlock };\n        message.validatorUpdates = [];\n        message.events = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.validatorUpdates.push(ValidatorUpdate.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.consensusParamUpdates = ConsensusParams.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.events.push(Event.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseResponseEndBlock };\n        message.validatorUpdates = [];\n        message.events = [];\n        if (object.validatorUpdates !== undefined &&\n            object.validatorUpdates !== null) {\n            for (const e of object.validatorUpdates) {\n                message.validatorUpdates.push(ValidatorUpdate.fromJSON(e));\n            }\n        }\n        if (object.consensusParamUpdates !== undefined &&\n            object.consensusParamUpdates !== null) {\n            message.consensusParamUpdates = ConsensusParams.fromJSON(object.consensusParamUpdates);\n        }\n        else {\n            message.consensusParamUpdates = undefined;\n        }\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(Event.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.validatorUpdates) {\n            obj.validatorUpdates = message.validatorUpdates.map((e) => e ? ValidatorUpdate.toJSON(e) : undefined);\n        }\n        else {\n            obj.validatorUpdates = [];\n        }\n        message.consensusParamUpdates !== undefined &&\n            (obj.consensusParamUpdates = message.consensusParamUpdates\n                ? ConsensusParams.toJSON(message.consensusParamUpdates)\n                : undefined);\n        if (message.events) {\n            obj.events = message.events.map((e) => (e ? Event.toJSON(e) : undefined));\n        }\n        else {\n            obj.events = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseResponseEndBlock };\n        message.validatorUpdates = [];\n        message.events = [];\n        if (object.validatorUpdates !== undefined &&\n            object.validatorUpdates !== null) {\n            for (const e of object.validatorUpdates) {\n                message.validatorUpdates.push(ValidatorUpdate.fromPartial(e));\n            }\n        }\n        if (object.consensusParamUpdates !== undefined &&\n            object.consensusParamUpdates !== null) {\n            message.consensusParamUpdates = ConsensusParams.fromPartial(object.consensusParamUpdates);\n        }\n        else {\n            message.consensusParamUpdates = undefined;\n        }\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(Event.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseResponseCommit = { retainHeight: 0 };\nexport const ResponseCommit = {\n    encode(message, writer = Writer.create()) {\n        if (message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        if (message.retainHeight !== 0) {\n            writer.uint32(24).int64(message.retainHeight);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseResponseCommit };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                case 3:\n                    message.retainHeight = longToNumber(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseResponseCommit };\n        if (object.data !== undefined && object.data !== null) {\n            message.data = bytesFromBase64(object.data);\n        }\n        if (object.retainHeight !== undefined && object.retainHeight !== null) {\n            message.retainHeight = Number(object.retainHeight);\n        }\n        else {\n            message.retainHeight = 0;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        message.retainHeight !== undefined &&\n            (obj.retainHeight = message.retainHeight);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseResponseCommit };\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = new Uint8Array();\n        }\n        if (object.retainHeight !== undefined && object.retainHeight !== null) {\n            message.retainHeight = object.retainHeight;\n        }\n        else {\n            message.retainHeight = 0;\n        }\n        return message;\n    },\n};\nconst baseResponseListSnapshots = {};\nexport const ResponseListSnapshots = {\n    encode(message, writer = Writer.create()) {\n        for (const v of message.snapshots) {\n            Snapshot.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseResponseListSnapshots };\n        message.snapshots = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.snapshots.push(Snapshot.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseResponseListSnapshots };\n        message.snapshots = [];\n        if (object.snapshots !== undefined && object.snapshots !== null) {\n            for (const e of object.snapshots) {\n                message.snapshots.push(Snapshot.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.snapshots) {\n            obj.snapshots = message.snapshots.map((e) => e ? Snapshot.toJSON(e) : undefined);\n        }\n        else {\n            obj.snapshots = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseResponseListSnapshots };\n        message.snapshots = [];\n        if (object.snapshots !== undefined && object.snapshots !== null) {\n            for (const e of object.snapshots) {\n                message.snapshots.push(Snapshot.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseResponseOfferSnapshot = { result: 0 };\nexport const ResponseOfferSnapshot = {\n    encode(message, writer = Writer.create()) {\n        if (message.result !== 0) {\n            writer.uint32(8).int32(message.result);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseResponseOfferSnapshot };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseResponseOfferSnapshot };\n        if (object.result !== undefined && object.result !== null) {\n            message.result = responseOfferSnapshot_ResultFromJSON(object.result);\n        }\n        else {\n            message.result = 0;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.result !== undefined &&\n            (obj.result = responseOfferSnapshot_ResultToJSON(message.result));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseResponseOfferSnapshot };\n        if (object.result !== undefined && object.result !== null) {\n            message.result = object.result;\n        }\n        else {\n            message.result = 0;\n        }\n        return message;\n    },\n};\nconst baseResponseLoadSnapshotChunk = {};\nexport const ResponseLoadSnapshotChunk = {\n    encode(message, writer = Writer.create()) {\n        if (message.chunk.length !== 0) {\n            writer.uint32(10).bytes(message.chunk);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = {\n            ...baseResponseLoadSnapshotChunk,\n        };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.chunk = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = {\n            ...baseResponseLoadSnapshotChunk,\n        };\n        if (object.chunk !== undefined && object.chunk !== null) {\n            message.chunk = bytesFromBase64(object.chunk);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.chunk !== undefined &&\n            (obj.chunk = base64FromBytes(message.chunk !== undefined ? message.chunk : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = {\n            ...baseResponseLoadSnapshotChunk,\n        };\n        if (object.chunk !== undefined && object.chunk !== null) {\n            message.chunk = object.chunk;\n        }\n        else {\n            message.chunk = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseResponseApplySnapshotChunk = {\n    result: 0,\n    refetchChunks: 0,\n    rejectSenders: \"\",\n};\nexport const ResponseApplySnapshotChunk = {\n    encode(message, writer = Writer.create()) {\n        if (message.result !== 0) {\n            writer.uint32(8).int32(message.result);\n        }\n        writer.uint32(18).fork();\n        for (const v of message.refetchChunks) {\n            writer.uint32(v);\n        }\n        writer.ldelim();\n        for (const v of message.rejectSenders) {\n            writer.uint32(26).string(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = {\n            ...baseResponseApplySnapshotChunk,\n        };\n        message.refetchChunks = [];\n        message.rejectSenders = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                case 2:\n                    if ((tag & 7) === 2) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2) {\n                            message.refetchChunks.push(reader.uint32());\n                        }\n                    }\n                    else {\n                        message.refetchChunks.push(reader.uint32());\n                    }\n                    break;\n                case 3:\n                    message.rejectSenders.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = {\n            ...baseResponseApplySnapshotChunk,\n        };\n        message.refetchChunks = [];\n        message.rejectSenders = [];\n        if (object.result !== undefined && object.result !== null) {\n            message.result = responseApplySnapshotChunk_ResultFromJSON(object.result);\n        }\n        else {\n            message.result = 0;\n        }\n        if (object.refetchChunks !== undefined && object.refetchChunks !== null) {\n            for (const e of object.refetchChunks) {\n                message.refetchChunks.push(Number(e));\n            }\n        }\n        if (object.rejectSenders !== undefined && object.rejectSenders !== null) {\n            for (const e of object.rejectSenders) {\n                message.rejectSenders.push(String(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.result !== undefined &&\n            (obj.result = responseApplySnapshotChunk_ResultToJSON(message.result));\n        if (message.refetchChunks) {\n            obj.refetchChunks = message.refetchChunks.map((e) => e);\n        }\n        else {\n            obj.refetchChunks = [];\n        }\n        if (message.rejectSenders) {\n            obj.rejectSenders = message.rejectSenders.map((e) => e);\n        }\n        else {\n            obj.rejectSenders = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = {\n            ...baseResponseApplySnapshotChunk,\n        };\n        message.refetchChunks = [];\n        message.rejectSenders = [];\n        if (object.result !== undefined && object.result !== null) {\n            message.result = object.result;\n        }\n        else {\n            message.result = 0;\n        }\n        if (object.refetchChunks !== undefined && object.refetchChunks !== null) {\n            for (const e of object.refetchChunks) {\n                message.refetchChunks.push(e);\n            }\n        }\n        if (object.rejectSenders !== undefined && object.rejectSenders !== null) {\n            for (const e of object.rejectSenders) {\n                message.rejectSenders.push(e);\n            }\n        }\n        return message;\n    },\n};\nconst baseConsensusParams = {};\nexport const ConsensusParams = {\n    encode(message, writer = Writer.create()) {\n        if (message.block !== undefined) {\n            BlockParams.encode(message.block, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.evidence !== undefined) {\n            EvidenceParams.encode(message.evidence, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.validator !== undefined) {\n            ValidatorParams.encode(message.validator, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.version !== undefined) {\n            VersionParams.encode(message.version, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseConsensusParams };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.block = BlockParams.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.evidence = EvidenceParams.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.validator = ValidatorParams.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.version = VersionParams.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseConsensusParams };\n        if (object.block !== undefined && object.block !== null) {\n            message.block = BlockParams.fromJSON(object.block);\n        }\n        else {\n            message.block = undefined;\n        }\n        if (object.evidence !== undefined && object.evidence !== null) {\n            message.evidence = EvidenceParams.fromJSON(object.evidence);\n        }\n        else {\n            message.evidence = undefined;\n        }\n        if (object.validator !== undefined && object.validator !== null) {\n            message.validator = ValidatorParams.fromJSON(object.validator);\n        }\n        else {\n            message.validator = undefined;\n        }\n        if (object.version !== undefined && object.version !== null) {\n            message.version = VersionParams.fromJSON(object.version);\n        }\n        else {\n            message.version = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.block !== undefined &&\n            (obj.block = message.block\n                ? BlockParams.toJSON(message.block)\n                : undefined);\n        message.evidence !== undefined &&\n            (obj.evidence = message.evidence\n                ? EvidenceParams.toJSON(message.evidence)\n                : undefined);\n        message.validator !== undefined &&\n            (obj.validator = message.validator\n                ? ValidatorParams.toJSON(message.validator)\n                : undefined);\n        message.version !== undefined &&\n            (obj.version = message.version\n                ? VersionParams.toJSON(message.version)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseConsensusParams };\n        if (object.block !== undefined && object.block !== null) {\n            message.block = BlockParams.fromPartial(object.block);\n        }\n        else {\n            message.block = undefined;\n        }\n        if (object.evidence !== undefined && object.evidence !== null) {\n            message.evidence = EvidenceParams.fromPartial(object.evidence);\n        }\n        else {\n            message.evidence = undefined;\n        }\n        if (object.validator !== undefined && object.validator !== null) {\n            message.validator = ValidatorParams.fromPartial(object.validator);\n        }\n        else {\n            message.validator = undefined;\n        }\n        if (object.version !== undefined && object.version !== null) {\n            message.version = VersionParams.fromPartial(object.version);\n        }\n        else {\n            message.version = undefined;\n        }\n        return message;\n    },\n};\nconst baseBlockParams = { maxBytes: 0, maxGas: 0 };\nexport const BlockParams = {\n    encode(message, writer = Writer.create()) {\n        if (message.maxBytes !== 0) {\n            writer.uint32(8).int64(message.maxBytes);\n        }\n        if (message.maxGas !== 0) {\n            writer.uint32(16).int64(message.maxGas);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseBlockParams };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.maxBytes = longToNumber(reader.int64());\n                    break;\n                case 2:\n                    message.maxGas = longToNumber(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseBlockParams };\n        if (object.maxBytes !== undefined && object.maxBytes !== null) {\n            message.maxBytes = Number(object.maxBytes);\n        }\n        else {\n            message.maxBytes = 0;\n        }\n        if (object.maxGas !== undefined && object.maxGas !== null) {\n            message.maxGas = Number(object.maxGas);\n        }\n        else {\n            message.maxGas = 0;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.maxBytes !== undefined && (obj.maxBytes = message.maxBytes);\n        message.maxGas !== undefined && (obj.maxGas = message.maxGas);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseBlockParams };\n        if (object.maxBytes !== undefined && object.maxBytes !== null) {\n            message.maxBytes = object.maxBytes;\n        }\n        else {\n            message.maxBytes = 0;\n        }\n        if (object.maxGas !== undefined && object.maxGas !== null) {\n            message.maxGas = object.maxGas;\n        }\n        else {\n            message.maxGas = 0;\n        }\n        return message;\n    },\n};\nconst baseLastCommitInfo = { round: 0 };\nexport const LastCommitInfo = {\n    encode(message, writer = Writer.create()) {\n        if (message.round !== 0) {\n            writer.uint32(8).int32(message.round);\n        }\n        for (const v of message.votes) {\n            VoteInfo.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseLastCommitInfo };\n        message.votes = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.round = reader.int32();\n                    break;\n                case 2:\n                    message.votes.push(VoteInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseLastCommitInfo };\n        message.votes = [];\n        if (object.round !== undefined && object.round !== null) {\n            message.round = Number(object.round);\n        }\n        else {\n            message.round = 0;\n        }\n        if (object.votes !== undefined && object.votes !== null) {\n            for (const e of object.votes) {\n                message.votes.push(VoteInfo.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.round !== undefined && (obj.round = message.round);\n        if (message.votes) {\n            obj.votes = message.votes.map((e) => e ? VoteInfo.toJSON(e) : undefined);\n        }\n        else {\n            obj.votes = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseLastCommitInfo };\n        message.votes = [];\n        if (object.round !== undefined && object.round !== null) {\n            message.round = object.round;\n        }\n        else {\n            message.round = 0;\n        }\n        if (object.votes !== undefined && object.votes !== null) {\n            for (const e of object.votes) {\n                message.votes.push(VoteInfo.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseEvent = { type: \"\" };\nexport const Event = {\n    encode(message, writer = Writer.create()) {\n        if (message.type !== \"\") {\n            writer.uint32(10).string(message.type);\n        }\n        for (const v of message.attributes) {\n            EventAttribute.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseEvent };\n        message.attributes = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.string();\n                    break;\n                case 2:\n                    message.attributes.push(EventAttribute.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseEvent };\n        message.attributes = [];\n        if (object.type !== undefined && object.type !== null) {\n            message.type = String(object.type);\n        }\n        else {\n            message.type = \"\";\n        }\n        if (object.attributes !== undefined && object.attributes !== null) {\n            for (const e of object.attributes) {\n                message.attributes.push(EventAttribute.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.type !== undefined && (obj.type = message.type);\n        if (message.attributes) {\n            obj.attributes = message.attributes.map((e) => e ? EventAttribute.toJSON(e) : undefined);\n        }\n        else {\n            obj.attributes = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseEvent };\n        message.attributes = [];\n        if (object.type !== undefined && object.type !== null) {\n            message.type = object.type;\n        }\n        else {\n            message.type = \"\";\n        }\n        if (object.attributes !== undefined && object.attributes !== null) {\n            for (const e of object.attributes) {\n                message.attributes.push(EventAttribute.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseEventAttribute = { index: false };\nexport const EventAttribute = {\n    encode(message, writer = Writer.create()) {\n        if (message.key.length !== 0) {\n            writer.uint32(10).bytes(message.key);\n        }\n        if (message.value.length !== 0) {\n            writer.uint32(18).bytes(message.value);\n        }\n        if (message.index === true) {\n            writer.uint32(24).bool(message.index);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseEventAttribute };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.value = reader.bytes();\n                    break;\n                case 3:\n                    message.index = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseEventAttribute };\n        if (object.key !== undefined && object.key !== null) {\n            message.key = bytesFromBase64(object.key);\n        }\n        if (object.value !== undefined && object.value !== null) {\n            message.value = bytesFromBase64(object.value);\n        }\n        if (object.index !== undefined && object.index !== null) {\n            message.index = Boolean(object.index);\n        }\n        else {\n            message.index = false;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined &&\n            (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n        message.value !== undefined &&\n            (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));\n        message.index !== undefined && (obj.index = message.index);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseEventAttribute };\n        if (object.key !== undefined && object.key !== null) {\n            message.key = object.key;\n        }\n        else {\n            message.key = new Uint8Array();\n        }\n        if (object.value !== undefined && object.value !== null) {\n            message.value = object.value;\n        }\n        else {\n            message.value = new Uint8Array();\n        }\n        if (object.index !== undefined && object.index !== null) {\n            message.index = object.index;\n        }\n        else {\n            message.index = false;\n        }\n        return message;\n    },\n};\nconst baseTxResult = { height: 0, index: 0 };\nexport const TxResult = {\n    encode(message, writer = Writer.create()) {\n        if (message.height !== 0) {\n            writer.uint32(8).int64(message.height);\n        }\n        if (message.index !== 0) {\n            writer.uint32(16).uint32(message.index);\n        }\n        if (message.tx.length !== 0) {\n            writer.uint32(26).bytes(message.tx);\n        }\n        if (message.result !== undefined) {\n            ResponseDeliverTx.encode(message.result, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseTxResult };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.height = longToNumber(reader.int64());\n                    break;\n                case 2:\n                    message.index = reader.uint32();\n                    break;\n                case 3:\n                    message.tx = reader.bytes();\n                    break;\n                case 4:\n                    message.result = ResponseDeliverTx.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseTxResult };\n        if (object.height !== undefined && object.height !== null) {\n            message.height = Number(object.height);\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.index !== undefined && object.index !== null) {\n            message.index = Number(object.index);\n        }\n        else {\n            message.index = 0;\n        }\n        if (object.tx !== undefined && object.tx !== null) {\n            message.tx = bytesFromBase64(object.tx);\n        }\n        if (object.result !== undefined && object.result !== null) {\n            message.result = ResponseDeliverTx.fromJSON(object.result);\n        }\n        else {\n            message.result = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.height !== undefined && (obj.height = message.height);\n        message.index !== undefined && (obj.index = message.index);\n        message.tx !== undefined &&\n            (obj.tx = base64FromBytes(message.tx !== undefined ? message.tx : new Uint8Array()));\n        message.result !== undefined &&\n            (obj.result = message.result\n                ? ResponseDeliverTx.toJSON(message.result)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseTxResult };\n        if (object.height !== undefined && object.height !== null) {\n            message.height = object.height;\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.index !== undefined && object.index !== null) {\n            message.index = object.index;\n        }\n        else {\n            message.index = 0;\n        }\n        if (object.tx !== undefined && object.tx !== null) {\n            message.tx = object.tx;\n        }\n        else {\n            message.tx = new Uint8Array();\n        }\n        if (object.result !== undefined && object.result !== null) {\n            message.result = ResponseDeliverTx.fromPartial(object.result);\n        }\n        else {\n            message.result = undefined;\n        }\n        return message;\n    },\n};\nconst baseValidator = { power: 0 };\nexport const Validator = {\n    encode(message, writer = Writer.create()) {\n        if (message.address.length !== 0) {\n            writer.uint32(10).bytes(message.address);\n        }\n        if (message.power !== 0) {\n            writer.uint32(24).int64(message.power);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseValidator };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address = reader.bytes();\n                    break;\n                case 3:\n                    message.power = longToNumber(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseValidator };\n        if (object.address !== undefined && object.address !== null) {\n            message.address = bytesFromBase64(object.address);\n        }\n        if (object.power !== undefined && object.power !== null) {\n            message.power = Number(object.power);\n        }\n        else {\n            message.power = 0;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.address !== undefined &&\n            (obj.address = base64FromBytes(message.address !== undefined ? message.address : new Uint8Array()));\n        message.power !== undefined && (obj.power = message.power);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseValidator };\n        if (object.address !== undefined && object.address !== null) {\n            message.address = object.address;\n        }\n        else {\n            message.address = new Uint8Array();\n        }\n        if (object.power !== undefined && object.power !== null) {\n            message.power = object.power;\n        }\n        else {\n            message.power = 0;\n        }\n        return message;\n    },\n};\nconst baseValidatorUpdate = { power: 0 };\nexport const ValidatorUpdate = {\n    encode(message, writer = Writer.create()) {\n        if (message.pubKey !== undefined) {\n            PublicKey.encode(message.pubKey, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.power !== 0) {\n            writer.uint32(16).int64(message.power);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseValidatorUpdate };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.pubKey = PublicKey.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.power = longToNumber(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseValidatorUpdate };\n        if (object.pubKey !== undefined && object.pubKey !== null) {\n            message.pubKey = PublicKey.fromJSON(object.pubKey);\n        }\n        else {\n            message.pubKey = undefined;\n        }\n        if (object.power !== undefined && object.power !== null) {\n            message.power = Number(object.power);\n        }\n        else {\n            message.power = 0;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.pubKey !== undefined &&\n            (obj.pubKey = message.pubKey\n                ? PublicKey.toJSON(message.pubKey)\n                : undefined);\n        message.power !== undefined && (obj.power = message.power);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseValidatorUpdate };\n        if (object.pubKey !== undefined && object.pubKey !== null) {\n            message.pubKey = PublicKey.fromPartial(object.pubKey);\n        }\n        else {\n            message.pubKey = undefined;\n        }\n        if (object.power !== undefined && object.power !== null) {\n            message.power = object.power;\n        }\n        else {\n            message.power = 0;\n        }\n        return message;\n    },\n};\nconst baseVoteInfo = { signedLastBlock: false };\nexport const VoteInfo = {\n    encode(message, writer = Writer.create()) {\n        if (message.validator !== undefined) {\n            Validator.encode(message.validator, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.signedLastBlock === true) {\n            writer.uint32(16).bool(message.signedLastBlock);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseVoteInfo };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.validator = Validator.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.signedLastBlock = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseVoteInfo };\n        if (object.validator !== undefined && object.validator !== null) {\n            message.validator = Validator.fromJSON(object.validator);\n        }\n        else {\n            message.validator = undefined;\n        }\n        if (object.signedLastBlock !== undefined &&\n            object.signedLastBlock !== null) {\n            message.signedLastBlock = Boolean(object.signedLastBlock);\n        }\n        else {\n            message.signedLastBlock = false;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.validator !== undefined &&\n            (obj.validator = message.validator\n                ? Validator.toJSON(message.validator)\n                : undefined);\n        message.signedLastBlock !== undefined &&\n            (obj.signedLastBlock = message.signedLastBlock);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseVoteInfo };\n        if (object.validator !== undefined && object.validator !== null) {\n            message.validator = Validator.fromPartial(object.validator);\n        }\n        else {\n            message.validator = undefined;\n        }\n        if (object.signedLastBlock !== undefined &&\n            object.signedLastBlock !== null) {\n            message.signedLastBlock = object.signedLastBlock;\n        }\n        else {\n            message.signedLastBlock = false;\n        }\n        return message;\n    },\n};\nconst baseEvidence = { type: 0, height: 0, totalVotingPower: 0 };\nexport const Evidence = {\n    encode(message, writer = Writer.create()) {\n        if (message.type !== 0) {\n            writer.uint32(8).int32(message.type);\n        }\n        if (message.validator !== undefined) {\n            Validator.encode(message.validator, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.height !== 0) {\n            writer.uint32(24).int64(message.height);\n        }\n        if (message.time !== undefined) {\n            Timestamp.encode(toTimestamp(message.time), writer.uint32(34).fork()).ldelim();\n        }\n        if (message.totalVotingPower !== 0) {\n            writer.uint32(40).int64(message.totalVotingPower);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseEvidence };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.validator = Validator.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.height = longToNumber(reader.int64());\n                    break;\n                case 4:\n                    message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 5:\n                    message.totalVotingPower = longToNumber(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseEvidence };\n        if (object.type !== undefined && object.type !== null) {\n            message.type = evidenceTypeFromJSON(object.type);\n        }\n        else {\n            message.type = 0;\n        }\n        if (object.validator !== undefined && object.validator !== null) {\n            message.validator = Validator.fromJSON(object.validator);\n        }\n        else {\n            message.validator = undefined;\n        }\n        if (object.height !== undefined && object.height !== null) {\n            message.height = Number(object.height);\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.time !== undefined && object.time !== null) {\n            message.time = fromJsonTimestamp(object.time);\n        }\n        else {\n            message.time = undefined;\n        }\n        if (object.totalVotingPower !== undefined &&\n            object.totalVotingPower !== null) {\n            message.totalVotingPower = Number(object.totalVotingPower);\n        }\n        else {\n            message.totalVotingPower = 0;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.type !== undefined && (obj.type = evidenceTypeToJSON(message.type));\n        message.validator !== undefined &&\n            (obj.validator = message.validator\n                ? Validator.toJSON(message.validator)\n                : undefined);\n        message.height !== undefined && (obj.height = message.height);\n        message.time !== undefined &&\n            (obj.time =\n                message.time !== undefined ? message.time.toISOString() : null);\n        message.totalVotingPower !== undefined &&\n            (obj.totalVotingPower = message.totalVotingPower);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseEvidence };\n        if (object.type !== undefined && object.type !== null) {\n            message.type = object.type;\n        }\n        else {\n            message.type = 0;\n        }\n        if (object.validator !== undefined && object.validator !== null) {\n            message.validator = Validator.fromPartial(object.validator);\n        }\n        else {\n            message.validator = undefined;\n        }\n        if (object.height !== undefined && object.height !== null) {\n            message.height = object.height;\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.time !== undefined && object.time !== null) {\n            message.time = object.time;\n        }\n        else {\n            message.time = undefined;\n        }\n        if (object.totalVotingPower !== undefined &&\n            object.totalVotingPower !== null) {\n            message.totalVotingPower = object.totalVotingPower;\n        }\n        else {\n            message.totalVotingPower = 0;\n        }\n        return message;\n    },\n};\nconst baseSnapshot = { height: 0, format: 0, chunks: 0 };\nexport const Snapshot = {\n    encode(message, writer = Writer.create()) {\n        if (message.height !== 0) {\n            writer.uint32(8).uint64(message.height);\n        }\n        if (message.format !== 0) {\n            writer.uint32(16).uint32(message.format);\n        }\n        if (message.chunks !== 0) {\n            writer.uint32(24).uint32(message.chunks);\n        }\n        if (message.hash.length !== 0) {\n            writer.uint32(34).bytes(message.hash);\n        }\n        if (message.metadata.length !== 0) {\n            writer.uint32(42).bytes(message.metadata);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseSnapshot };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.height = longToNumber(reader.uint64());\n                    break;\n                case 2:\n                    message.format = reader.uint32();\n                    break;\n                case 3:\n                    message.chunks = reader.uint32();\n                    break;\n                case 4:\n                    message.hash = reader.bytes();\n                    break;\n                case 5:\n                    message.metadata = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseSnapshot };\n        if (object.height !== undefined && object.height !== null) {\n            message.height = Number(object.height);\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.format !== undefined && object.format !== null) {\n            message.format = Number(object.format);\n        }\n        else {\n            message.format = 0;\n        }\n        if (object.chunks !== undefined && object.chunks !== null) {\n            message.chunks = Number(object.chunks);\n        }\n        else {\n            message.chunks = 0;\n        }\n        if (object.hash !== undefined && object.hash !== null) {\n            message.hash = bytesFromBase64(object.hash);\n        }\n        if (object.metadata !== undefined && object.metadata !== null) {\n            message.metadata = bytesFromBase64(object.metadata);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.height !== undefined && (obj.height = message.height);\n        message.format !== undefined && (obj.format = message.format);\n        message.chunks !== undefined && (obj.chunks = message.chunks);\n        message.hash !== undefined &&\n            (obj.hash = base64FromBytes(message.hash !== undefined ? message.hash : new Uint8Array()));\n        message.metadata !== undefined &&\n            (obj.metadata = base64FromBytes(message.metadata !== undefined ? message.metadata : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseSnapshot };\n        if (object.height !== undefined && object.height !== null) {\n            message.height = object.height;\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.format !== undefined && object.format !== null) {\n            message.format = object.format;\n        }\n        else {\n            message.format = 0;\n        }\n        if (object.chunks !== undefined && object.chunks !== null) {\n            message.chunks = object.chunks;\n        }\n        else {\n            message.chunks = 0;\n        }\n        if (object.hash !== undefined && object.hash !== null) {\n            message.hash = object.hash;\n        }\n        else {\n            message.hash = new Uint8Array();\n        }\n        if (object.metadata !== undefined && object.metadata !== null) {\n            message.metadata = object.metadata;\n        }\n        else {\n            message.metadata = new Uint8Array();\n        }\n        return message;\n    },\n};\nexport class ABCIApplicationClientImpl {\n    constructor(rpc) {\n        this.rpc = rpc;\n    }\n    Echo(request) {\n        const data = RequestEcho.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"Echo\", data);\n        return promise.then((data) => ResponseEcho.decode(new Reader(data)));\n    }\n    Flush(request) {\n        const data = RequestFlush.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"Flush\", data);\n        return promise.then((data) => ResponseFlush.decode(new Reader(data)));\n    }\n    Info(request) {\n        const data = RequestInfo.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"Info\", data);\n        return promise.then((data) => ResponseInfo.decode(new Reader(data)));\n    }\n    SetOption(request) {\n        const data = RequestSetOption.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"SetOption\", data);\n        return promise.then((data) => ResponseSetOption.decode(new Reader(data)));\n    }\n    DeliverTx(request) {\n        const data = RequestDeliverTx.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"DeliverTx\", data);\n        return promise.then((data) => ResponseDeliverTx.decode(new Reader(data)));\n    }\n    CheckTx(request) {\n        const data = RequestCheckTx.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"CheckTx\", data);\n        return promise.then((data) => ResponseCheckTx.decode(new Reader(data)));\n    }\n    Query(request) {\n        const data = RequestQuery.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"Query\", data);\n        return promise.then((data) => ResponseQuery.decode(new Reader(data)));\n    }\n    Commit(request) {\n        const data = RequestCommit.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"Commit\", data);\n        return promise.then((data) => ResponseCommit.decode(new Reader(data)));\n    }\n    InitChain(request) {\n        const data = RequestInitChain.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"InitChain\", data);\n        return promise.then((data) => ResponseInitChain.decode(new Reader(data)));\n    }\n    BeginBlock(request) {\n        const data = RequestBeginBlock.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"BeginBlock\", data);\n        return promise.then((data) => ResponseBeginBlock.decode(new Reader(data)));\n    }\n    EndBlock(request) {\n        const data = RequestEndBlock.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"EndBlock\", data);\n        return promise.then((data) => ResponseEndBlock.decode(new Reader(data)));\n    }\n    ListSnapshots(request) {\n        const data = RequestListSnapshots.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"ListSnapshots\", data);\n        return promise.then((data) => ResponseListSnapshots.decode(new Reader(data)));\n    }\n    OfferSnapshot(request) {\n        const data = RequestOfferSnapshot.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"OfferSnapshot\", data);\n        return promise.then((data) => ResponseOfferSnapshot.decode(new Reader(data)));\n    }\n    LoadSnapshotChunk(request) {\n        const data = RequestLoadSnapshotChunk.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"LoadSnapshotChunk\", data);\n        return promise.then((data) => ResponseLoadSnapshotChunk.decode(new Reader(data)));\n    }\n    ApplySnapshotChunk(request) {\n        const data = RequestApplySnapshotChunk.encode(request).finish();\n        const promise = this.rpc.request(\"tendermint.abci.ABCIApplication\", \"ApplySnapshotChunk\", data);\n        return promise.then((data) => ResponseApplySnapshotChunk.decode(new Reader(data)));\n    }\n}\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob ||\n    ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa ||\n    ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (let i = 0; i < arr.byteLength; ++i) {\n        bin.push(String.fromCharCode(arr[i]));\n    }\n    return btoa(bin.join(\"\"));\n}\nfunction toTimestamp(date) {\n    const seconds = date.getTime() / 1000;\n    const nanos = (date.getTime() % 1000) * 1000000;\n    return { seconds, nanos };\n}\nfunction fromTimestamp(t) {\n    let millis = t.seconds * 1000;\n    millis += t.nanos / 1000000;\n    return new Date(millis);\n}\nfunction fromJsonTimestamp(o) {\n    if (o instanceof Date) {\n        return o;\n    }\n    else if (typeof o === \"string\") {\n        return new Date(o);\n    }\n    else {\n        return fromTimestamp(Timestamp.fromJSON(o));\n    }\n}\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (util.Long !== Long) {\n    util.Long = Long;\n    configure();\n}\n"]}]}