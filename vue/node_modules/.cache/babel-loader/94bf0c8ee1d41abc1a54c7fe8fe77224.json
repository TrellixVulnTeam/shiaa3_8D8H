{"remainingRequest":"/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/babel-loader/lib/index.js!/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/eslint-loader/index.js??ref--13-0!/home/saptarsi/go/src/hackathon/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.staking.v1beta1/module/rest.js","dependencies":[{"path":"/home/saptarsi/go/src/hackathon/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.staking.v1beta1/module/rest.js","mtime":1616486558877},{"path":"/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/saptarsi/go/src/hackathon/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.staking.v1beta1/module/rest.js"],"names":["V1Beta1BondStatus","ContentType","HttpClient","apiConfig","baseUrl","securityData","securityWorker","abortControllers","Map","baseApiParams","credentials","headers","redirect","referrerPolicy","setSecurityData","data","contentFormatters","Json","input","JSON","stringify","FormData","Object","keys","reduce","key","append","UrlEncoded","toQueryString","createAbortSignal","cancelToken","has","abortController","get","signal","AbortController","set","abortRequest","abort","delete","request","body","secure","path","type","query","format","params","secureParams","requestParams","mergeRequestParams","queryString","payloadFormatter","fetch","then","response","r","error","ok","catch","e","assign","value","encodeURIComponent","Array","isArray","join","rawQuery","filter","map","addQueryParam","params1","params2","Api","arguments","queryDelegatorDelegations","delegatorAddr","method","queryRedelegations","queryDelegatorUnbondingDelegations","queryDelegatorValidators","queryDelegatorValidator","validatorAddr","queryHistoricalInfo","height","queryParams","queryPool","queryValidators","queryValidator","queryValidatorDelegations","queryDelegation","queryUnbondingDelegation","queryValidatorUnbondingDelegations"],"mappings":"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","sourcesContent":["/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n/**\n* BondStatus is the status of a validator.\n\n - BOND_STATUS_UNSPECIFIED: UNSPECIFIED defines an invalid validator status.\n - BOND_STATUS_UNBONDED: UNBONDED defines a validator that is not bonded.\n - BOND_STATUS_UNBONDING: UNBONDING defines a validator that is unbonding.\n - BOND_STATUS_BONDED: BONDED defines a validator that is bonded.\n*/\nexport var V1Beta1BondStatus;\n(function (V1Beta1BondStatus) {\n    V1Beta1BondStatus[\"BOND_STATUS_UNSPECIFIED\"] = \"BOND_STATUS_UNSPECIFIED\";\n    V1Beta1BondStatus[\"BOND_STATUS_UNBONDED\"] = \"BOND_STATUS_UNBONDED\";\n    V1Beta1BondStatus[\"BOND_STATUS_UNBONDING\"] = \"BOND_STATUS_UNBONDING\";\n    V1Beta1BondStatus[\"BOND_STATUS_BONDED\"] = \"BOND_STATUS_BONDED\";\n})(V1Beta1BondStatus || (V1Beta1BondStatus = {}));\nexport var ContentType;\n(function (ContentType) {\n    ContentType[\"Json\"] = \"application/json\";\n    ContentType[\"FormData\"] = \"multipart/form-data\";\n    ContentType[\"UrlEncoded\"] = \"application/x-www-form-urlencoded\";\n})(ContentType || (ContentType = {}));\nexport class HttpClient {\n    constructor(apiConfig = {}) {\n        this.baseUrl = \"\";\n        this.securityData = null;\n        this.securityWorker = null;\n        this.abortControllers = new Map();\n        this.baseApiParams = {\n            credentials: \"same-origin\",\n            headers: {},\n            redirect: \"follow\",\n            referrerPolicy: \"no-referrer\",\n        };\n        this.setSecurityData = (data) => {\n            this.securityData = data;\n        };\n        this.contentFormatters = {\n            [ContentType.Json]: (input) => input !== null && (typeof input === \"object\" || typeof input === \"string\") ? JSON.stringify(input) : input,\n            [ContentType.FormData]: (input) => Object.keys(input || {}).reduce((data, key) => {\n                data.append(key, input[key]);\n                return data;\n            }, new FormData()),\n            [ContentType.UrlEncoded]: (input) => this.toQueryString(input),\n        };\n        this.createAbortSignal = (cancelToken) => {\n            if (this.abortControllers.has(cancelToken)) {\n                const abortController = this.abortControllers.get(cancelToken);\n                if (abortController) {\n                    return abortController.signal;\n                }\n                return void 0;\n            }\n            const abortController = new AbortController();\n            this.abortControllers.set(cancelToken, abortController);\n            return abortController.signal;\n        };\n        this.abortRequest = (cancelToken) => {\n            const abortController = this.abortControllers.get(cancelToken);\n            if (abortController) {\n                abortController.abort();\n                this.abortControllers.delete(cancelToken);\n            }\n        };\n        this.request = ({ body, secure, path, type, query, format = \"json\", baseUrl, cancelToken, ...params }) => {\n            const secureParams = (secure && this.securityWorker && this.securityWorker(this.securityData)) || {};\n            const requestParams = this.mergeRequestParams(params, secureParams);\n            const queryString = query && this.toQueryString(query);\n            const payloadFormatter = this.contentFormatters[type || ContentType.Json];\n            return fetch(`${baseUrl || this.baseUrl || \"\"}${path}${queryString ? `?${queryString}` : \"\"}`, {\n                ...requestParams,\n                headers: {\n                    ...(type && type !== ContentType.FormData ? { \"Content-Type\": type } : {}),\n                    ...(requestParams.headers || {}),\n                },\n                signal: cancelToken ? this.createAbortSignal(cancelToken) : void 0,\n                body: typeof body === \"undefined\" || body === null ? null : payloadFormatter(body),\n            }).then(async (response) => {\n                const r = response;\n                r.data = null;\n                r.error = null;\n                const data = await response[format]()\n                    .then((data) => {\n                    if (r.ok) {\n                        r.data = data;\n                    }\n                    else {\n                        r.error = data;\n                    }\n                    return r;\n                })\n                    .catch((e) => {\n                    r.error = e;\n                    return r;\n                });\n                if (cancelToken) {\n                    this.abortControllers.delete(cancelToken);\n                }\n                if (!response.ok)\n                    throw data;\n                return data;\n            });\n        };\n        Object.assign(this, apiConfig);\n    }\n    addQueryParam(query, key) {\n        const value = query[key];\n        return (encodeURIComponent(key) +\n            \"=\" +\n            encodeURIComponent(Array.isArray(value) ? value.join(\",\") : typeof value === \"number\" ? value : `${value}`));\n    }\n    toQueryString(rawQuery) {\n        const query = rawQuery || {};\n        const keys = Object.keys(query).filter((key) => \"undefined\" !== typeof query[key]);\n        return keys\n            .map((key) => typeof query[key] === \"object\" && !Array.isArray(query[key])\n            ? this.toQueryString(query[key])\n            : this.addQueryParam(query, key))\n            .join(\"&\");\n    }\n    addQueryParams(rawQuery) {\n        const queryString = this.toQueryString(rawQuery);\n        return queryString ? `?${queryString}` : \"\";\n    }\n    mergeRequestParams(params1, params2) {\n        return {\n            ...this.baseApiParams,\n            ...params1,\n            ...(params2 || {}),\n            headers: {\n                ...(this.baseApiParams.headers || {}),\n                ...(params1.headers || {}),\n                ...((params2 && params2.headers) || {}),\n            },\n        };\n    }\n}\n/**\n * @title cosmos/staking/v1beta1/staking.proto\n * @version version not set\n */\nexport class Api extends HttpClient {\n    constructor() {\n        super(...arguments);\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryDelegatorDelegations\n         * @summary DelegatorDelegations queries all delegations of a given delegator address.\n         * @request GET:/cosmos/staking/v1beta1/delegations/{delegatorAddr}\n         */\n        this.queryDelegatorDelegations = (delegatorAddr, query, params = {}) => this.request({\n            path: `/cosmos/staking/v1beta1/delegations/${delegatorAddr}`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryRedelegations\n         * @summary Redelegations queries redelegations of given address.\n         * @request GET:/cosmos/staking/v1beta1/delegators/{delegatorAddr}/redelegations\n         */\n        this.queryRedelegations = (delegatorAddr, query, params = {}) => this.request({\n            path: `/cosmos/staking/v1beta1/delegators/${delegatorAddr}/redelegations`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n       * No description\n       *\n       * @tags Query\n       * @name QueryDelegatorUnbondingDelegations\n       * @summary DelegatorUnbondingDelegations queries all unbonding delegations of a given\n      delegator address.\n       * @request GET:/cosmos/staking/v1beta1/delegators/{delegatorAddr}/unbonding_delegations\n       */\n        this.queryDelegatorUnbondingDelegations = (delegatorAddr, query, params = {}) => this.request({\n            path: `/cosmos/staking/v1beta1/delegators/${delegatorAddr}/unbonding_delegations`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n       * No description\n       *\n       * @tags Query\n       * @name QueryDelegatorValidators\n       * @summary DelegatorValidators queries all validators info for given delegator\n      address.\n       * @request GET:/cosmos/staking/v1beta1/delegators/{delegatorAddr}/validators\n       */\n        this.queryDelegatorValidators = (delegatorAddr, query, params = {}) => this.request({\n            path: `/cosmos/staking/v1beta1/delegators/${delegatorAddr}/validators`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n       * No description\n       *\n       * @tags Query\n       * @name QueryDelegatorValidator\n       * @summary DelegatorValidator queries validator info for given delegator validator\n      pair.\n       * @request GET:/cosmos/staking/v1beta1/delegators/{delegatorAddr}/validators/{validatorAddr}\n       */\n        this.queryDelegatorValidator = (delegatorAddr, validatorAddr, params = {}) => this.request({\n            path: `/cosmos/staking/v1beta1/delegators/${delegatorAddr}/validators/${validatorAddr}`,\n            method: \"GET\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryHistoricalInfo\n         * @summary HistoricalInfo queries the historical info for given height.\n         * @request GET:/cosmos/staking/v1beta1/historical_info/{height}\n         */\n        this.queryHistoricalInfo = (height, params = {}) => this.request({\n            path: `/cosmos/staking/v1beta1/historical_info/${height}`,\n            method: \"GET\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryParams\n         * @summary Parameters queries the staking parameters.\n         * @request GET:/cosmos/staking/v1beta1/params\n         */\n        this.queryParams = (params = {}) => this.request({\n            path: `/cosmos/staking/v1beta1/params`,\n            method: \"GET\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryPool\n         * @summary Pool queries the pool info.\n         * @request GET:/cosmos/staking/v1beta1/pool\n         */\n        this.queryPool = (params = {}) => this.request({\n            path: `/cosmos/staking/v1beta1/pool`,\n            method: \"GET\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryValidators\n         * @summary Validators queries all validators that match the given status.\n         * @request GET:/cosmos/staking/v1beta1/validators\n         */\n        this.queryValidators = (query, params = {}) => this.request({\n            path: `/cosmos/staking/v1beta1/validators`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryValidator\n         * @summary Validator queries validator info for given validator address.\n         * @request GET:/cosmos/staking/v1beta1/validators/{validatorAddr}\n         */\n        this.queryValidator = (validatorAddr, params = {}) => this.request({\n            path: `/cosmos/staking/v1beta1/validators/${validatorAddr}`,\n            method: \"GET\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryValidatorDelegations\n         * @summary ValidatorDelegations queries delegate info for given validator.\n         * @request GET:/cosmos/staking/v1beta1/validators/{validatorAddr}/delegations\n         */\n        this.queryValidatorDelegations = (validatorAddr, query, params = {}) => this.request({\n            path: `/cosmos/staking/v1beta1/validators/${validatorAddr}/delegations`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryDelegation\n         * @summary Delegation queries delegate info for given validator delegator pair.\n         * @request GET:/cosmos/staking/v1beta1/validators/{validatorAddr}/delegations/{delegatorAddr}\n         */\n        this.queryDelegation = (validatorAddr, delegatorAddr, params = {}) => this.request({\n            path: `/cosmos/staking/v1beta1/validators/${validatorAddr}/delegations/${delegatorAddr}`,\n            method: \"GET\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n       * No description\n       *\n       * @tags Query\n       * @name QueryUnbondingDelegation\n       * @summary UnbondingDelegation queries unbonding info for given validator delegator\n      pair.\n       * @request GET:/cosmos/staking/v1beta1/validators/{validatorAddr}/delegations/{delegatorAddr}/unbonding_delegation\n       */\n        this.queryUnbondingDelegation = (validatorAddr, delegatorAddr, params = {}) => this.request({\n            path: `/cosmos/staking/v1beta1/validators/${validatorAddr}/delegations/${delegatorAddr}/unbonding_delegation`,\n            method: \"GET\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryValidatorUnbondingDelegations\n         * @summary ValidatorUnbondingDelegations queries unbonding delegations of a validator.\n         * @request GET:/cosmos/staking/v1beta1/validators/{validatorAddr}/unbonding_delegations\n         */\n        this.queryValidatorUnbondingDelegations = (validatorAddr, query, params = {}) => this.request({\n            path: `/cosmos/staking/v1beta1/validators/${validatorAddr}/unbonding_delegations`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n    }\n}\n"]}]}