{"remainingRequest":"/home/saptarsi/go/src/shiaa3/vue/node_modules/babel-loader/lib/index.js!/home/saptarsi/go/src/shiaa3/vue/node_modules/eslint-loader/index.js??ref--13-0!/home/saptarsi/go/src/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.slashing.v1beta1/module/index.js","dependencies":[{"path":"/home/saptarsi/go/src/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.slashing.v1beta1/module/index.js","mtime":1616099062174},{"path":"/home/saptarsi/go/src/shiaa3/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/saptarsi/go/src/shiaa3/vue/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/saptarsi/go/src/shiaa3/vue/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUvc2FwdGFyc2kvZ28vc3JjL3NoaWFhMy92dWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwovLyBUSElTIEZJTEUgSVMgR0VORVJBVEVEIEFVVE9NQVRJQ0FMTFkuIERPIE5PVCBNT0RJRlkuCmltcG9ydCB7IFNpZ25pbmdTdGFyZ2F0ZUNsaWVudCB9IGZyb20gIkBjb3NtanMvc3RhcmdhdGUiOwppbXBvcnQgeyBSZWdpc3RyeSB9IGZyb20gIkBjb3NtanMvcHJvdG8tc2lnbmluZyI7CmltcG9ydCB7IEFwaSB9IGZyb20gIi4vcmVzdCI7CmltcG9ydCB7IE1zZ1VuamFpbCB9IGZyb20gIi4vdHlwZXMvY29zbW9zL3NsYXNoaW5nL3YxYmV0YTEvdHgiOwp2YXIgdHlwZXMgPSBbWyIvY29zbW9zLnNsYXNoaW5nLnYxYmV0YTEuTXNnVW5qYWlsIiwgTXNnVW5qYWlsXV07CnZhciByZWdpc3RyeSA9IG5ldyBSZWdpc3RyeSh0eXBlcyk7CnZhciBkZWZhdWx0RmVlID0gewogIGFtb3VudDogW10sCiAgZ2FzOiAiMjAwMDAwIgp9OwoKdmFyIHR4Q2xpZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSh3YWxsZXQpIHsKICAgIHZhciBfcmVmMiwKICAgICAgICBhZGRyLAogICAgICAgIGNsaWVudCwKICAgICAgICBhZGRyZXNzLAogICAgICAgIF9hcmdzID0gYXJndW1lbnRzOwoKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX3JlZjIgPSBfYXJncy5sZW5ndGggPiAxICYmIF9hcmdzWzFdICE9PSB1bmRlZmluZWQgPyBfYXJnc1sxXSA6IHsKICAgICAgICAgICAgICBhZGRyOiAiaHR0cDovL2xvY2FsaG9zdDoyNjY1NyIKICAgICAgICAgICAgfSwgYWRkciA9IF9yZWYyLmFkZHI7CgogICAgICAgICAgICBpZiAod2FsbGV0KSB7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigid2FsbGV0IGlzIHJlcXVpcmVkIik7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgcmV0dXJuIFNpZ25pbmdTdGFyZ2F0ZUNsaWVudC5jb25uZWN0V2l0aFNpZ25lcihhZGRyLCB3YWxsZXQsIHsKICAgICAgICAgICAgICByZWdpc3RyeTogcmVnaXN0cnkKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICBjbGllbnQgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgcmV0dXJuIHdhbGxldC5nZXRBY2NvdW50cygpOwoKICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgYWRkcmVzcyA9IF9jb250ZXh0LnNlbnRbMF0uYWRkcmVzczsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgIHNpZ25BbmRCcm9hZGNhc3Q6IGZ1bmN0aW9uIHNpZ25BbmRCcm9hZGNhc3QobXNncywgX3JlZjMpIHsKICAgICAgICAgICAgICAgIHZhciBfcmVmMyRmZWUgPSBfcmVmMy5mZWUsCiAgICAgICAgICAgICAgICAgICAgZmVlID0gX3JlZjMkZmVlID09PSB2b2lkIDAgPyBkZWZhdWx0RmVlIDogX3JlZjMkZmVlLAogICAgICAgICAgICAgICAgICAgIF9yZWYzJG1lbW8gPSBfcmVmMy5tZW1vLAogICAgICAgICAgICAgICAgICAgIG1lbW8gPSBfcmVmMyRtZW1vID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjMkbWVtbzsKICAgICAgICAgICAgICAgIHJldHVybiBtZW1vID8gY2xpZW50LnNpZ25BbmRCcm9hZGNhc3QoYWRkcmVzcywgbXNncywgZmVlLCBtZW1vKSA6IGNsaWVudC5zaWduQW5kQnJvYWRjYXN0KGFkZHJlc3MsIG1zZ3MsIGZlZSk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBtc2dVbmphaWw6IGZ1bmN0aW9uIG1zZ1VuamFpbChkYXRhKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICB0eXBlVXJsOiAiL2Nvc21vcy5zbGFzaGluZy52MWJldGExLk1zZ1VuamFpbCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiB0eENsaWVudChfeCkgewogICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7Cgp2YXIgcXVlcnlDbGllbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmNCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICB2YXIgX3JlZjUsCiAgICAgICAgYWRkciwKICAgICAgICBfYXJnczIgPSBhcmd1bWVudHM7CgogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX3JlZjUgPSBfYXJnczIubGVuZ3RoID4gMCAmJiBfYXJnczJbMF0gIT09IHVuZGVmaW5lZCA/IF9hcmdzMlswXSA6IHsKICAgICAgICAgICAgICBhZGRyOiAiaHR0cDovL2xvY2FsaG9zdDoxMzE3IgogICAgICAgICAgICB9LCBhZGRyID0gX3JlZjUuYWRkcjsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIG5ldyBBcGkoewogICAgICAgICAgICAgIGJhc2VVcmw6IGFkZHIKICAgICAgICAgICAgfSkpOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTIpOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIHF1ZXJ5Q2xpZW50KCkgewogICAgcmV0dXJuIF9yZWY0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKZXhwb3J0IHsgdHhDbGllbnQsIHF1ZXJ5Q2xpZW50IH07"},{"version":3,"sources":["/home/saptarsi/go/src/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.slashing.v1beta1/module/index.js"],"names":["SigningStargateClient","Registry","Api","MsgUnjail","types","registry","defaultFee","amount","gas","txClient","wallet","addr","Error","connectWithSigner","client","getAccounts","address","signAndBroadcast","msgs","fee","memo","msgUnjail","data","typeUrl","value","queryClient","baseUrl"],"mappings":";;AAAA;AACA,SAASA,qBAAT,QAAsC,kBAAtC;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,SAAT,QAA0B,oCAA1B;AACA,IAAMC,KAAK,GAAG,CACV,CAAC,oCAAD,EAAuCD,SAAvC,CADU,CAAd;AAGA,IAAME,QAAQ,GAAG,IAAIJ,QAAJ,CAAaG,KAAb,CAAjB;AACA,IAAME,UAAU,GAAG;AACfC,EAAAA,MAAM,EAAE,EADO;AAEfC,EAAAA,GAAG,EAAE;AAFU,CAAnB;;AAIA,IAAMC,QAAQ;AAAA,qEAAG,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4EAAgC;AAAEC,cAAAA,IAAI,EAAE;AAAR,aAAhC,EAAuBA,IAAvB,SAAiBA,IAAjB;;AAAA,gBACRD,MADQ;AAAA;AAAA;AAAA;;AAAA,kBAEH,IAAIE,KAAJ,CAAU,oBAAV,CAFG;;AAAA;AAAA;AAAA,mBAGQZ,qBAAqB,CAACa,iBAAtB,CAAwCF,IAAxC,EAA8CD,MAA9C,EAAsD;AAAEL,cAAAA,QAAQ,EAARA;AAAF,aAAtD,CAHR;;AAAA;AAGPS,YAAAA,MAHO;AAAA;AAAA,mBAIcJ,MAAM,CAACK,WAAP,EAJd;;AAAA;AAILC,YAAAA,OAJK,iBAIoC,CAJpC,EAILA,OAJK;AAAA,6CAKN;AACHC,cAAAA,gBAAgB,EAAE,0BAACC,IAAD;AAAA,sCAASC,GAAT;AAAA,oBAASA,GAAT,0BAAeb,UAAf;AAAA,uCAA2Bc,IAA3B;AAAA,oBAA2BA,IAA3B,2BAAkC,IAAlC;AAAA,uBAA6CA,IAAI,GAAGN,MAAM,CAACG,gBAAP,CAAwBD,OAAxB,EAAiCE,IAAjC,EAAuCC,GAAvC,EAA4CC,IAA5C,CAAH,GAAuDN,MAAM,CAACG,gBAAP,CAAwBD,OAAxB,EAAiCE,IAAjC,EAAuCC,GAAvC,CAAxG;AAAA,eADf;AAEHE,cAAAA,SAAS,EAAE,mBAACC,IAAD;AAAA,uBAAW;AAAEC,kBAAAA,OAAO,EAAE,oCAAX;AAAiDC,kBAAAA,KAAK,EAAEF;AAAxD,iBAAX;AAAA;AAFR,aALM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARb,QAAQ;AAAA;AAAA;AAAA,GAAd;;AAUA,IAAMgB,WAAW;AAAA,sEAAG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,+EAAwB;AAAEd,cAAAA,IAAI,EAAE;AAAR,aAAxB,EAAeA,IAAf,SAASA,IAAT;AAAA,8CACT,IAAIT,GAAJ,CAAQ;AAAEwB,cAAAA,OAAO,EAAEf;AAAX,aAAR,CADS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXc,WAAW;AAAA;AAAA;AAAA,GAAjB;;AAGA,SAAShB,QAAT,EAAmBgB,WAAnB","sourcesContent":["// THIS FILE IS GENERATED AUTOMATICALLY. DO NOT MODIFY.\nimport { SigningStargateClient } from \"@cosmjs/stargate\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { Api } from \"./rest\";\nimport { MsgUnjail } from \"./types/cosmos/slashing/v1beta1/tx\";\nconst types = [\n    [\"/cosmos.slashing.v1beta1.MsgUnjail\", MsgUnjail],\n];\nconst registry = new Registry(types);\nconst defaultFee = {\n    amount: [],\n    gas: \"200000\",\n};\nconst txClient = async (wallet, { addr: addr } = { addr: \"http://localhost:26657\" }) => {\n    if (!wallet)\n        throw new Error(\"wallet is required\");\n    const client = await SigningStargateClient.connectWithSigner(addr, wallet, { registry });\n    const { address } = (await wallet.getAccounts())[0];\n    return {\n        signAndBroadcast: (msgs, { fee = defaultFee, memo = null }) => memo ? client.signAndBroadcast(address, msgs, fee, memo) : client.signAndBroadcast(address, msgs, fee),\n        msgUnjail: (data) => ({ typeUrl: \"/cosmos.slashing.v1beta1.MsgUnjail\", value: data }),\n    };\n};\nconst queryClient = async ({ addr: addr } = { addr: \"http://localhost:1317\" }) => {\n    return new Api({ baseUrl: addr });\n};\nexport { txClient, queryClient, };\n"]}]}