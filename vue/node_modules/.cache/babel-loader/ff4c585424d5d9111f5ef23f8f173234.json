{"remainingRequest":"/home/saptarsi/go/src/shiaa3/vue/node_modules/babel-loader/lib/index.js!/home/saptarsi/go/src/shiaa3/vue/node_modules/eslint-loader/index.js??ref--13-0!/home/saptarsi/go/src/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.staking.v1beta1/index.js","dependencies":[{"path":"/home/saptarsi/go/src/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.staking.v1beta1/index.js","mtime":1616099062222},{"path":"/home/saptarsi/go/src/shiaa3/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/saptarsi/go/src/shiaa3/vue/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/saptarsi/go/src/shiaa3/vue/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/saptarsi/go/src/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.staking.v1beta1/index.js"],"names":["txClient","queryClient","SpVuexError","HistoricalInfo","CommissionRates","Commission","Description","Validator","ValAddresses","DVPair","DVPairs","DVVTriplet","DVVTriplets","Delegation","UnbondingDelegation","UnbondingDelegationEntry","RedelegationEntry","Redelegation","Params","DelegationResponse","RedelegationEntryResponse","RedelegationResponse","Pool","LastValidatorPower","initTxClient","vuexGetters","addr","initQueryClient","getStructure","template","structure","fields","Object","entries","key","value","field","name","type","push","getDefaultState","Validators","ValidatorDelegations","ValidatorUnbondingDelegations","DelegatorDelegations","DelegatorUnbondingDelegations","Redelegations","DelegatorValidators","DelegatorValidator","_Structure","fromPartial","_Subscriptions","Set","state","namespaced","mutations","RESET_STATE","assign","QUERY","query","JSON","stringify","SUBSCRIBE","subscription","add","UNSUBSCRIBE","delete","getters","getValidators","params","getValidator","getValidatorDelegations","getValidatorUnbondingDelegations","getDelegation","getUnbondingDelegation","getDelegatorDelegations","getDelegatorUnbondingDelegations","getRedelegations","getDelegatorValidators","getDelegatorValidator","getHistoricalInfo","getPool","getParams","getTypeStructure","actions","init","dispatch","rootGetters","console","log","on","resetState","commit","unsubscribe","StoreUpdate","forEach","action","payload","QueryValidators","options","subscribe","all","queryValidators","data","pagination","nextKey","next_values","keys","prop","Array","isArray","error","QueryValidator","queryValidator","validator_addr","QueryValidatorDelegations","queryValidatorDelegations","QueryValidatorUnbondingDelegations","queryValidatorUnbondingDelegations","QueryDelegation","queryDelegation","delegator_addr","QueryUnbondingDelegation","queryUnbondingDelegation","QueryDelegatorDelegations","queryDelegatorDelegations","QueryDelegatorUnbondingDelegations","queryDelegatorUnbondingDelegations","QueryRedelegations","queryRedelegations","QueryDelegatorValidators","queryDelegatorValidators","QueryDelegatorValidator","queryDelegatorValidator","QueryHistoricalInfo","queryHistoricalInfo","height","QueryPool","queryPool","QueryParams","queryParams","sendMsgDelegate","fee","memo","msgDelegate","msg","signAndBroadcast","amount","gas","result","toString","sendMsgEditValidator","msgEditValidator","sendMsgCreateValidator","msgCreateValidator","sendMsgUndelegate","msgUndelegate","sendMsgBeginRedelegate","msgBeginRedelegate","MsgDelegate","MsgEditValidator","MsgCreateValidator","MsgUndelegate","MsgBeginRedelegate"],"mappings":"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","sourcesContent":["import { txClient, queryClient } from './module';\n// @ts-ignore\nimport { SpVuexError } from '@starport/vuex';\nimport { HistoricalInfo } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { CommissionRates } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { Commission } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { Description } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { Validator } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { ValAddresses } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { DVPair } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { DVPairs } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { DVVTriplet } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { DVVTriplets } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { Delegation } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { UnbondingDelegation } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { UnbondingDelegationEntry } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { RedelegationEntry } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { Redelegation } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { Params } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { DelegationResponse } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { RedelegationEntryResponse } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { RedelegationResponse } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { Pool } from \"./module/types/cosmos/staking/v1beta1/staking\";\nimport { LastValidatorPower } from \"./module/types/cosmos/staking/v1beta1/genesis\";\nasync function initTxClient(vuexGetters) {\n    return await txClient(vuexGetters['common/wallet/signer'], {\n        addr: vuexGetters['common/env/apiTendermint']\n    });\n}\nasync function initQueryClient(vuexGetters) {\n    return await queryClient({\n        addr: vuexGetters['common/env/apiCosmos']\n    });\n}\nfunction getStructure(template) {\n    let structure = { fields: [] };\n    for (const [key, value] of Object.entries(template)) {\n        let field = {};\n        field.name = key;\n        field.type = typeof value;\n        structure.fields.push(field);\n    }\n    return structure;\n}\nconst getDefaultState = () => {\n    return {\n        Validators: {},\n        Validator: {},\n        ValidatorDelegations: {},\n        ValidatorUnbondingDelegations: {},\n        Delegation: {},\n        UnbondingDelegation: {},\n        DelegatorDelegations: {},\n        DelegatorUnbondingDelegations: {},\n        Redelegations: {},\n        DelegatorValidators: {},\n        DelegatorValidator: {},\n        HistoricalInfo: {},\n        Pool: {},\n        Params: {},\n        _Structure: {\n            HistoricalInfo: getStructure(HistoricalInfo.fromPartial({})),\n            CommissionRates: getStructure(CommissionRates.fromPartial({})),\n            Commission: getStructure(Commission.fromPartial({})),\n            Description: getStructure(Description.fromPartial({})),\n            Validator: getStructure(Validator.fromPartial({})),\n            ValAddresses: getStructure(ValAddresses.fromPartial({})),\n            DVPair: getStructure(DVPair.fromPartial({})),\n            DVPairs: getStructure(DVPairs.fromPartial({})),\n            DVVTriplet: getStructure(DVVTriplet.fromPartial({})),\n            DVVTriplets: getStructure(DVVTriplets.fromPartial({})),\n            Delegation: getStructure(Delegation.fromPartial({})),\n            UnbondingDelegation: getStructure(UnbondingDelegation.fromPartial({})),\n            UnbondingDelegationEntry: getStructure(UnbondingDelegationEntry.fromPartial({})),\n            RedelegationEntry: getStructure(RedelegationEntry.fromPartial({})),\n            Redelegation: getStructure(Redelegation.fromPartial({})),\n            Params: getStructure(Params.fromPartial({})),\n            DelegationResponse: getStructure(DelegationResponse.fromPartial({})),\n            RedelegationEntryResponse: getStructure(RedelegationEntryResponse.fromPartial({})),\n            RedelegationResponse: getStructure(RedelegationResponse.fromPartial({})),\n            Pool: getStructure(Pool.fromPartial({})),\n            LastValidatorPower: getStructure(LastValidatorPower.fromPartial({})),\n        },\n        _Subscriptions: new Set(),\n    };\n};\n// initial state\nconst state = getDefaultState();\nexport default {\n    namespaced: true,\n    state,\n    mutations: {\n        RESET_STATE(state) {\n            Object.assign(state, getDefaultState());\n        },\n        QUERY(state, { query, key, value }) {\n            state[query][JSON.stringify(key)] = value;\n        },\n        SUBSCRIBE(state, subscription) {\n            state._Subscriptions.add(subscription);\n        },\n        UNSUBSCRIBE(state, subscription) {\n            state._Subscriptions.delete(subscription);\n        }\n    },\n    getters: {\n        getValidators: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Validators[JSON.stringify(params)] ?? {};\n        },\n        getValidator: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Validator[JSON.stringify(params)] ?? {};\n        },\n        getValidatorDelegations: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.ValidatorDelegations[JSON.stringify(params)] ?? {};\n        },\n        getValidatorUnbondingDelegations: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.ValidatorUnbondingDelegations[JSON.stringify(params)] ?? {};\n        },\n        getDelegation: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Delegation[JSON.stringify(params)] ?? {};\n        },\n        getUnbondingDelegation: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.UnbondingDelegation[JSON.stringify(params)] ?? {};\n        },\n        getDelegatorDelegations: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.DelegatorDelegations[JSON.stringify(params)] ?? {};\n        },\n        getDelegatorUnbondingDelegations: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.DelegatorUnbondingDelegations[JSON.stringify(params)] ?? {};\n        },\n        getRedelegations: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Redelegations[JSON.stringify(params)] ?? {};\n        },\n        getDelegatorValidators: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.DelegatorValidators[JSON.stringify(params)] ?? {};\n        },\n        getDelegatorValidator: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.DelegatorValidator[JSON.stringify(params)] ?? {};\n        },\n        getHistoricalInfo: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.HistoricalInfo[JSON.stringify(params)] ?? {};\n        },\n        getPool: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Pool[JSON.stringify(params)] ?? {};\n        },\n        getParams: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Params[JSON.stringify(params)] ?? {};\n        },\n        getTypeStructure: (state) => (type) => {\n            return state._Structure[type].fields;\n        }\n    },\n    actions: {\n        init({ dispatch, rootGetters }) {\n            console.log('init');\n            if (rootGetters['common/env/client']) {\n                rootGetters['common/env/client'].on('newblock', () => {\n                    dispatch('StoreUpdate');\n                });\n            }\n        },\n        resetState({ commit }) {\n            commit('RESET_STATE');\n        },\n        unsubscribe({ commit }, subscription) {\n            commit('UNSUBSCRIBE', subscription);\n        },\n        async StoreUpdate({ state, dispatch }) {\n            state._Subscriptions.forEach((subscription) => {\n                dispatch(subscription.action, subscription.payload);\n            });\n        },\n        async QueryValidators({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryValidators(query)).data : (await (await initQueryClient(rootGetters)).queryValidators()).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryValidators({ ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'Validators', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryValidators', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getValidators']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryValidators', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryValidator({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryValidator(key.validator_addr, query)).data : (await (await initQueryClient(rootGetters)).queryValidator(key.validator_addr)).data;\n                commit('QUERY', { query: 'Validator', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryValidator', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getValidator']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryValidator', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryValidatorDelegations({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryValidatorDelegations(key.validator_addr, query)).data : (await (await initQueryClient(rootGetters)).queryValidatorDelegations(key.validator_addr)).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryValidatorDelegations(key.validator_addr, { ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'ValidatorDelegations', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryValidatorDelegations', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getValidatorDelegations']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryValidatorDelegations', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryValidatorUnbondingDelegations({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryValidatorUnbondingDelegations(key.validator_addr, query)).data : (await (await initQueryClient(rootGetters)).queryValidatorUnbondingDelegations(key.validator_addr)).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryValidatorUnbondingDelegations(key.validator_addr, { ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'ValidatorUnbondingDelegations', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryValidatorUnbondingDelegations', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getValidatorUnbondingDelegations']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryValidatorUnbondingDelegations', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryDelegation({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryDelegation(key.validator_addr, key.delegator_addr, query)).data : (await (await initQueryClient(rootGetters)).queryDelegation(key.validator_addr, key.delegator_addr)).data;\n                commit('QUERY', { query: 'Delegation', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDelegation', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDelegation']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryDelegation', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryUnbondingDelegation({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryUnbondingDelegation(key.validator_addr, key.delegator_addr, query)).data : (await (await initQueryClient(rootGetters)).queryUnbondingDelegation(key.validator_addr, key.delegator_addr)).data;\n                commit('QUERY', { query: 'UnbondingDelegation', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryUnbondingDelegation', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getUnbondingDelegation']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryUnbondingDelegation', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryDelegatorDelegations({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryDelegatorDelegations(key.delegator_addr, query)).data : (await (await initQueryClient(rootGetters)).queryDelegatorDelegations(key.delegator_addr)).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryDelegatorDelegations(key.delegator_addr, { ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'DelegatorDelegations', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDelegatorDelegations', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDelegatorDelegations']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryDelegatorDelegations', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryDelegatorUnbondingDelegations({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryDelegatorUnbondingDelegations(key.delegator_addr, query)).data : (await (await initQueryClient(rootGetters)).queryDelegatorUnbondingDelegations(key.delegator_addr)).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryDelegatorUnbondingDelegations(key.delegator_addr, { ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'DelegatorUnbondingDelegations', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDelegatorUnbondingDelegations', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDelegatorUnbondingDelegations']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryDelegatorUnbondingDelegations', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryRedelegations({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryRedelegations(key.delegator_addr, query)).data : (await (await initQueryClient(rootGetters)).queryRedelegations(key.delegator_addr)).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryRedelegations(key.delegator_addr, { ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'Redelegations', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryRedelegations', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getRedelegations']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryRedelegations', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryDelegatorValidators({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryDelegatorValidators(key.delegator_addr, query)).data : (await (await initQueryClient(rootGetters)).queryDelegatorValidators(key.delegator_addr)).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryDelegatorValidators(key.delegator_addr, { ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'DelegatorValidators', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDelegatorValidators', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDelegatorValidators']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryDelegatorValidators', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryDelegatorValidator({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryDelegatorValidator(key.delegator_addr, key.validator_addr, query)).data : (await (await initQueryClient(rootGetters)).queryDelegatorValidator(key.delegator_addr, key.validator_addr)).data;\n                commit('QUERY', { query: 'DelegatorValidator', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDelegatorValidator', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDelegatorValidator']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryDelegatorValidator', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryHistoricalInfo({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryHistoricalInfo(key.height, query)).data : (await (await initQueryClient(rootGetters)).queryHistoricalInfo(key.height)).data;\n                commit('QUERY', { query: 'HistoricalInfo', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryHistoricalInfo', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getHistoricalInfo']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryHistoricalInfo', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryPool({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryPool(query)).data : (await (await initQueryClient(rootGetters)).queryPool()).data;\n                commit('QUERY', { query: 'Pool', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryPool', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getPool']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryPool', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryParams({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryParams(query)).data : (await (await initQueryClient(rootGetters)).queryParams()).data;\n                commit('QUERY', { query: 'Params', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryParams', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getParams']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryParams', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async sendMsgDelegate({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgDelegate(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgDelegate:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgDelegate:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgEditValidator({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgEditValidator(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgEditValidator:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgEditValidator:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgCreateValidator({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgCreateValidator(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgCreateValidator:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgCreateValidator:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgUndelegate({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgUndelegate(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgUndelegate:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgUndelegate:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgBeginRedelegate({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgBeginRedelegate(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgBeginRedelegate:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgBeginRedelegate:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async MsgDelegate({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgDelegate(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgDelegate:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgDelegate:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgEditValidator({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgEditValidator(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgEditValidator:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgEditValidator:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgCreateValidator({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgCreateValidator(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgCreateValidator:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgCreateValidator:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgUndelegate({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgUndelegate(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgUndelegate:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgUndelegate:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgBeginRedelegate({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgBeginRedelegate(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgBeginRedelegate:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgBeginRedelegate:Create', 'Could not create message.');\n                }\n            }\n        },\n    }\n};\n"]}]}