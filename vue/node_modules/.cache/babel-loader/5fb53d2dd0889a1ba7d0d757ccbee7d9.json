{"remainingRequest":"/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/babel-loader/lib/index.js!/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/eslint-loader/index.js??ref--13-0!/home/saptarsi/go/src/hackathon/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.base.abci.v1beta1/module/types/cosmos/base/abci/v1beta1/abci.js","dependencies":[{"path":"/home/saptarsi/go/src/hackathon/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.base.abci.v1beta1/module/types/cosmos/base/abci/v1beta1/abci.js","mtime":1616486558917},{"path":"/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/saptarsi/go/src/hackathon/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.base.abci.v1beta1/module/types/cosmos/base/abci/v1beta1/abci.js"],"names":["Long","util","configure","Writer","Reader","Any","Event","protobufPackage","baseTxResponse","height","txhash","codespace","code","data","rawLog","info","gasWanted","gasUsed","timestamp","TxResponse","encode","message","writer","create","uint32","int64","string","logs","v","ABCIMessageLog","fork","ldelim","tx","undefined","decode","input","length","reader","Uint8Array","end","len","pos","tag","longToNumber","push","skipType","fromJSON","object","Number","String","e","toJSON","obj","map","fromPartial","baseABCIMessageLog","msgIndex","log","events","StringEvent","baseStringEvent","type","attributes","Attribute","baseAttribute","key","value","baseGasInfo","GasInfo","uint64","baseResult","Result","bytes","bytesFromBase64","base64FromBytes","baseSimulationResponse","SimulationResponse","gasInfo","result","baseMsgData","msgType","MsgData","baseTxMsgData","TxMsgData","baseSearchTxsResult","totalCount","count","pageNumber","pageTotal","limit","SearchTxsResult","txs","globalThis","self","window","global","atob","b64","Buffer","from","toString","bin","arr","i","charCodeAt","btoa","byteLength","fromCharCode","join","long","gt","MAX_SAFE_INTEGER","Error","toNumber"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport * as Long from \"long\";\nimport { util, configure, Writer, Reader } from \"protobufjs/minimal\";\nimport { Any } from \"../../../../google/protobuf/any\";\nimport { Event } from \"../../../../tendermint/abci/types\";\nexport const protobufPackage = \"cosmos.base.abci.v1beta1\";\nconst baseTxResponse = {\n    height: 0,\n    txhash: \"\",\n    codespace: \"\",\n    code: 0,\n    data: \"\",\n    rawLog: \"\",\n    info: \"\",\n    gasWanted: 0,\n    gasUsed: 0,\n    timestamp: \"\",\n};\nexport const TxResponse = {\n    encode(message, writer = Writer.create()) {\n        if (message.height !== 0) {\n            writer.uint32(8).int64(message.height);\n        }\n        if (message.txhash !== \"\") {\n            writer.uint32(18).string(message.txhash);\n        }\n        if (message.codespace !== \"\") {\n            writer.uint32(26).string(message.codespace);\n        }\n        if (message.code !== 0) {\n            writer.uint32(32).uint32(message.code);\n        }\n        if (message.data !== \"\") {\n            writer.uint32(42).string(message.data);\n        }\n        if (message.rawLog !== \"\") {\n            writer.uint32(50).string(message.rawLog);\n        }\n        for (const v of message.logs) {\n            ABCIMessageLog.encode(v, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.info !== \"\") {\n            writer.uint32(66).string(message.info);\n        }\n        if (message.gasWanted !== 0) {\n            writer.uint32(72).int64(message.gasWanted);\n        }\n        if (message.gasUsed !== 0) {\n            writer.uint32(80).int64(message.gasUsed);\n        }\n        if (message.tx !== undefined) {\n            Any.encode(message.tx, writer.uint32(90).fork()).ldelim();\n        }\n        if (message.timestamp !== \"\") {\n            writer.uint32(98).string(message.timestamp);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseTxResponse };\n        message.logs = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.height = longToNumber(reader.int64());\n                    break;\n                case 2:\n                    message.txhash = reader.string();\n                    break;\n                case 3:\n                    message.codespace = reader.string();\n                    break;\n                case 4:\n                    message.code = reader.uint32();\n                    break;\n                case 5:\n                    message.data = reader.string();\n                    break;\n                case 6:\n                    message.rawLog = reader.string();\n                    break;\n                case 7:\n                    message.logs.push(ABCIMessageLog.decode(reader, reader.uint32()));\n                    break;\n                case 8:\n                    message.info = reader.string();\n                    break;\n                case 9:\n                    message.gasWanted = longToNumber(reader.int64());\n                    break;\n                case 10:\n                    message.gasUsed = longToNumber(reader.int64());\n                    break;\n                case 11:\n                    message.tx = Any.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.timestamp = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseTxResponse };\n        message.logs = [];\n        if (object.height !== undefined && object.height !== null) {\n            message.height = Number(object.height);\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.txhash !== undefined && object.txhash !== null) {\n            message.txhash = String(object.txhash);\n        }\n        else {\n            message.txhash = \"\";\n        }\n        if (object.codespace !== undefined && object.codespace !== null) {\n            message.codespace = String(object.codespace);\n        }\n        else {\n            message.codespace = \"\";\n        }\n        if (object.code !== undefined && object.code !== null) {\n            message.code = Number(object.code);\n        }\n        else {\n            message.code = 0;\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = String(object.data);\n        }\n        else {\n            message.data = \"\";\n        }\n        if (object.rawLog !== undefined && object.rawLog !== null) {\n            message.rawLog = String(object.rawLog);\n        }\n        else {\n            message.rawLog = \"\";\n        }\n        if (object.logs !== undefined && object.logs !== null) {\n            for (const e of object.logs) {\n                message.logs.push(ABCIMessageLog.fromJSON(e));\n            }\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = String(object.info);\n        }\n        else {\n            message.info = \"\";\n        }\n        if (object.gasWanted !== undefined && object.gasWanted !== null) {\n            message.gasWanted = Number(object.gasWanted);\n        }\n        else {\n            message.gasWanted = 0;\n        }\n        if (object.gasUsed !== undefined && object.gasUsed !== null) {\n            message.gasUsed = Number(object.gasUsed);\n        }\n        else {\n            message.gasUsed = 0;\n        }\n        if (object.tx !== undefined && object.tx !== null) {\n            message.tx = Any.fromJSON(object.tx);\n        }\n        else {\n            message.tx = undefined;\n        }\n        if (object.timestamp !== undefined && object.timestamp !== null) {\n            message.timestamp = String(object.timestamp);\n        }\n        else {\n            message.timestamp = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.height !== undefined && (obj.height = message.height);\n        message.txhash !== undefined && (obj.txhash = message.txhash);\n        message.codespace !== undefined && (obj.codespace = message.codespace);\n        message.code !== undefined && (obj.code = message.code);\n        message.data !== undefined && (obj.data = message.data);\n        message.rawLog !== undefined && (obj.rawLog = message.rawLog);\n        if (message.logs) {\n            obj.logs = message.logs.map((e) => e ? ABCIMessageLog.toJSON(e) : undefined);\n        }\n        else {\n            obj.logs = [];\n        }\n        message.info !== undefined && (obj.info = message.info);\n        message.gasWanted !== undefined && (obj.gasWanted = message.gasWanted);\n        message.gasUsed !== undefined && (obj.gasUsed = message.gasUsed);\n        message.tx !== undefined &&\n            (obj.tx = message.tx ? Any.toJSON(message.tx) : undefined);\n        message.timestamp !== undefined && (obj.timestamp = message.timestamp);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseTxResponse };\n        message.logs = [];\n        if (object.height !== undefined && object.height !== null) {\n            message.height = object.height;\n        }\n        else {\n            message.height = 0;\n        }\n        if (object.txhash !== undefined && object.txhash !== null) {\n            message.txhash = object.txhash;\n        }\n        else {\n            message.txhash = \"\";\n        }\n        if (object.codespace !== undefined && object.codespace !== null) {\n            message.codespace = object.codespace;\n        }\n        else {\n            message.codespace = \"\";\n        }\n        if (object.code !== undefined && object.code !== null) {\n            message.code = object.code;\n        }\n        else {\n            message.code = 0;\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = \"\";\n        }\n        if (object.rawLog !== undefined && object.rawLog !== null) {\n            message.rawLog = object.rawLog;\n        }\n        else {\n            message.rawLog = \"\";\n        }\n        if (object.logs !== undefined && object.logs !== null) {\n            for (const e of object.logs) {\n                message.logs.push(ABCIMessageLog.fromPartial(e));\n            }\n        }\n        if (object.info !== undefined && object.info !== null) {\n            message.info = object.info;\n        }\n        else {\n            message.info = \"\";\n        }\n        if (object.gasWanted !== undefined && object.gasWanted !== null) {\n            message.gasWanted = object.gasWanted;\n        }\n        else {\n            message.gasWanted = 0;\n        }\n        if (object.gasUsed !== undefined && object.gasUsed !== null) {\n            message.gasUsed = object.gasUsed;\n        }\n        else {\n            message.gasUsed = 0;\n        }\n        if (object.tx !== undefined && object.tx !== null) {\n            message.tx = Any.fromPartial(object.tx);\n        }\n        else {\n            message.tx = undefined;\n        }\n        if (object.timestamp !== undefined && object.timestamp !== null) {\n            message.timestamp = object.timestamp;\n        }\n        else {\n            message.timestamp = \"\";\n        }\n        return message;\n    },\n};\nconst baseABCIMessageLog = { msgIndex: 0, log: \"\" };\nexport const ABCIMessageLog = {\n    encode(message, writer = Writer.create()) {\n        if (message.msgIndex !== 0) {\n            writer.uint32(8).uint32(message.msgIndex);\n        }\n        if (message.log !== \"\") {\n            writer.uint32(18).string(message.log);\n        }\n        for (const v of message.events) {\n            StringEvent.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseABCIMessageLog };\n        message.events = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.msgIndex = reader.uint32();\n                    break;\n                case 2:\n                    message.log = reader.string();\n                    break;\n                case 3:\n                    message.events.push(StringEvent.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseABCIMessageLog };\n        message.events = [];\n        if (object.msgIndex !== undefined && object.msgIndex !== null) {\n            message.msgIndex = Number(object.msgIndex);\n        }\n        else {\n            message.msgIndex = 0;\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = String(object.log);\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(StringEvent.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.msgIndex !== undefined && (obj.msgIndex = message.msgIndex);\n        message.log !== undefined && (obj.log = message.log);\n        if (message.events) {\n            obj.events = message.events.map((e) => e ? StringEvent.toJSON(e) : undefined);\n        }\n        else {\n            obj.events = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseABCIMessageLog };\n        message.events = [];\n        if (object.msgIndex !== undefined && object.msgIndex !== null) {\n            message.msgIndex = object.msgIndex;\n        }\n        else {\n            message.msgIndex = 0;\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = object.log;\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(StringEvent.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseStringEvent = { type: \"\" };\nexport const StringEvent = {\n    encode(message, writer = Writer.create()) {\n        if (message.type !== \"\") {\n            writer.uint32(10).string(message.type);\n        }\n        for (const v of message.attributes) {\n            Attribute.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseStringEvent };\n        message.attributes = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.string();\n                    break;\n                case 2:\n                    message.attributes.push(Attribute.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseStringEvent };\n        message.attributes = [];\n        if (object.type !== undefined && object.type !== null) {\n            message.type = String(object.type);\n        }\n        else {\n            message.type = \"\";\n        }\n        if (object.attributes !== undefined && object.attributes !== null) {\n            for (const e of object.attributes) {\n                message.attributes.push(Attribute.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.type !== undefined && (obj.type = message.type);\n        if (message.attributes) {\n            obj.attributes = message.attributes.map((e) => e ? Attribute.toJSON(e) : undefined);\n        }\n        else {\n            obj.attributes = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseStringEvent };\n        message.attributes = [];\n        if (object.type !== undefined && object.type !== null) {\n            message.type = object.type;\n        }\n        else {\n            message.type = \"\";\n        }\n        if (object.attributes !== undefined && object.attributes !== null) {\n            for (const e of object.attributes) {\n                message.attributes.push(Attribute.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseAttribute = { key: \"\", value: \"\" };\nexport const Attribute = {\n    encode(message, writer = Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== \"\") {\n            writer.uint32(18).string(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseAttribute };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseAttribute };\n        if (object.key !== undefined && object.key !== null) {\n            message.key = String(object.key);\n        }\n        else {\n            message.key = \"\";\n        }\n        if (object.value !== undefined && object.value !== null) {\n            message.value = String(object.value);\n        }\n        else {\n            message.value = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.value !== undefined && (obj.value = message.value);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseAttribute };\n        if (object.key !== undefined && object.key !== null) {\n            message.key = object.key;\n        }\n        else {\n            message.key = \"\";\n        }\n        if (object.value !== undefined && object.value !== null) {\n            message.value = object.value;\n        }\n        else {\n            message.value = \"\";\n        }\n        return message;\n    },\n};\nconst baseGasInfo = { gasWanted: 0, gasUsed: 0 };\nexport const GasInfo = {\n    encode(message, writer = Writer.create()) {\n        if (message.gasWanted !== 0) {\n            writer.uint32(8).uint64(message.gasWanted);\n        }\n        if (message.gasUsed !== 0) {\n            writer.uint32(16).uint64(message.gasUsed);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseGasInfo };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.gasWanted = longToNumber(reader.uint64());\n                    break;\n                case 2:\n                    message.gasUsed = longToNumber(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseGasInfo };\n        if (object.gasWanted !== undefined && object.gasWanted !== null) {\n            message.gasWanted = Number(object.gasWanted);\n        }\n        else {\n            message.gasWanted = 0;\n        }\n        if (object.gasUsed !== undefined && object.gasUsed !== null) {\n            message.gasUsed = Number(object.gasUsed);\n        }\n        else {\n            message.gasUsed = 0;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.gasWanted !== undefined && (obj.gasWanted = message.gasWanted);\n        message.gasUsed !== undefined && (obj.gasUsed = message.gasUsed);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseGasInfo };\n        if (object.gasWanted !== undefined && object.gasWanted !== null) {\n            message.gasWanted = object.gasWanted;\n        }\n        else {\n            message.gasWanted = 0;\n        }\n        if (object.gasUsed !== undefined && object.gasUsed !== null) {\n            message.gasUsed = object.gasUsed;\n        }\n        else {\n            message.gasUsed = 0;\n        }\n        return message;\n    },\n};\nconst baseResult = { log: \"\" };\nexport const Result = {\n    encode(message, writer = Writer.create()) {\n        if (message.data.length !== 0) {\n            writer.uint32(10).bytes(message.data);\n        }\n        if (message.log !== \"\") {\n            writer.uint32(18).string(message.log);\n        }\n        for (const v of message.events) {\n            Event.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseResult };\n        message.events = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.data = reader.bytes();\n                    break;\n                case 2:\n                    message.log = reader.string();\n                    break;\n                case 3:\n                    message.events.push(Event.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseResult };\n        message.events = [];\n        if (object.data !== undefined && object.data !== null) {\n            message.data = bytesFromBase64(object.data);\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = String(object.log);\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(Event.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        message.log !== undefined && (obj.log = message.log);\n        if (message.events) {\n            obj.events = message.events.map((e) => (e ? Event.toJSON(e) : undefined));\n        }\n        else {\n            obj.events = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseResult };\n        message.events = [];\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = new Uint8Array();\n        }\n        if (object.log !== undefined && object.log !== null) {\n            message.log = object.log;\n        }\n        else {\n            message.log = \"\";\n        }\n        if (object.events !== undefined && object.events !== null) {\n            for (const e of object.events) {\n                message.events.push(Event.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseSimulationResponse = {};\nexport const SimulationResponse = {\n    encode(message, writer = Writer.create()) {\n        if (message.gasInfo !== undefined) {\n            GasInfo.encode(message.gasInfo, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.result !== undefined) {\n            Result.encode(message.result, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseSimulationResponse };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.gasInfo = GasInfo.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.result = Result.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseSimulationResponse };\n        if (object.gasInfo !== undefined && object.gasInfo !== null) {\n            message.gasInfo = GasInfo.fromJSON(object.gasInfo);\n        }\n        else {\n            message.gasInfo = undefined;\n        }\n        if (object.result !== undefined && object.result !== null) {\n            message.result = Result.fromJSON(object.result);\n        }\n        else {\n            message.result = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.gasInfo !== undefined &&\n            (obj.gasInfo = message.gasInfo\n                ? GasInfo.toJSON(message.gasInfo)\n                : undefined);\n        message.result !== undefined &&\n            (obj.result = message.result ? Result.toJSON(message.result) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseSimulationResponse };\n        if (object.gasInfo !== undefined && object.gasInfo !== null) {\n            message.gasInfo = GasInfo.fromPartial(object.gasInfo);\n        }\n        else {\n            message.gasInfo = undefined;\n        }\n        if (object.result !== undefined && object.result !== null) {\n            message.result = Result.fromPartial(object.result);\n        }\n        else {\n            message.result = undefined;\n        }\n        return message;\n    },\n};\nconst baseMsgData = { msgType: \"\" };\nexport const MsgData = {\n    encode(message, writer = Writer.create()) {\n        if (message.msgType !== \"\") {\n            writer.uint32(10).string(message.msgType);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseMsgData };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.msgType = reader.string();\n                    break;\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseMsgData };\n        if (object.msgType !== undefined && object.msgType !== null) {\n            message.msgType = String(object.msgType);\n        }\n        else {\n            message.msgType = \"\";\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = bytesFromBase64(object.data);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.msgType !== undefined && (obj.msgType = message.msgType);\n        message.data !== undefined &&\n            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseMsgData };\n        if (object.msgType !== undefined && object.msgType !== null) {\n            message.msgType = object.msgType;\n        }\n        else {\n            message.msgType = \"\";\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = object.data;\n        }\n        else {\n            message.data = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseTxMsgData = {};\nexport const TxMsgData = {\n    encode(message, writer = Writer.create()) {\n        for (const v of message.data) {\n            MsgData.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseTxMsgData };\n        message.data = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.data.push(MsgData.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseTxMsgData };\n        message.data = [];\n        if (object.data !== undefined && object.data !== null) {\n            for (const e of object.data) {\n                message.data.push(MsgData.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.data) {\n            obj.data = message.data.map((e) => (e ? MsgData.toJSON(e) : undefined));\n        }\n        else {\n            obj.data = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseTxMsgData };\n        message.data = [];\n        if (object.data !== undefined && object.data !== null) {\n            for (const e of object.data) {\n                message.data.push(MsgData.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseSearchTxsResult = {\n    totalCount: 0,\n    count: 0,\n    pageNumber: 0,\n    pageTotal: 0,\n    limit: 0,\n};\nexport const SearchTxsResult = {\n    encode(message, writer = Writer.create()) {\n        if (message.totalCount !== 0) {\n            writer.uint32(8).uint64(message.totalCount);\n        }\n        if (message.count !== 0) {\n            writer.uint32(16).uint64(message.count);\n        }\n        if (message.pageNumber !== 0) {\n            writer.uint32(24).uint64(message.pageNumber);\n        }\n        if (message.pageTotal !== 0) {\n            writer.uint32(32).uint64(message.pageTotal);\n        }\n        if (message.limit !== 0) {\n            writer.uint32(40).uint64(message.limit);\n        }\n        for (const v of message.txs) {\n            TxResponse.encode(v, writer.uint32(50).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseSearchTxsResult };\n        message.txs = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.totalCount = longToNumber(reader.uint64());\n                    break;\n                case 2:\n                    message.count = longToNumber(reader.uint64());\n                    break;\n                case 3:\n                    message.pageNumber = longToNumber(reader.uint64());\n                    break;\n                case 4:\n                    message.pageTotal = longToNumber(reader.uint64());\n                    break;\n                case 5:\n                    message.limit = longToNumber(reader.uint64());\n                    break;\n                case 6:\n                    message.txs.push(TxResponse.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseSearchTxsResult };\n        message.txs = [];\n        if (object.totalCount !== undefined && object.totalCount !== null) {\n            message.totalCount = Number(object.totalCount);\n        }\n        else {\n            message.totalCount = 0;\n        }\n        if (object.count !== undefined && object.count !== null) {\n            message.count = Number(object.count);\n        }\n        else {\n            message.count = 0;\n        }\n        if (object.pageNumber !== undefined && object.pageNumber !== null) {\n            message.pageNumber = Number(object.pageNumber);\n        }\n        else {\n            message.pageNumber = 0;\n        }\n        if (object.pageTotal !== undefined && object.pageTotal !== null) {\n            message.pageTotal = Number(object.pageTotal);\n        }\n        else {\n            message.pageTotal = 0;\n        }\n        if (object.limit !== undefined && object.limit !== null) {\n            message.limit = Number(object.limit);\n        }\n        else {\n            message.limit = 0;\n        }\n        if (object.txs !== undefined && object.txs !== null) {\n            for (const e of object.txs) {\n                message.txs.push(TxResponse.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.totalCount !== undefined && (obj.totalCount = message.totalCount);\n        message.count !== undefined && (obj.count = message.count);\n        message.pageNumber !== undefined && (obj.pageNumber = message.pageNumber);\n        message.pageTotal !== undefined && (obj.pageTotal = message.pageTotal);\n        message.limit !== undefined && (obj.limit = message.limit);\n        if (message.txs) {\n            obj.txs = message.txs.map((e) => (e ? TxResponse.toJSON(e) : undefined));\n        }\n        else {\n            obj.txs = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseSearchTxsResult };\n        message.txs = [];\n        if (object.totalCount !== undefined && object.totalCount !== null) {\n            message.totalCount = object.totalCount;\n        }\n        else {\n            message.totalCount = 0;\n        }\n        if (object.count !== undefined && object.count !== null) {\n            message.count = object.count;\n        }\n        else {\n            message.count = 0;\n        }\n        if (object.pageNumber !== undefined && object.pageNumber !== null) {\n            message.pageNumber = object.pageNumber;\n        }\n        else {\n            message.pageNumber = 0;\n        }\n        if (object.pageTotal !== undefined && object.pageTotal !== null) {\n            message.pageTotal = object.pageTotal;\n        }\n        else {\n            message.pageTotal = 0;\n        }\n        if (object.limit !== undefined && object.limit !== null) {\n            message.limit = object.limit;\n        }\n        else {\n            message.limit = 0;\n        }\n        if (object.txs !== undefined && object.txs !== null) {\n            for (const e of object.txs) {\n                message.txs.push(TxResponse.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob ||\n    ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa ||\n    ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (let i = 0; i < arr.byteLength; ++i) {\n        bin.push(String.fromCharCode(arr[i]));\n    }\n    return btoa(bin.join(\"\"));\n}\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (util.Long !== Long) {\n    util.Long = Long;\n    configure();\n}\n"]}]}