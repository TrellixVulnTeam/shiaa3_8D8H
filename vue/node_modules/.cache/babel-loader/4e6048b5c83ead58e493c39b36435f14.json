{"remainingRequest":"/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/babel-loader/lib/index.js!/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/eslint-loader/index.js??ref--13-0!/home/saptarsi/go/src/hackathon/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/ibc.core.connection.v1/module/types/confio/proofs.js","dependencies":[{"path":"/home/saptarsi/go/src/hackathon/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/ibc.core.connection.v1/module/types/confio/proofs.js","mtime":1616424851828},{"path":"/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/saptarsi/go/src/hackathon/shiaa3/vue/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/saptarsi/go/src/hackathon/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/ibc.core.connection.v1/module/types/confio/proofs.js"],"names":["Writer","Reader","protobufPackage","HashOp","hashOpFromJSON","object","NO_HASH","SHA256","SHA512","KECCAK","RIPEMD160","BITCOIN","UNRECOGNIZED","hashOpToJSON","LengthOp","lengthOpFromJSON","NO_PREFIX","VAR_PROTO","VAR_RLP","FIXED32_BIG","FIXED32_LITTLE","FIXED64_BIG","FIXED64_LITTLE","REQUIRE_32_BYTES","REQUIRE_64_BYTES","lengthOpToJSON","baseExistenceProof","ExistenceProof","encode","message","writer","create","key","length","uint32","bytes","value","leaf","undefined","LeafOp","fork","ldelim","path","v","InnerOp","decode","input","reader","Uint8Array","end","len","pos","tag","push","skipType","fromJSON","bytesFromBase64","e","toJSON","obj","base64FromBytes","map","fromPartial","baseNonExistenceProof","NonExistenceProof","left","right","baseCommitmentProof","CommitmentProof","exist","nonexist","batch","BatchProof","compressed","CompressedBatchProof","baseLeafOp","hash","prehashKey","prehashValue","int32","prefix","baseInnerOp","suffix","baseProofSpec","maxDepth","minDepth","ProofSpec","leafSpec","innerSpec","InnerSpec","Number","baseInnerSpec","childOrder","childSize","minPrefixLength","maxPrefixLength","emptyChild","end2","baseBatchProof","entries","BatchEntry","baseBatchEntry","baseCompressedBatchProof","CompressedBatchEntry","lookupInners","baseCompressedBatchEntry","CompressedExistenceProof","CompressedNonExistenceProof","baseCompressedExistenceProof","baseCompressedNonExistenceProof","globalThis","self","window","global","atob","b64","Buffer","from","toString","bin","arr","i","charCodeAt","btoa","byteLength","String","fromCharCode","join"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport { Writer, Reader } from \"protobufjs/minimal\";\nexport const protobufPackage = \"ics23\";\nexport var HashOp;\n(function (HashOp) {\n    /** NO_HASH - NO_HASH is the default if no data passed. Note this is an illegal argument some places. */\n    HashOp[HashOp[\"NO_HASH\"] = 0] = \"NO_HASH\";\n    HashOp[HashOp[\"SHA256\"] = 1] = \"SHA256\";\n    HashOp[HashOp[\"SHA512\"] = 2] = \"SHA512\";\n    HashOp[HashOp[\"KECCAK\"] = 3] = \"KECCAK\";\n    HashOp[HashOp[\"RIPEMD160\"] = 4] = \"RIPEMD160\";\n    /** BITCOIN - ripemd160(sha256(x)) */\n    HashOp[HashOp[\"BITCOIN\"] = 5] = \"BITCOIN\";\n    HashOp[HashOp[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(HashOp || (HashOp = {}));\nexport function hashOpFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"NO_HASH\":\n            return HashOp.NO_HASH;\n        case 1:\n        case \"SHA256\":\n            return HashOp.SHA256;\n        case 2:\n        case \"SHA512\":\n            return HashOp.SHA512;\n        case 3:\n        case \"KECCAK\":\n            return HashOp.KECCAK;\n        case 4:\n        case \"RIPEMD160\":\n            return HashOp.RIPEMD160;\n        case 5:\n        case \"BITCOIN\":\n            return HashOp.BITCOIN;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return HashOp.UNRECOGNIZED;\n    }\n}\nexport function hashOpToJSON(object) {\n    switch (object) {\n        case HashOp.NO_HASH:\n            return \"NO_HASH\";\n        case HashOp.SHA256:\n            return \"SHA256\";\n        case HashOp.SHA512:\n            return \"SHA512\";\n        case HashOp.KECCAK:\n            return \"KECCAK\";\n        case HashOp.RIPEMD160:\n            return \"RIPEMD160\";\n        case HashOp.BITCOIN:\n            return \"BITCOIN\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\n/**\n * LengthOp defines how to process the key and value of the LeafOp\n * to include length information. After encoding the length with the given\n * algorithm, the length will be prepended to the key and value bytes.\n * (Each one with it's own encoded length)\n */\nexport var LengthOp;\n(function (LengthOp) {\n    /** NO_PREFIX - NO_PREFIX don't include any length info */\n    LengthOp[LengthOp[\"NO_PREFIX\"] = 0] = \"NO_PREFIX\";\n    /** VAR_PROTO - VAR_PROTO uses protobuf (and go-amino) varint encoding of the length */\n    LengthOp[LengthOp[\"VAR_PROTO\"] = 1] = \"VAR_PROTO\";\n    /** VAR_RLP - VAR_RLP uses rlp int encoding of the length */\n    LengthOp[LengthOp[\"VAR_RLP\"] = 2] = \"VAR_RLP\";\n    /** FIXED32_BIG - FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer */\n    LengthOp[LengthOp[\"FIXED32_BIG\"] = 3] = \"FIXED32_BIG\";\n    /** FIXED32_LITTLE - FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer */\n    LengthOp[LengthOp[\"FIXED32_LITTLE\"] = 4] = \"FIXED32_LITTLE\";\n    /** FIXED64_BIG - FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer */\n    LengthOp[LengthOp[\"FIXED64_BIG\"] = 5] = \"FIXED64_BIG\";\n    /** FIXED64_LITTLE - FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer */\n    LengthOp[LengthOp[\"FIXED64_LITTLE\"] = 6] = \"FIXED64_LITTLE\";\n    /** REQUIRE_32_BYTES - REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output) */\n    LengthOp[LengthOp[\"REQUIRE_32_BYTES\"] = 7] = \"REQUIRE_32_BYTES\";\n    /** REQUIRE_64_BYTES - REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output) */\n    LengthOp[LengthOp[\"REQUIRE_64_BYTES\"] = 8] = \"REQUIRE_64_BYTES\";\n    LengthOp[LengthOp[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(LengthOp || (LengthOp = {}));\nexport function lengthOpFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"NO_PREFIX\":\n            return LengthOp.NO_PREFIX;\n        case 1:\n        case \"VAR_PROTO\":\n            return LengthOp.VAR_PROTO;\n        case 2:\n        case \"VAR_RLP\":\n            return LengthOp.VAR_RLP;\n        case 3:\n        case \"FIXED32_BIG\":\n            return LengthOp.FIXED32_BIG;\n        case 4:\n        case \"FIXED32_LITTLE\":\n            return LengthOp.FIXED32_LITTLE;\n        case 5:\n        case \"FIXED64_BIG\":\n            return LengthOp.FIXED64_BIG;\n        case 6:\n        case \"FIXED64_LITTLE\":\n            return LengthOp.FIXED64_LITTLE;\n        case 7:\n        case \"REQUIRE_32_BYTES\":\n            return LengthOp.REQUIRE_32_BYTES;\n        case 8:\n        case \"REQUIRE_64_BYTES\":\n            return LengthOp.REQUIRE_64_BYTES;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return LengthOp.UNRECOGNIZED;\n    }\n}\nexport function lengthOpToJSON(object) {\n    switch (object) {\n        case LengthOp.NO_PREFIX:\n            return \"NO_PREFIX\";\n        case LengthOp.VAR_PROTO:\n            return \"VAR_PROTO\";\n        case LengthOp.VAR_RLP:\n            return \"VAR_RLP\";\n        case LengthOp.FIXED32_BIG:\n            return \"FIXED32_BIG\";\n        case LengthOp.FIXED32_LITTLE:\n            return \"FIXED32_LITTLE\";\n        case LengthOp.FIXED64_BIG:\n            return \"FIXED64_BIG\";\n        case LengthOp.FIXED64_LITTLE:\n            return \"FIXED64_LITTLE\";\n        case LengthOp.REQUIRE_32_BYTES:\n            return \"REQUIRE_32_BYTES\";\n        case LengthOp.REQUIRE_64_BYTES:\n            return \"REQUIRE_64_BYTES\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nconst baseExistenceProof = {};\nexport const ExistenceProof = {\n    encode(message, writer = Writer.create()) {\n        if (message.key.length !== 0) {\n            writer.uint32(10).bytes(message.key);\n        }\n        if (message.value.length !== 0) {\n            writer.uint32(18).bytes(message.value);\n        }\n        if (message.leaf !== undefined) {\n            LeafOp.encode(message.leaf, writer.uint32(26).fork()).ldelim();\n        }\n        for (const v of message.path) {\n            InnerOp.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseExistenceProof };\n        message.path = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.value = reader.bytes();\n                    break;\n                case 3:\n                    message.leaf = LeafOp.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.path.push(InnerOp.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseExistenceProof };\n        message.path = [];\n        if (object.key !== undefined && object.key !== null) {\n            message.key = bytesFromBase64(object.key);\n        }\n        if (object.value !== undefined && object.value !== null) {\n            message.value = bytesFromBase64(object.value);\n        }\n        if (object.leaf !== undefined && object.leaf !== null) {\n            message.leaf = LeafOp.fromJSON(object.leaf);\n        }\n        else {\n            message.leaf = undefined;\n        }\n        if (object.path !== undefined && object.path !== null) {\n            for (const e of object.path) {\n                message.path.push(InnerOp.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined &&\n            (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n        message.value !== undefined &&\n            (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));\n        message.leaf !== undefined &&\n            (obj.leaf = message.leaf ? LeafOp.toJSON(message.leaf) : undefined);\n        if (message.path) {\n            obj.path = message.path.map((e) => (e ? InnerOp.toJSON(e) : undefined));\n        }\n        else {\n            obj.path = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseExistenceProof };\n        message.path = [];\n        if (object.key !== undefined && object.key !== null) {\n            message.key = object.key;\n        }\n        else {\n            message.key = new Uint8Array();\n        }\n        if (object.value !== undefined && object.value !== null) {\n            message.value = object.value;\n        }\n        else {\n            message.value = new Uint8Array();\n        }\n        if (object.leaf !== undefined && object.leaf !== null) {\n            message.leaf = LeafOp.fromPartial(object.leaf);\n        }\n        else {\n            message.leaf = undefined;\n        }\n        if (object.path !== undefined && object.path !== null) {\n            for (const e of object.path) {\n                message.path.push(InnerOp.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseNonExistenceProof = {};\nexport const NonExistenceProof = {\n    encode(message, writer = Writer.create()) {\n        if (message.key.length !== 0) {\n            writer.uint32(10).bytes(message.key);\n        }\n        if (message.left !== undefined) {\n            ExistenceProof.encode(message.left, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.right !== undefined) {\n            ExistenceProof.encode(message.right, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseNonExistenceProof };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.left = ExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.right = ExistenceProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseNonExistenceProof };\n        if (object.key !== undefined && object.key !== null) {\n            message.key = bytesFromBase64(object.key);\n        }\n        if (object.left !== undefined && object.left !== null) {\n            message.left = ExistenceProof.fromJSON(object.left);\n        }\n        else {\n            message.left = undefined;\n        }\n        if (object.right !== undefined && object.right !== null) {\n            message.right = ExistenceProof.fromJSON(object.right);\n        }\n        else {\n            message.right = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined &&\n            (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n        message.left !== undefined &&\n            (obj.left = message.left\n                ? ExistenceProof.toJSON(message.left)\n                : undefined);\n        message.right !== undefined &&\n            (obj.right = message.right\n                ? ExistenceProof.toJSON(message.right)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseNonExistenceProof };\n        if (object.key !== undefined && object.key !== null) {\n            message.key = object.key;\n        }\n        else {\n            message.key = new Uint8Array();\n        }\n        if (object.left !== undefined && object.left !== null) {\n            message.left = ExistenceProof.fromPartial(object.left);\n        }\n        else {\n            message.left = undefined;\n        }\n        if (object.right !== undefined && object.right !== null) {\n            message.right = ExistenceProof.fromPartial(object.right);\n        }\n        else {\n            message.right = undefined;\n        }\n        return message;\n    },\n};\nconst baseCommitmentProof = {};\nexport const CommitmentProof = {\n    encode(message, writer = Writer.create()) {\n        if (message.exist !== undefined) {\n            ExistenceProof.encode(message.exist, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.nonexist !== undefined) {\n            NonExistenceProof.encode(message.nonexist, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.batch !== undefined) {\n            BatchProof.encode(message.batch, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.compressed !== undefined) {\n            CompressedBatchProof.encode(message.compressed, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseCommitmentProof };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.exist = ExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.nonexist = NonExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.batch = BatchProof.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.compressed = CompressedBatchProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseCommitmentProof };\n        if (object.exist !== undefined && object.exist !== null) {\n            message.exist = ExistenceProof.fromJSON(object.exist);\n        }\n        else {\n            message.exist = undefined;\n        }\n        if (object.nonexist !== undefined && object.nonexist !== null) {\n            message.nonexist = NonExistenceProof.fromJSON(object.nonexist);\n        }\n        else {\n            message.nonexist = undefined;\n        }\n        if (object.batch !== undefined && object.batch !== null) {\n            message.batch = BatchProof.fromJSON(object.batch);\n        }\n        else {\n            message.batch = undefined;\n        }\n        if (object.compressed !== undefined && object.compressed !== null) {\n            message.compressed = CompressedBatchProof.fromJSON(object.compressed);\n        }\n        else {\n            message.compressed = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.exist !== undefined &&\n            (obj.exist = message.exist\n                ? ExistenceProof.toJSON(message.exist)\n                : undefined);\n        message.nonexist !== undefined &&\n            (obj.nonexist = message.nonexist\n                ? NonExistenceProof.toJSON(message.nonexist)\n                : undefined);\n        message.batch !== undefined &&\n            (obj.batch = message.batch\n                ? BatchProof.toJSON(message.batch)\n                : undefined);\n        message.compressed !== undefined &&\n            (obj.compressed = message.compressed\n                ? CompressedBatchProof.toJSON(message.compressed)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseCommitmentProof };\n        if (object.exist !== undefined && object.exist !== null) {\n            message.exist = ExistenceProof.fromPartial(object.exist);\n        }\n        else {\n            message.exist = undefined;\n        }\n        if (object.nonexist !== undefined && object.nonexist !== null) {\n            message.nonexist = NonExistenceProof.fromPartial(object.nonexist);\n        }\n        else {\n            message.nonexist = undefined;\n        }\n        if (object.batch !== undefined && object.batch !== null) {\n            message.batch = BatchProof.fromPartial(object.batch);\n        }\n        else {\n            message.batch = undefined;\n        }\n        if (object.compressed !== undefined && object.compressed !== null) {\n            message.compressed = CompressedBatchProof.fromPartial(object.compressed);\n        }\n        else {\n            message.compressed = undefined;\n        }\n        return message;\n    },\n};\nconst baseLeafOp = {\n    hash: 0,\n    prehashKey: 0,\n    prehashValue: 0,\n    length: 0,\n};\nexport const LeafOp = {\n    encode(message, writer = Writer.create()) {\n        if (message.hash !== 0) {\n            writer.uint32(8).int32(message.hash);\n        }\n        if (message.prehashKey !== 0) {\n            writer.uint32(16).int32(message.prehashKey);\n        }\n        if (message.prehashValue !== 0) {\n            writer.uint32(24).int32(message.prehashValue);\n        }\n        if (message.length !== 0) {\n            writer.uint32(32).int32(message.length);\n        }\n        if (message.prefix.length !== 0) {\n            writer.uint32(42).bytes(message.prefix);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseLeafOp };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.hash = reader.int32();\n                    break;\n                case 2:\n                    message.prehashKey = reader.int32();\n                    break;\n                case 3:\n                    message.prehashValue = reader.int32();\n                    break;\n                case 4:\n                    message.length = reader.int32();\n                    break;\n                case 5:\n                    message.prefix = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseLeafOp };\n        if (object.hash !== undefined && object.hash !== null) {\n            message.hash = hashOpFromJSON(object.hash);\n        }\n        else {\n            message.hash = 0;\n        }\n        if (object.prehashKey !== undefined && object.prehashKey !== null) {\n            message.prehashKey = hashOpFromJSON(object.prehashKey);\n        }\n        else {\n            message.prehashKey = 0;\n        }\n        if (object.prehashValue !== undefined && object.prehashValue !== null) {\n            message.prehashValue = hashOpFromJSON(object.prehashValue);\n        }\n        else {\n            message.prehashValue = 0;\n        }\n        if (object.length !== undefined && object.length !== null) {\n            message.length = lengthOpFromJSON(object.length);\n        }\n        else {\n            message.length = 0;\n        }\n        if (object.prefix !== undefined && object.prefix !== null) {\n            message.prefix = bytesFromBase64(object.prefix);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.hash !== undefined && (obj.hash = hashOpToJSON(message.hash));\n        message.prehashKey !== undefined &&\n            (obj.prehashKey = hashOpToJSON(message.prehashKey));\n        message.prehashValue !== undefined &&\n            (obj.prehashValue = hashOpToJSON(message.prehashValue));\n        message.length !== undefined &&\n            (obj.length = lengthOpToJSON(message.length));\n        message.prefix !== undefined &&\n            (obj.prefix = base64FromBytes(message.prefix !== undefined ? message.prefix : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseLeafOp };\n        if (object.hash !== undefined && object.hash !== null) {\n            message.hash = object.hash;\n        }\n        else {\n            message.hash = 0;\n        }\n        if (object.prehashKey !== undefined && object.prehashKey !== null) {\n            message.prehashKey = object.prehashKey;\n        }\n        else {\n            message.prehashKey = 0;\n        }\n        if (object.prehashValue !== undefined && object.prehashValue !== null) {\n            message.prehashValue = object.prehashValue;\n        }\n        else {\n            message.prehashValue = 0;\n        }\n        if (object.length !== undefined && object.length !== null) {\n            message.length = object.length;\n        }\n        else {\n            message.length = 0;\n        }\n        if (object.prefix !== undefined && object.prefix !== null) {\n            message.prefix = object.prefix;\n        }\n        else {\n            message.prefix = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseInnerOp = { hash: 0 };\nexport const InnerOp = {\n    encode(message, writer = Writer.create()) {\n        if (message.hash !== 0) {\n            writer.uint32(8).int32(message.hash);\n        }\n        if (message.prefix.length !== 0) {\n            writer.uint32(18).bytes(message.prefix);\n        }\n        if (message.suffix.length !== 0) {\n            writer.uint32(26).bytes(message.suffix);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseInnerOp };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.hash = reader.int32();\n                    break;\n                case 2:\n                    message.prefix = reader.bytes();\n                    break;\n                case 3:\n                    message.suffix = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseInnerOp };\n        if (object.hash !== undefined && object.hash !== null) {\n            message.hash = hashOpFromJSON(object.hash);\n        }\n        else {\n            message.hash = 0;\n        }\n        if (object.prefix !== undefined && object.prefix !== null) {\n            message.prefix = bytesFromBase64(object.prefix);\n        }\n        if (object.suffix !== undefined && object.suffix !== null) {\n            message.suffix = bytesFromBase64(object.suffix);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.hash !== undefined && (obj.hash = hashOpToJSON(message.hash));\n        message.prefix !== undefined &&\n            (obj.prefix = base64FromBytes(message.prefix !== undefined ? message.prefix : new Uint8Array()));\n        message.suffix !== undefined &&\n            (obj.suffix = base64FromBytes(message.suffix !== undefined ? message.suffix : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseInnerOp };\n        if (object.hash !== undefined && object.hash !== null) {\n            message.hash = object.hash;\n        }\n        else {\n            message.hash = 0;\n        }\n        if (object.prefix !== undefined && object.prefix !== null) {\n            message.prefix = object.prefix;\n        }\n        else {\n            message.prefix = new Uint8Array();\n        }\n        if (object.suffix !== undefined && object.suffix !== null) {\n            message.suffix = object.suffix;\n        }\n        else {\n            message.suffix = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseProofSpec = { maxDepth: 0, minDepth: 0 };\nexport const ProofSpec = {\n    encode(message, writer = Writer.create()) {\n        if (message.leafSpec !== undefined) {\n            LeafOp.encode(message.leafSpec, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.innerSpec !== undefined) {\n            InnerSpec.encode(message.innerSpec, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.maxDepth !== 0) {\n            writer.uint32(24).int32(message.maxDepth);\n        }\n        if (message.minDepth !== 0) {\n            writer.uint32(32).int32(message.minDepth);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseProofSpec };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.leafSpec = LeafOp.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.innerSpec = InnerSpec.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.maxDepth = reader.int32();\n                    break;\n                case 4:\n                    message.minDepth = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseProofSpec };\n        if (object.leafSpec !== undefined && object.leafSpec !== null) {\n            message.leafSpec = LeafOp.fromJSON(object.leafSpec);\n        }\n        else {\n            message.leafSpec = undefined;\n        }\n        if (object.innerSpec !== undefined && object.innerSpec !== null) {\n            message.innerSpec = InnerSpec.fromJSON(object.innerSpec);\n        }\n        else {\n            message.innerSpec = undefined;\n        }\n        if (object.maxDepth !== undefined && object.maxDepth !== null) {\n            message.maxDepth = Number(object.maxDepth);\n        }\n        else {\n            message.maxDepth = 0;\n        }\n        if (object.minDepth !== undefined && object.minDepth !== null) {\n            message.minDepth = Number(object.minDepth);\n        }\n        else {\n            message.minDepth = 0;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.leafSpec !== undefined &&\n            (obj.leafSpec = message.leafSpec\n                ? LeafOp.toJSON(message.leafSpec)\n                : undefined);\n        message.innerSpec !== undefined &&\n            (obj.innerSpec = message.innerSpec\n                ? InnerSpec.toJSON(message.innerSpec)\n                : undefined);\n        message.maxDepth !== undefined && (obj.maxDepth = message.maxDepth);\n        message.minDepth !== undefined && (obj.minDepth = message.minDepth);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseProofSpec };\n        if (object.leafSpec !== undefined && object.leafSpec !== null) {\n            message.leafSpec = LeafOp.fromPartial(object.leafSpec);\n        }\n        else {\n            message.leafSpec = undefined;\n        }\n        if (object.innerSpec !== undefined && object.innerSpec !== null) {\n            message.innerSpec = InnerSpec.fromPartial(object.innerSpec);\n        }\n        else {\n            message.innerSpec = undefined;\n        }\n        if (object.maxDepth !== undefined && object.maxDepth !== null) {\n            message.maxDepth = object.maxDepth;\n        }\n        else {\n            message.maxDepth = 0;\n        }\n        if (object.minDepth !== undefined && object.minDepth !== null) {\n            message.minDepth = object.minDepth;\n        }\n        else {\n            message.minDepth = 0;\n        }\n        return message;\n    },\n};\nconst baseInnerSpec = {\n    childOrder: 0,\n    childSize: 0,\n    minPrefixLength: 0,\n    maxPrefixLength: 0,\n    hash: 0,\n};\nexport const InnerSpec = {\n    encode(message, writer = Writer.create()) {\n        writer.uint32(10).fork();\n        for (const v of message.childOrder) {\n            writer.int32(v);\n        }\n        writer.ldelim();\n        if (message.childSize !== 0) {\n            writer.uint32(16).int32(message.childSize);\n        }\n        if (message.minPrefixLength !== 0) {\n            writer.uint32(24).int32(message.minPrefixLength);\n        }\n        if (message.maxPrefixLength !== 0) {\n            writer.uint32(32).int32(message.maxPrefixLength);\n        }\n        if (message.emptyChild.length !== 0) {\n            writer.uint32(42).bytes(message.emptyChild);\n        }\n        if (message.hash !== 0) {\n            writer.uint32(48).int32(message.hash);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseInnerSpec };\n        message.childOrder = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    if ((tag & 7) === 2) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2) {\n                            message.childOrder.push(reader.int32());\n                        }\n                    }\n                    else {\n                        message.childOrder.push(reader.int32());\n                    }\n                    break;\n                case 2:\n                    message.childSize = reader.int32();\n                    break;\n                case 3:\n                    message.minPrefixLength = reader.int32();\n                    break;\n                case 4:\n                    message.maxPrefixLength = reader.int32();\n                    break;\n                case 5:\n                    message.emptyChild = reader.bytes();\n                    break;\n                case 6:\n                    message.hash = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseInnerSpec };\n        message.childOrder = [];\n        if (object.childOrder !== undefined && object.childOrder !== null) {\n            for (const e of object.childOrder) {\n                message.childOrder.push(Number(e));\n            }\n        }\n        if (object.childSize !== undefined && object.childSize !== null) {\n            message.childSize = Number(object.childSize);\n        }\n        else {\n            message.childSize = 0;\n        }\n        if (object.minPrefixLength !== undefined &&\n            object.minPrefixLength !== null) {\n            message.minPrefixLength = Number(object.minPrefixLength);\n        }\n        else {\n            message.minPrefixLength = 0;\n        }\n        if (object.maxPrefixLength !== undefined &&\n            object.maxPrefixLength !== null) {\n            message.maxPrefixLength = Number(object.maxPrefixLength);\n        }\n        else {\n            message.maxPrefixLength = 0;\n        }\n        if (object.emptyChild !== undefined && object.emptyChild !== null) {\n            message.emptyChild = bytesFromBase64(object.emptyChild);\n        }\n        if (object.hash !== undefined && object.hash !== null) {\n            message.hash = hashOpFromJSON(object.hash);\n        }\n        else {\n            message.hash = 0;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.childOrder) {\n            obj.childOrder = message.childOrder.map((e) => e);\n        }\n        else {\n            obj.childOrder = [];\n        }\n        message.childSize !== undefined && (obj.childSize = message.childSize);\n        message.minPrefixLength !== undefined &&\n            (obj.minPrefixLength = message.minPrefixLength);\n        message.maxPrefixLength !== undefined &&\n            (obj.maxPrefixLength = message.maxPrefixLength);\n        message.emptyChild !== undefined &&\n            (obj.emptyChild = base64FromBytes(message.emptyChild !== undefined ? message.emptyChild : new Uint8Array()));\n        message.hash !== undefined && (obj.hash = hashOpToJSON(message.hash));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseInnerSpec };\n        message.childOrder = [];\n        if (object.childOrder !== undefined && object.childOrder !== null) {\n            for (const e of object.childOrder) {\n                message.childOrder.push(e);\n            }\n        }\n        if (object.childSize !== undefined && object.childSize !== null) {\n            message.childSize = object.childSize;\n        }\n        else {\n            message.childSize = 0;\n        }\n        if (object.minPrefixLength !== undefined &&\n            object.minPrefixLength !== null) {\n            message.minPrefixLength = object.minPrefixLength;\n        }\n        else {\n            message.minPrefixLength = 0;\n        }\n        if (object.maxPrefixLength !== undefined &&\n            object.maxPrefixLength !== null) {\n            message.maxPrefixLength = object.maxPrefixLength;\n        }\n        else {\n            message.maxPrefixLength = 0;\n        }\n        if (object.emptyChild !== undefined && object.emptyChild !== null) {\n            message.emptyChild = object.emptyChild;\n        }\n        else {\n            message.emptyChild = new Uint8Array();\n        }\n        if (object.hash !== undefined && object.hash !== null) {\n            message.hash = object.hash;\n        }\n        else {\n            message.hash = 0;\n        }\n        return message;\n    },\n};\nconst baseBatchProof = {};\nexport const BatchProof = {\n    encode(message, writer = Writer.create()) {\n        for (const v of message.entries) {\n            BatchEntry.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseBatchProof };\n        message.entries = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.entries.push(BatchEntry.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseBatchProof };\n        message.entries = [];\n        if (object.entries !== undefined && object.entries !== null) {\n            for (const e of object.entries) {\n                message.entries.push(BatchEntry.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.entries) {\n            obj.entries = message.entries.map((e) => e ? BatchEntry.toJSON(e) : undefined);\n        }\n        else {\n            obj.entries = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseBatchProof };\n        message.entries = [];\n        if (object.entries !== undefined && object.entries !== null) {\n            for (const e of object.entries) {\n                message.entries.push(BatchEntry.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseBatchEntry = {};\nexport const BatchEntry = {\n    encode(message, writer = Writer.create()) {\n        if (message.exist !== undefined) {\n            ExistenceProof.encode(message.exist, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.nonexist !== undefined) {\n            NonExistenceProof.encode(message.nonexist, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseBatchEntry };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.exist = ExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.nonexist = NonExistenceProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseBatchEntry };\n        if (object.exist !== undefined && object.exist !== null) {\n            message.exist = ExistenceProof.fromJSON(object.exist);\n        }\n        else {\n            message.exist = undefined;\n        }\n        if (object.nonexist !== undefined && object.nonexist !== null) {\n            message.nonexist = NonExistenceProof.fromJSON(object.nonexist);\n        }\n        else {\n            message.nonexist = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.exist !== undefined &&\n            (obj.exist = message.exist\n                ? ExistenceProof.toJSON(message.exist)\n                : undefined);\n        message.nonexist !== undefined &&\n            (obj.nonexist = message.nonexist\n                ? NonExistenceProof.toJSON(message.nonexist)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseBatchEntry };\n        if (object.exist !== undefined && object.exist !== null) {\n            message.exist = ExistenceProof.fromPartial(object.exist);\n        }\n        else {\n            message.exist = undefined;\n        }\n        if (object.nonexist !== undefined && object.nonexist !== null) {\n            message.nonexist = NonExistenceProof.fromPartial(object.nonexist);\n        }\n        else {\n            message.nonexist = undefined;\n        }\n        return message;\n    },\n};\nconst baseCompressedBatchProof = {};\nexport const CompressedBatchProof = {\n    encode(message, writer = Writer.create()) {\n        for (const v of message.entries) {\n            CompressedBatchEntry.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.lookupInners) {\n            InnerOp.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseCompressedBatchProof };\n        message.entries = [];\n        message.lookupInners = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.entries.push(CompressedBatchEntry.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.lookupInners.push(InnerOp.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseCompressedBatchProof };\n        message.entries = [];\n        message.lookupInners = [];\n        if (object.entries !== undefined && object.entries !== null) {\n            for (const e of object.entries) {\n                message.entries.push(CompressedBatchEntry.fromJSON(e));\n            }\n        }\n        if (object.lookupInners !== undefined && object.lookupInners !== null) {\n            for (const e of object.lookupInners) {\n                message.lookupInners.push(InnerOp.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.entries) {\n            obj.entries = message.entries.map((e) => e ? CompressedBatchEntry.toJSON(e) : undefined);\n        }\n        else {\n            obj.entries = [];\n        }\n        if (message.lookupInners) {\n            obj.lookupInners = message.lookupInners.map((e) => e ? InnerOp.toJSON(e) : undefined);\n        }\n        else {\n            obj.lookupInners = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseCompressedBatchProof };\n        message.entries = [];\n        message.lookupInners = [];\n        if (object.entries !== undefined && object.entries !== null) {\n            for (const e of object.entries) {\n                message.entries.push(CompressedBatchEntry.fromPartial(e));\n            }\n        }\n        if (object.lookupInners !== undefined && object.lookupInners !== null) {\n            for (const e of object.lookupInners) {\n                message.lookupInners.push(InnerOp.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseCompressedBatchEntry = {};\nexport const CompressedBatchEntry = {\n    encode(message, writer = Writer.create()) {\n        if (message.exist !== undefined) {\n            CompressedExistenceProof.encode(message.exist, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.nonexist !== undefined) {\n            CompressedNonExistenceProof.encode(message.nonexist, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseCompressedBatchEntry };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.exist = CompressedExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.nonexist = CompressedNonExistenceProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseCompressedBatchEntry };\n        if (object.exist !== undefined && object.exist !== null) {\n            message.exist = CompressedExistenceProof.fromJSON(object.exist);\n        }\n        else {\n            message.exist = undefined;\n        }\n        if (object.nonexist !== undefined && object.nonexist !== null) {\n            message.nonexist = CompressedNonExistenceProof.fromJSON(object.nonexist);\n        }\n        else {\n            message.nonexist = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.exist !== undefined &&\n            (obj.exist = message.exist\n                ? CompressedExistenceProof.toJSON(message.exist)\n                : undefined);\n        message.nonexist !== undefined &&\n            (obj.nonexist = message.nonexist\n                ? CompressedNonExistenceProof.toJSON(message.nonexist)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseCompressedBatchEntry };\n        if (object.exist !== undefined && object.exist !== null) {\n            message.exist = CompressedExistenceProof.fromPartial(object.exist);\n        }\n        else {\n            message.exist = undefined;\n        }\n        if (object.nonexist !== undefined && object.nonexist !== null) {\n            message.nonexist = CompressedNonExistenceProof.fromPartial(object.nonexist);\n        }\n        else {\n            message.nonexist = undefined;\n        }\n        return message;\n    },\n};\nconst baseCompressedExistenceProof = { path: 0 };\nexport const CompressedExistenceProof = {\n    encode(message, writer = Writer.create()) {\n        if (message.key.length !== 0) {\n            writer.uint32(10).bytes(message.key);\n        }\n        if (message.value.length !== 0) {\n            writer.uint32(18).bytes(message.value);\n        }\n        if (message.leaf !== undefined) {\n            LeafOp.encode(message.leaf, writer.uint32(26).fork()).ldelim();\n        }\n        writer.uint32(34).fork();\n        for (const v of message.path) {\n            writer.int32(v);\n        }\n        writer.ldelim();\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = {\n            ...baseCompressedExistenceProof,\n        };\n        message.path = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.value = reader.bytes();\n                    break;\n                case 3:\n                    message.leaf = LeafOp.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if ((tag & 7) === 2) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2) {\n                            message.path.push(reader.int32());\n                        }\n                    }\n                    else {\n                        message.path.push(reader.int32());\n                    }\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = {\n            ...baseCompressedExistenceProof,\n        };\n        message.path = [];\n        if (object.key !== undefined && object.key !== null) {\n            message.key = bytesFromBase64(object.key);\n        }\n        if (object.value !== undefined && object.value !== null) {\n            message.value = bytesFromBase64(object.value);\n        }\n        if (object.leaf !== undefined && object.leaf !== null) {\n            message.leaf = LeafOp.fromJSON(object.leaf);\n        }\n        else {\n            message.leaf = undefined;\n        }\n        if (object.path !== undefined && object.path !== null) {\n            for (const e of object.path) {\n                message.path.push(Number(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined &&\n            (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n        message.value !== undefined &&\n            (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));\n        message.leaf !== undefined &&\n            (obj.leaf = message.leaf ? LeafOp.toJSON(message.leaf) : undefined);\n        if (message.path) {\n            obj.path = message.path.map((e) => e);\n        }\n        else {\n            obj.path = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = {\n            ...baseCompressedExistenceProof,\n        };\n        message.path = [];\n        if (object.key !== undefined && object.key !== null) {\n            message.key = object.key;\n        }\n        else {\n            message.key = new Uint8Array();\n        }\n        if (object.value !== undefined && object.value !== null) {\n            message.value = object.value;\n        }\n        else {\n            message.value = new Uint8Array();\n        }\n        if (object.leaf !== undefined && object.leaf !== null) {\n            message.leaf = LeafOp.fromPartial(object.leaf);\n        }\n        else {\n            message.leaf = undefined;\n        }\n        if (object.path !== undefined && object.path !== null) {\n            for (const e of object.path) {\n                message.path.push(e);\n            }\n        }\n        return message;\n    },\n};\nconst baseCompressedNonExistenceProof = {};\nexport const CompressedNonExistenceProof = {\n    encode(message, writer = Writer.create()) {\n        if (message.key.length !== 0) {\n            writer.uint32(10).bytes(message.key);\n        }\n        if (message.left !== undefined) {\n            CompressedExistenceProof.encode(message.left, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.right !== undefined) {\n            CompressedExistenceProof.encode(message.right, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = {\n            ...baseCompressedNonExistenceProof,\n        };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.left = CompressedExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.right = CompressedExistenceProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = {\n            ...baseCompressedNonExistenceProof,\n        };\n        if (object.key !== undefined && object.key !== null) {\n            message.key = bytesFromBase64(object.key);\n        }\n        if (object.left !== undefined && object.left !== null) {\n            message.left = CompressedExistenceProof.fromJSON(object.left);\n        }\n        else {\n            message.left = undefined;\n        }\n        if (object.right !== undefined && object.right !== null) {\n            message.right = CompressedExistenceProof.fromJSON(object.right);\n        }\n        else {\n            message.right = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.key !== undefined &&\n            (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n        message.left !== undefined &&\n            (obj.left = message.left\n                ? CompressedExistenceProof.toJSON(message.left)\n                : undefined);\n        message.right !== undefined &&\n            (obj.right = message.right\n                ? CompressedExistenceProof.toJSON(message.right)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = {\n            ...baseCompressedNonExistenceProof,\n        };\n        if (object.key !== undefined && object.key !== null) {\n            message.key = object.key;\n        }\n        else {\n            message.key = new Uint8Array();\n        }\n        if (object.left !== undefined && object.left !== null) {\n            message.left = CompressedExistenceProof.fromPartial(object.left);\n        }\n        else {\n            message.left = undefined;\n        }\n        if (object.right !== undefined && object.right !== null) {\n            message.right = CompressedExistenceProof.fromPartial(object.right);\n        }\n        else {\n            message.right = undefined;\n        }\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob ||\n    ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa ||\n    ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (let i = 0; i < arr.byteLength; ++i) {\n        bin.push(String.fromCharCode(arr[i]));\n    }\n    return btoa(bin.join(\"\"));\n}\n"]}]}