{"remainingRequest":"/home/saptarsi/go/src/shiaa3/vue/node_modules/babel-loader/lib/index.js!/home/saptarsi/go/src/shiaa3/vue/node_modules/eslint-loader/index.js??ref--13-0!/home/saptarsi/go/src/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.gov.v1beta1/index.js","dependencies":[{"path":"/home/saptarsi/go/src/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.gov.v1beta1/index.js","mtime":1616099062174},{"path":"/home/saptarsi/go/src/shiaa3/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/saptarsi/go/src/shiaa3/vue/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/saptarsi/go/src/shiaa3/vue/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/saptarsi/go/src/shiaa3/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.gov.v1beta1/index.js"],"names":["txClient","queryClient","SpVuexError","TextProposal","Deposit","Proposal","TallyResult","Vote","DepositParams","VotingParams","TallyParams","initTxClient","vuexGetters","addr","initQueryClient","getStructure","template","structure","fields","Object","entries","key","value","field","name","type","push","getDefaultState","Proposals","Votes","Params","Deposits","_Structure","fromPartial","_Subscriptions","Set","state","namespaced","mutations","RESET_STATE","assign","QUERY","query","JSON","stringify","SUBSCRIBE","subscription","add","UNSUBSCRIBE","delete","getters","getProposal","params","getProposals","getVote","getVotes","getParams","getDeposit","getDeposits","getTallyResult","getTypeStructure","actions","init","dispatch","rootGetters","console","log","on","resetState","commit","unsubscribe","StoreUpdate","forEach","action","payload","QueryProposal","options","subscribe","all","queryProposal","proposal_id","data","error","QueryProposals","queryProposals","pagination","nextKey","next_values","keys","prop","Array","isArray","QueryVote","queryVote","voter","QueryVotes","queryVotes","QueryParams","queryParams","params_type","QueryDeposit","queryDeposit","depositor","QueryDeposits","queryDeposits","QueryTallyResult","queryTallyResult","sendMsgSubmitProposal","fee","memo","msgSubmitProposal","msg","signAndBroadcast","amount","gas","result","toString","sendMsgDeposit","msgDeposit","sendMsgVote","msgVote","MsgSubmitProposal","MsgDeposit","MsgVote"],"mappings":"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","sourcesContent":["import { txClient, queryClient } from './module';\n// @ts-ignore\nimport { SpVuexError } from '@starport/vuex';\nimport { TextProposal } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { Deposit } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { Proposal } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { TallyResult } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { Vote } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { DepositParams } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { VotingParams } from \"./module/types/cosmos/gov/v1beta1/gov\";\nimport { TallyParams } from \"./module/types/cosmos/gov/v1beta1/gov\";\nasync function initTxClient(vuexGetters) {\n    return await txClient(vuexGetters['common/wallet/signer'], {\n        addr: vuexGetters['common/env/apiTendermint']\n    });\n}\nasync function initQueryClient(vuexGetters) {\n    return await queryClient({\n        addr: vuexGetters['common/env/apiCosmos']\n    });\n}\nfunction getStructure(template) {\n    let structure = { fields: [] };\n    for (const [key, value] of Object.entries(template)) {\n        let field = {};\n        field.name = key;\n        field.type = typeof value;\n        structure.fields.push(field);\n    }\n    return structure;\n}\nconst getDefaultState = () => {\n    return {\n        Proposal: {},\n        Proposals: {},\n        Vote: {},\n        Votes: {},\n        Params: {},\n        Deposit: {},\n        Deposits: {},\n        TallyResult: {},\n        _Structure: {\n            TextProposal: getStructure(TextProposal.fromPartial({})),\n            Deposit: getStructure(Deposit.fromPartial({})),\n            Proposal: getStructure(Proposal.fromPartial({})),\n            TallyResult: getStructure(TallyResult.fromPartial({})),\n            Vote: getStructure(Vote.fromPartial({})),\n            DepositParams: getStructure(DepositParams.fromPartial({})),\n            VotingParams: getStructure(VotingParams.fromPartial({})),\n            TallyParams: getStructure(TallyParams.fromPartial({})),\n        },\n        _Subscriptions: new Set(),\n    };\n};\n// initial state\nconst state = getDefaultState();\nexport default {\n    namespaced: true,\n    state,\n    mutations: {\n        RESET_STATE(state) {\n            Object.assign(state, getDefaultState());\n        },\n        QUERY(state, { query, key, value }) {\n            state[query][JSON.stringify(key)] = value;\n        },\n        SUBSCRIBE(state, subscription) {\n            state._Subscriptions.add(subscription);\n        },\n        UNSUBSCRIBE(state, subscription) {\n            state._Subscriptions.delete(subscription);\n        }\n    },\n    getters: {\n        getProposal: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Proposal[JSON.stringify(params)] ?? {};\n        },\n        getProposals: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Proposals[JSON.stringify(params)] ?? {};\n        },\n        getVote: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Vote[JSON.stringify(params)] ?? {};\n        },\n        getVotes: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Votes[JSON.stringify(params)] ?? {};\n        },\n        getParams: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Params[JSON.stringify(params)] ?? {};\n        },\n        getDeposit: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Deposit[JSON.stringify(params)] ?? {};\n        },\n        getDeposits: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Deposits[JSON.stringify(params)] ?? {};\n        },\n        getTallyResult: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.TallyResult[JSON.stringify(params)] ?? {};\n        },\n        getTypeStructure: (state) => (type) => {\n            return state._Structure[type].fields;\n        }\n    },\n    actions: {\n        init({ dispatch, rootGetters }) {\n            console.log('init');\n            if (rootGetters['common/env/client']) {\n                rootGetters['common/env/client'].on('newblock', () => {\n                    dispatch('StoreUpdate');\n                });\n            }\n        },\n        resetState({ commit }) {\n            commit('RESET_STATE');\n        },\n        unsubscribe({ commit }, subscription) {\n            commit('UNSUBSCRIBE', subscription);\n        },\n        async StoreUpdate({ state, dispatch }) {\n            state._Subscriptions.forEach((subscription) => {\n                dispatch(subscription.action, subscription.payload);\n            });\n        },\n        async QueryProposal({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryProposal(key.proposal_id, query)).data : (await (await initQueryClient(rootGetters)).queryProposal(key.proposal_id)).data;\n                commit('QUERY', { query: 'Proposal', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryProposal', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getProposal']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryProposal', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryProposals({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryProposals(query)).data : (await (await initQueryClient(rootGetters)).queryProposals()).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryProposals({ ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'Proposals', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryProposals', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getProposals']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryProposals', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryVote({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryVote(key.proposal_id, key.voter, query)).data : (await (await initQueryClient(rootGetters)).queryVote(key.proposal_id, key.voter)).data;\n                commit('QUERY', { query: 'Vote', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryVote', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getVote']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryVote', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryVotes({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryVotes(key.proposal_id, query)).data : (await (await initQueryClient(rootGetters)).queryVotes(key.proposal_id)).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryVotes(key.proposal_id, { ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'Votes', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryVotes', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getVotes']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryVotes', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryParams({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryParams(key.params_type, query)).data : (await (await initQueryClient(rootGetters)).queryParams(key.params_type)).data;\n                commit('QUERY', { query: 'Params', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryParams', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getParams']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryParams', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryDeposit({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryDeposit(key.proposal_id, key.depositor, query)).data : (await (await initQueryClient(rootGetters)).queryDeposit(key.proposal_id, key.depositor)).data;\n                commit('QUERY', { query: 'Deposit', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDeposit', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDeposit']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryDeposit', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryDeposits({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryDeposits(key.proposal_id, query)).data : (await (await initQueryClient(rootGetters)).queryDeposits(key.proposal_id)).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryDeposits(key.proposal_id, { ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'Deposits', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDeposits', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDeposits']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryDeposits', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryTallyResult({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryTallyResult(key.proposal_id, query)).data : (await (await initQueryClient(rootGetters)).queryTallyResult(key.proposal_id)).data;\n                commit('QUERY', { query: 'TallyResult', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryTallyResult', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getTallyResult']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryTallyResult', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async sendMsgSubmitProposal({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgSubmitProposal(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgSubmitProposal:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgSubmitProposal:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgDeposit({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgDeposit(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgDeposit:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgDeposit:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgVote({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgVote(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgVote:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgVote:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async MsgSubmitProposal({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgSubmitProposal(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgSubmitProposal:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgSubmitProposal:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgDeposit({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgDeposit(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgDeposit:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgDeposit:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgVote({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgVote(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgVote:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgVote:Create', 'Could not create message.');\n                }\n            }\n        },\n    }\n};\n"]}]}